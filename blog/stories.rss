<?xml version="1.0"?>
<rss version="2.0">
<channel>
	<title>wissel.net Usability - Productivity - Business - The web - Singapore and Twins</title>
	<link>https://wissel.net/blog/stories.rss</link>
	<description>Thoughts, Insights and Opinions of Stephan H. Wissel. Topics included: Salesforce, Lotus Notes and Domino, IBM Websphere, NodeJS, JavaScript,  J2EE, .Net, Software Archtecture, Personcentric Development, Agile Software, SDLC, Singapore and my Twins</description>
	<language>en,de</language>
	<copyright>(C) 2003 - 2021 Stephan H. Wissel, All rights reserved</copyright>
	<pubdate>Sun, 08 Jan 2023 08:16:02 +0000</pubdate>
<item>
	<title>Java style guide: Functions, Streams and Optionals</title>
	<description>&lt;p&gt;Over the years I developed a certain style developing in Java (and other languages) that made my code more readable. This isn't about the &lt;a href="https://google.github.io/styleguide/javaguide.html"&gt;formatting style guide&lt;/a&gt; (Just stick to Google) or making &lt;a href="/blog/2021/12/spotless-code-with-a-git-hook.html"&gt;code spotless&lt;/a&gt;, but about style.&lt;/p&gt;
&lt;h3&gt;Objectives&lt;/h3&gt;
&lt;p&gt;Code needs to be testable, easy to adopt and understandable when someone else, like your future self, tries to read it. Starting with &lt;a href="https://en.wikipedia.org/wiki/SOLID"&gt;SOLID&lt;/a&gt; principles, the guidelines help to get there. They work for any style of development, while I strongly recommend looking at &lt;a href="https://en.wikipedia.org/wiki/Test-driven_development"&gt;TDD&lt;/a&gt;, &lt;a href="https://www.youtube.com/c/ContinuousDelivery"&gt;Dave agrees&lt;/a&gt;, so does &lt;a href="https://www.youtube.com/@AllenHolub"&gt;Allen&lt;/a&gt;. In no particular order, let's dig in.&lt;/p&gt;</description>
	<link>2023/01/java-streams-and-optionals.html</link>
	<author>Stephan H. Wissel</author>
	<guid>059f25e0-8f13-11ed-b4e6-ebac2f945d06</guid>
	<pubDate>08 January 2023</pubDate>

</item>
<item>
	<title>Please wait until that HTTP service is ready</title>
	<description>&lt;p&gt;Our brave new world of &lt;a href="https://kubernetes.io/"&gt;containers&lt;/a&gt; and &lt;a href="https://microservices.io/"&gt;microservices&lt;/a&gt; runs on a combination of &lt;a href="https://yaml.org/"&gt;YAML&lt;/a&gt; and &lt;a href="https://linux.die.net/man/1/bash"&gt;shell scripts&lt;/a&gt;.&lt;br&gt; Getting them to run in the desired sequence can be a challenge.&lt;/p&gt;
&lt;h3&gt;When ready isn't ready&lt;/h3&gt;
&lt;p&gt;All container environments have a "depends" clause, so the container runtime can determine the correct startup sequence for the zoo of containers comprising the application to be launched. Each container will usually signal when it is ready.&lt;/p&gt;
&lt;p&gt;However &lt;em&gt;ready&lt;/em&gt; can mean different things to different applications.&lt;/p&gt;
&lt;p&gt;In the container world it &lt;i&gt;should&lt;/i&gt; be: the service is available.&lt;br&gt; However it &lt;i&gt;could&lt;/i&gt; be: service was successfully started, but might be busy with house keeping. In the later case the start scripts of the dependent services need to do their own waiting&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://curl.se/"&gt;curl&lt;/a&gt; to the rescue&lt;/h3&gt;
&lt;p&gt;Curl is the &lt;a href="https://amzn.to/3jHi8RN"&gt;Swiss Army Knive&lt;/a&gt; of network tools. It probably takes a lifetime to understand all its possibilities. Make sure you have the current version, but at least &lt;a href="https://curl.se/changes.html#7_52_0"&gt;7.52.0&lt;/a&gt; from 2016.&lt;/p&gt;
&lt;p&gt;Whipping up a little shell script provides what we need:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;#!/bin/bash
# Wait for a http service to be available
export TARGET=http://baseservice.local/
curl -v \
     --retry 10 \
     --retry-delay 20 \
     --retry-connrefused \
     $TARGET

if [ "$?" -ne 0 ]; then
  echo "Failed to reach $TARGET"
  exit 1
else
  echo "$TARGET has replied!"
fi
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let's break it down:&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;&lt;code&gt;export TARGET&lt;/code&gt; defines the URL you want to reach. Works for both &lt;code&gt;http&lt;/code&gt; and &lt;code&gt;https&lt;/code&gt;. Potentially works for other protocols supported by &lt;a href="https://curl.se/"&gt;curl&lt;/a&gt; as well, but I haven't tested that (yet). You might swap it out for &lt;code&gt;$1&lt;/code&gt; to capture the first parameter called&lt;/li&gt;
 &lt;li&gt;&lt;code&gt;\&lt;/code&gt; denominates line continuation. The whole command needs to be on one line which is hard to read. &lt;code&gt;\&lt;/code&gt; tells &lt;a href="https://www.linux.org/"&gt;Linux&lt;/a&gt; to treat the following line as belonging to the current one. On Windows you need to replace &lt;code&gt;\&lt;/code&gt; with &lt;code&gt;^&lt;/code&gt; and alter the syntax according to &lt;a href="https://learn.microsoft.com/en-us/powershell/"&gt;Powershell&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="https://curl.se/docs/manpage.html#-v"&gt;&lt;code&gt;curl -v&lt;/code&gt;&lt;/a&gt; Verbose output, so the logs tell the full story. When you work with privat &lt;a href="https://en.wikipedia.org/wiki/Certificate_authority"&gt;CA&lt;/a&gt; or &lt;a href="https://en.wikipedia.org/wiki/Self-signed_certificate"&gt;self signed certificates&lt;/a&gt; (Don't do self signed, use &lt;a href="https://www.wissel.net/blog/2019/10/create-your-own-ca.html"&gt;your own CA&lt;/a&gt;), you need to add &lt;a href="https://curl.se/docs/manpage.html#-k"&gt;&lt;code&gt;-k&lt;/code&gt;&lt;/a&gt; or &lt;a href="https://curl.se/docs/manpage.html#-k"&gt;&lt;code&gt;--insecure&lt;/code&gt;&lt;/a&gt; to make this work&lt;/li&gt;
 &lt;li&gt;&lt;a href="https://curl.se/docs/manpage.html#--retry"&gt;&lt;code&gt;--retry 10&lt;/code&gt;&lt;/a&gt; try the connection 10 times&lt;/li&gt;
 &lt;li&gt;&lt;a href="https://curl.se/docs/manpage.html#--retry-delay"&gt;&lt;code&gt;--retry-delay 20&lt;/code&gt;&lt;/a&gt; Wait 20 sec until the next try&lt;/li&gt;
 &lt;li&gt;&lt;a href="https://curl.se/docs/manpage.html#--retry-connrefused"&gt;&lt;code&gt;--retry-connrefused&lt;/code&gt;&lt;/a&gt; retry even on "connection refused" responses. By default curl retries only http responses not in the &lt;code&gt;2xx&lt;/code&gt; range. Connection refused is HTTP's way telling you: there's nothing taking your call, which curl, without &lt;a href="https://curl.se/docs/manpage.html#--retry-connrefused"&gt;&lt;code&gt;--retry-connrefused&lt;/code&gt;&lt;/a&gt; takes as final, fatal error and terminates retries. When you have &lt;a href="https://curl.se/changes.html#7_71_0"&gt;curl v7.71.0&lt;/a&gt; (from 2020 or later), you can use &lt;a href="https://curl.se/docs/manpage.html#--retry-all-errors"&gt;&lt;code&gt;--retry-all-errors&lt;/code&gt;&lt;/a&gt; instead. The documentation warns &lt;i&gt;This option is the "sledgehammer" of retrying.&lt;/i&gt; Use it wisely&lt;/li&gt;
 &lt;li&gt;&lt;code&gt;if [ "$?" -ne 0 ]; then&lt;/code&gt; Commands usually return a numeric result. Anything other than &lt;code&gt;0&lt;/code&gt; indicates a failure condition of some sort. When curl has exhausted the number of retries a value greater 0 will be returned. To capture the return value we us &lt;code&gt;$?&lt;/code&gt;&lt;/li&gt;
 &lt;li&gt;&lt;code&gt;return 1&lt;/code&gt; We indicate that our script failed. So it can be called from other scripts&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We could swap out &lt;code&gt;$TARGET&lt;/code&gt; for &lt;code&gt;$1&lt;/code&gt; which makes the script callable handing over the target URL e.g &lt;code&gt;waitforme.sh http://someURL&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Beyond containers&lt;/h3&gt;
&lt;p&gt;The script is also useful in "classic" situations, where you start a service in the background (which by definition is asynchonous). Your local environment uses anything like:&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;&lt;code&gt;./startdb &amp;amp;&lt;/code&gt;&lt;/li&gt;
 &lt;li&gt;&lt;code&gt;systemctl start myservice&lt;/code&gt;&lt;/li&gt;
 &lt;li&gt;&lt;code&gt;domino[_container] start&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can use the curl retry for any automation. Adjust the wait time and the retry time to your needs.&lt;/p&gt;
&lt;p&gt;As usual &lt;strong&gt;YMMV&lt;/strong&gt;&lt;/p&gt;</description>
	<link>2023/01/wait-for-service-availability.html</link>
	<author>Stephan H. Wissel</author>
	<guid>1f239d20-8a5e-11ed-8d75-0b9a30c900e1</guid>
	<pubDate>02 January 2023</pubDate>

</item>
<item>
	<title>On Technical Interviews</title>
	<description>&lt;p&gt;When the HCL Labs is hiring engineers, we conduct technical interviews. I had and have the priviledge to interview, hire and work with incredible talented individuals in the process. Lets look behind the curtain of the process.&lt;/p&gt;
&lt;h3&gt;What we are looking for&lt;/h3&gt;
&lt;p&gt;The technical interview is conducted by the interviewie's potential future colleagues. We try to gauge skills, conduct and team fit. Fit includes: does it improve diversity. You got a tatoo, tell me how you picked the design? You like tailored suits, who's your tailor? Punk is your thing, what's your favorite band? - You get the drift.&lt;/p&gt;
&lt;p&gt;Can the candidate explain technology to peer engineers and understands the fundamental concepts? We found a surprising number of developers who don't know how their platform actually works. Topics like "The Node event loop" or "What does Maven do".&lt;/p&gt;
&lt;p&gt;Knowing your environment is essential. Have you kept uptodate with latest changes, even your current role holds you back on applying them.&lt;/p&gt;
&lt;p&gt;Does the candidate know about our "Buzzwords" &lt;a href="https://martinfowler.com/bliki/Yagni.html"&gt;YAGNI&lt;/a&gt;, &lt;a href="https://www.digitalocean.com/community/tutorials/what-is-dry-development"&gt;DRY&lt;/a&gt;, &lt;a href="https://www.interaction-design.org/literature/article/kiss-keep-it-simple-stupid-a-design-principle"&gt;KISS&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/SOLID"&gt;SOLID&lt;/a&gt; or &lt;a href="https://en.wikipedia.org/wiki/Software_design_pattern"&gt;pattern&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;What we ask&lt;/h3&gt;
&lt;p&gt;Questions come from all areas: general project conducts, APIs, Code (mostly JS, TS &amp;amp; Java), HTTP and databases. We are looking not only for "I have x years experience", but also &lt;strong&gt;general awareness&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Example: you might not have a chance to work with a graph database, but you know they exist, what they are supposed to solve. etc.&lt;/p&gt;
&lt;p&gt;A little taste:&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;How much &lt;a href="https://www.scrum.org/"&gt;Scrum&lt;/a&gt; does one entertain to be &lt;a href="http://agilemanifesto.org"&gt;agile&lt;/a&gt; and what's &lt;a href="https://heartofagile.com"&gt;the essence of agile&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;How to interact and resolve ambiguity in tasks and asks&lt;/li&gt;
 &lt;li&gt;On object oriented vs functional programming styles&lt;/li&gt;
 &lt;li&gt;Types of NoSQL databases and their uses&lt;/li&gt;
 &lt;li&gt;How do the joins (left, right, inner, outer) in an RDBMS work&lt;/li&gt;
 &lt;li&gt;Use cases for SQL and NoSQL&lt;/li&gt;
 &lt;li&gt;HTTP Verbs: POST vs PUT vs PATCH&lt;/li&gt;
 &lt;li&gt;REST &lt;a href="https://www.openapis.org"&gt;experience&lt;/a&gt; including &lt;a href="https://www.postman.com"&gt;a tool&lt;/a&gt; or &lt;a href="https://www.charlesproxy.com"&gt;another&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;HTTP return codes. Everyone knows &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/200"&gt;200&lt;/a&gt;, some &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/201"&gt;201&lt;/a&gt; and the difference to 200, and a few &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/418"&gt;418&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS"&gt;CORS&lt;/a&gt; and &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP"&gt;CSP&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;Callbacks vs. Promises&lt;/li&gt;
 &lt;li&gt;&lt;code&gt;let&lt;/code&gt; vs &lt;code&gt;var&lt;/code&gt; vs &lt;code&gt;const&lt;/code&gt;&lt;/li&gt;
 &lt;li&gt;&lt;code&gt;function&lt;/code&gt; vs &lt;code&gt;=&amp;gt;&lt;/code&gt;&lt;/li&gt;
 &lt;li&gt;Loops vs streams&lt;/li&gt;
 &lt;li&gt;Testing: TDD, UnitTests and Integration Tests&lt;/li&gt;
 &lt;li&gt;SQL Injection and prevention&lt;/li&gt;
 &lt;li&gt;Maven &amp;amp; NPM&lt;/li&gt;
 &lt;li&gt;Git &amp;amp; GitHub&lt;/li&gt;
 &lt;li&gt;What do you use NodeJS for&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Coding challenges&lt;/h3&gt;
&lt;p&gt;Coding challenges in interviews &lt;a href="https://www.google.com/search?q=Do+coding+challenges+in+interviews+make+sense"&gt;are controversial&lt;/a&gt; and they are &lt;a href="https://betterprogramming.pub/3-reasons-why-coding-interviews-are-not-as-flawed-as-some-claim-8f1b82083cc4"&gt;usefull&lt;/a&gt;.&lt;br&gt; We keep ours simple and explicitely allow questions, dialogue or googling for answers, with the warning label: you need to explain your solution, no matter what.&lt;/p&gt;
&lt;p&gt;Being a little sneaky we keep the challenge requirements fuzzy to check if the candidate will ask for clarifications.&lt;/p&gt;
&lt;p&gt;The exercises are light and not too far from practical use:&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;talk to an API&lt;/li&gt;
 &lt;li&gt;refactor code&lt;/li&gt;
 &lt;li&gt;fix performance&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Work with us&lt;/h3&gt;
&lt;p&gt;HCL &lt;a href="https://www.hcltech.com/geo-presence/philippines"&gt;in Manila&lt;/a&gt; is looking for engineers of all levels and career stages. Come join us, some current openings from Linkedin (links are temporary, grab them while they are hot):&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;&lt;a href="https://www.linkedin.com/jobs/view/3339235691/"&gt;Senior Software Developer&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="https://www.linkedin.com/jobs/view/3339238264/"&gt;Lead Software Engineer&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="https://www.linkedin.com/jobs/view/3149624605/"&gt;UX Designer&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="https://www.linkedin.com/jobs/view/3392538874/"&gt;Documentation Lead (Technical Writer)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
	<link>2022/12/on-technical-interviews.html</link>
	<author>Stephan H. Wissel</author>
	<guid>f03fa7b0-79d2-11ed-bd62-079a420fb032</guid>
	<pubDate>12 December 2022</pubDate>

</item>
<item>
	<title>Async testing with vert.x</title>
	<description>&lt;p&gt;&lt;a href="https://amzn.to/3fzbkEg"&gt;Test driven development&lt;/a&gt; gets interesting when actions might or might not complete somewhen in the future. Point in case: HTTP requests (&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API"&gt;fetch&lt;/a&gt; returns a promise)&lt;/p&gt;
&lt;h3&gt;vert.x and jUnit5&lt;/h3&gt;
&lt;p&gt;I frequently write little tests, that spin up an &lt;a href="https://vertx.io/docs/apidocs/io/vertx/core/http/HttpServer.html"&gt;http sever&lt;/a&gt; before the test, run individual tests using a &lt;a href="https://vertx.io/docs/apidocs/io/vertx/ext/web/client/WebClient.html"&gt;WebClient&lt;/a&gt;. All these operations run asynchronous, returning a &lt;a href="https://vertx.io/docs/apidocs/io/vertx/core/Future.html"&gt;vert.x Future&lt;/a&gt; (In JavaScript Land the equivalent would be a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"&gt;promise&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;To make this pain free, vert.x provides a &lt;a href="https://vertx.io/docs/vertx-junit5/java/"&gt;full integration&lt;/a&gt; into &lt;a href="https://junit.org/junit5/"&gt;jUnit 5&lt;/a&gt;. Using the annotation &lt;code&gt;@ExtendWith(VertxExtension.class)&lt;/code&gt; vert.x provides two injectable parameters: &lt;a href="https://vertx.io/docs/apidocs/io/vertx/core/Vertx.html"&gt;Vertx&lt;/a&gt; and &lt;a href="https://vertx.io/docs/apidocs/io/vertx/junit5/VertxTestContext.html"&gt;VertxTestContext&lt;/a&gt;. Add the simple mental rule: All async operations need to interact with the &lt;a href="https://vertx.io/docs/apidocs/io/vertx/junit5/VertxTestContext.html"&gt;VertxTestContext&lt;/a&gt;.&lt;/p&gt;</description>
	<link>2022/11/async-testing-with-vertx.html</link>
	<author>Stephan H. Wissel</author>
	<guid>2b95a890-5b6b-11ed-a872-8949e2147baa</guid>
	<pubDate>03 November 2022</pubDate>

</item>
<item>
	<title>Beyond Java 8: The Cool Stuff</title>
	<description>&lt;p&gt;Java is evolving rapidly. &lt;a href="https://twitter.com/henri_tremblay"&gt;Henri Tremblay&lt;/a&gt; is walking through the cool stuff. Henri is, besides other activities a contributor to &lt;a href="https://easymock.org/"&gt;EasyMock&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;From Java 7 (2011) to Java 19 (2022)&lt;/h3&gt;
&lt;p&gt;Unless stated otherwise Java 17 (2021) LTS will work for &lt;a href="https://github.com/henri-tremblay/javathecoolstuff"&gt;the examples&lt;/a&gt;. Henri used a trading app to walk through upgrading steps.&lt;/p&gt;
&lt;p&gt;Impressive: just moving from Java 8 to Java 19 shows double digit performance improvements&lt;/p&gt;
&lt;p&gt;Some of the tips:&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;use the &lt;a href="https://www.baeldung.com/java-clock"&gt;java.time.Clock&lt;/a&gt; object for anything date/time, Don't use &lt;code&gt;Date&lt;/code&gt;. Inject the clock object.&lt;/li&gt;
 &lt;li&gt;use &lt;a href="https://www.baeldung.com/java-comparator-comparable"&gt;Comparators&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;use &lt;a href="https://mkyong.com/java8/java-8-stream-read-a-file-line-by-line/"&gt;Files.lines&lt;/a&gt; to read by line&lt;/li&gt;
 &lt;li&gt;use the &lt;a href="https://github.com/apache/maven-mvnd"&gt;Maven deamon&lt;/a&gt; to speed compilation&lt;/li&gt;
 &lt;li&gt;Be careful with &lt;code&gt;stream().findAny()&lt;/code&gt; - in most cases a &lt;code&gt;Map&lt;/code&gt; performs way better&lt;/li&gt;
 &lt;li&gt;Use &lt;code&gt;"""&lt;/code&gt; text blocks (why o why did Java not pick the tripple backtick)&lt;/li&gt;
 &lt;li&gt;Use &lt;code&gt;Files.writeString&lt;/code&gt; if it is a String you write&lt;/li&gt;
 &lt;li&gt;Use &lt;a href="https://www.baeldung.com/jlink"&gt;jlink&lt;/a&gt; and &lt;a href="https://www.baeldung.com/jar-windows-executables"&gt;jpackage&lt;/a&gt; for distribution&lt;/li&gt;
 &lt;li&gt;Use &lt;a href="https://docs.oracle.com/en/java/javase/13/language/switch-expressions.html"&gt;switch expressions&lt;/a&gt; which returns values (not convinced about that yet)&lt;/li&gt;
 &lt;li&gt;Use &lt;a href="https://www.baeldung.com/java-record-keyword"&gt;Records&lt;/a&gt; for immutable data&lt;/li&gt;
 &lt;li&gt;Use the new &lt;a href="https://www.baeldung.com/java-pattern-matching-instanceof"&gt;instanceof&lt;/a&gt; syntax&lt;/li&gt;
 &lt;li&gt;Use the new &lt;a href="https://www.baeldung.com/java-17-random-number-generators"&gt;RandomGenerator&lt;/a&gt; for better performance&lt;/li&gt;
 &lt;li&gt;Sealed types allow tighter controls&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A quite enjoyable session&lt;/p&gt;</description>
	<link>2022/10/beyond-java-8.html</link>
	<author>Stephan H. Wissel</author>
	<guid>7f06e5d0-508e-11ed-b82f-f378cff35c71</guid>
	<pubDate>20 October 2022</pubDate>

</item>
<item>
	<title>Test-Driven Development Is a Paradox</title>
	<description>&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Test-driven_development"&gt;TDD&lt;/a&gt; is favored by &lt;a href="https://www.youtube.com/c/ContinuousDelivery"&gt;very&lt;/a&gt; &lt;a href="https://en.wikipedia.org/wiki/Martin_Fowler_(software_engineer)"&gt;succesfull&lt;/a&gt; &lt;a href="https://en.wikipedia.org/wiki/Kent_Beck"&gt;engineers&lt;/a&gt; as a means of accellerating software development by preserving quality.&lt;/p&gt;
&lt;p&gt;Objections &lt;a href="https://stackoverflow.com/questions/64333/disadvantages-of-test-driven-development"&gt;are plenty&lt;/a&gt;. The talk by &lt;a href="https://twitter.com/burkhufnagel"&gt;Burk Hufnagel&lt;/a&gt; tries to address those.&lt;/p&gt;
&lt;h3&gt;The TDD Paradox&lt;/h3&gt;
&lt;p&gt;TDD requires you to write more code, so you can be done sooner. It's like learning to drive a car. Your first mile takes, give or take, 40-50h to complete: Driving lessons, driving tests, get the license issued before you drive. You can walk a lot more in 50 hours, you get the drift...&lt;/p&gt;
&lt;p&gt;Looking deeper at "development" we see, it has multiple components:&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;understanding and clarifying the business requirements (business rather loosely defined)&lt;/li&gt;
 &lt;li&gt;write code&lt;/li&gt;
 &lt;li&gt;manual testing&lt;/li&gt;
 &lt;li&gt;debugging&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;TDD helps with the first and third component. A well defined test communicates the desired outcome and serves as a living specification. Having the machine running tests reduces the need for manual testing and frees up time to work on functionality&lt;/p&gt;
&lt;h3&gt;Test early, test often&lt;/h3&gt;
&lt;p&gt;TDD proposes to write tests first, not as an afterthought. The strongest new argument Burk proposed was: nobody wants to write a test for code freshly debugged and proven working (at that time). There's no immediate value in it. A test, initially failing, written upfront is a reassurance to be on the right track when going green.&lt;/p&gt;
&lt;p&gt;Using the "test first" approach, tests turn into a design process, increasing the confidence in not only doing things right, but also doing the right thing. In other words: &lt;strong&gt;Tests are Specifications&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Best results are to be had when working in small increments and &lt;a href="https://martinfowler.com/bliki/Yagni.html"&gt;resist the urge&lt;/a&gt; to "code for things you think are coming next" instead of "(just) make the test pass".&lt;/p&gt;
&lt;h3&gt;It's not a cure-it-all&lt;/h3&gt;
&lt;p&gt;TDD might not be a good fit:&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;no clear business requirements - you can't test when you don't know what you want&lt;/li&gt;
 &lt;li&gt;exploratory coding - trying stuff out&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A common objection is "we have an existing non-TDD code base, we can't switch to TDD". Burk suggest to use "Defect Driven Development". Write a test that test for defect free behavior and then fix the defect. Your test harness will grow while defects shrink&lt;/p&gt;
&lt;h3&gt;Test long and prosper&lt;/h3&gt;
&lt;p&gt;The usual subjects for testing in Java are &lt;a href="https://junit.org/junit5/"&gt;JUnit&lt;/a&gt; and &lt;a href="https://site.mockito.org/"&gt;Mockito&lt;/a&gt;. Burk introduced another, very promising tool: &lt;a href="https://spockframework.org/"&gt;Spock&lt;/a&gt;. Spock is written in &lt;a href="https://groovy-lang.org/"&gt;Groovy&lt;/a&gt; and allows to specify a test's purpose more expressive and concise than Junit's &lt;code&gt;@DisplayName&lt;/code&gt; property. Luckily it isn't an exclusive-or question, Spock interacts with JUnit and Mockito quite nicely.&lt;/p&gt;
&lt;h3&gt;In conclusion&lt;/h3&gt;
&lt;p&gt;Burk made a good case for TDD, backed by experience and tooling, if in doubt &lt;a href="https://github.com/BurkHufnagel/Presentations/blob/master/TDD_is_a_Paradox.pdf"&gt;visit his arguments&lt;/a&gt;.&lt;/p&gt;</description>
	<link>2022/10/tdd-paradox.html</link>
	<author>Stephan H. Wissel</author>
	<guid>c79e5360-4fcf-11ed-8e72-918359ae0736</guid>
	<pubDate>19 October 2022</pubDate>

</item>
<item>
	<title>CI/CD, Github Actions, and GraalVM Native Image</title>
	<description>&lt;p&gt;&lt;a href="https://www.graalvm.org/"&gt;GraalVM&lt;/a&gt; is a promising polyglot runtime for Java, JavaScript, Python, Ruby and &lt;a href="https://webassembly.org/"&gt;WASM&lt;/a&gt;.&lt;br&gt; It can produce native images. Unsurprisingly &lt;em&gt;with great powers come&lt;/em&gt; ... lots of things to learn.&lt;/p&gt;
&lt;h3&gt;GraalVM Native Image Benefits&lt;/h3&gt;
&lt;p&gt;A native image has a number of benefits over an JVM based application, mainly owed to the extensive analysis done at build time.&lt;br&gt; Some of advantages mentioned:&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Runtime speed ~ 25% above the same code running on an JVM&lt;/li&gt;
 &lt;li&gt;Ahead of Time compilation can lead to up to 9 times less memory consumption than running on an JVM&lt;/li&gt;
 &lt;li&gt;Code executes faster with a smaller memory footprint than comparable Go applications ( but still is bigger/slower than C by a whisk)&lt;/li&gt;
 &lt;li&gt;Warmup time got moved to build time, improving startup time&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Building the image&lt;/h3&gt;
&lt;p&gt;Build has been greatly improved with tooling available:&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;a &lt;a href="https://graalvm.github.io/native-build-tools/latest/maven-plugin.html"&gt;Maven plugin&lt;/a&gt; (also available for &lt;a href="https://graalvm.github.io/native-build-tools/latest/gradle-plugin.html"&gt;Gradle&lt;/a&gt;), eliminating the need of extensive commandline foo.&lt;/li&gt;
 &lt;li&gt;a GitHub action to &lt;a href="https://github.com/marketplace/actions/github-action-for-graalvm"&gt;install the GraalVM tooing&lt;/a&gt; in a pipeline&lt;/li&gt;
 &lt;li&gt;reduced memory consumption, so most apps will fit into the GitHub build container limit of 7GB memory&lt;/li&gt;
 &lt;li&gt;option for a non-optimized fast build, useful for testing correctness&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Thoughts and conclusions&lt;/h3&gt;
&lt;p&gt;A big step in the right direction making native images more accessible. There's still room for improvements, like caching the build images and more samples. What Oracle solved nicely: If you are a GraalVM Enterprise customer, accessing GraalVM Enterprise edition is done using an access token, fully compatible to any build system. No messing around with downloads and manual installations required.&lt;/p&gt;</description>
	<link>2022/10/github-actions-graalvm.html</link>
	<author>Stephan H. Wissel</author>
	<guid>8b6bb240-4f37-11ed-bf58-75c7d10c023d</guid>
	<pubDate>18 October 2022</pubDate>

</item>
<item>
	<title>Streamlining Lage-scale Java Development using Error Prone</title>
	<description>&lt;p&gt;It has been a while since I attended an in-person conference. Finally this October I managed to attend &lt;a href="https://www.oracle.com/cloudworld/javaone/"&gt;JavaOne&lt;/a&gt; in Las Vegas. I shall report on interesting sessions.&lt;/p&gt;
&lt;p&gt;The first one is by &lt;a href="https://twitter.com/Sander_Mak"&gt;Sander Mak&lt;/a&gt; on a topic near and dear to me: Code Quality&lt;/p&gt;
&lt;h3&gt;Another tool in the box&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://errorprone.info"&gt;Error Prone&lt;/a&gt;, courtesy of Google, supplements tools like &lt;a href="https://www.sonarqube.org/"&gt;Sonar&lt;/a&gt;, &lt;a href="https://spotbugs.github.io/"&gt;Spotbugs&lt;/a&gt; or &lt;a href="https://checkstyle.sourceforge.io/"&gt;Checkstyle&lt;/a&gt;. Other than these tools it is a compiler plugin with &amp;gt; 500 checks.&lt;/p&gt;
&lt;p&gt;It can be configured to fix a set of identified errors automatically in code, inline or as patch file. Sander used a few simple demos to drive home what is possible using the tooling. Besides the ckecks that are available out-of-the-box one can implement extensions. One &lt;a href="https://github.com/mockito/mockito/tree/main/subprojects/errorprone"&gt;interesting contribution&lt;/a&gt; comes from the popular mocking framework &lt;a href="https://site.mockito.org/"&gt;Mockito&lt;/a&gt;, extending the checks to your use of mocking.&lt;/p&gt;
&lt;p&gt;Extending error-prone is possible using two complementary approaches:&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;writing your own extensions (extending &lt;a href="https://www.javadoc.io/doc/com.google.errorprone/error_prone_check_api/2.0.17/com/google/errorprone/bugpatterns/BugChecker.html"&gt;BugChecker&lt;/a&gt;), dealing with Java's AST and all its power&lt;/li&gt;
 &lt;li&gt;using the included ReFaster templates that allow for powerfull pattern based code upgrades&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Use cases&lt;/h3&gt;
&lt;p&gt;Just a few samples from the session:&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;implement consistency in coding style (not to confuse with &lt;a href="/blog/2021/12/spotless-code-with-a-git-hook.html"&gt;code style&lt;/a&gt;)&lt;/li&gt;
 &lt;li&gt;reduce visible clutter like &lt;code&gt;final&lt;/code&gt; before variables by using &lt;code&gt;@var&lt;/code&gt; to denote mutable variables and consider immutable the default&lt;/li&gt;
 &lt;li&gt;ease the transition to higher JVM versions, e.g replace &lt;code&gt;!Optional.isPresent()&lt;/code&gt; with &lt;code&gt;Optional.isEmpty()&lt;/code&gt; (JDK11)&lt;/li&gt;
 &lt;li&gt;verify logging uses &lt;code&gt;{}&lt;/code&gt; instead of &lt;code&gt;%s&lt;/code&gt;&lt;/li&gt;
 &lt;li&gt;fail builds that violate rules and conventions&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;My impression&lt;/h3&gt;
&lt;p&gt;Error-prone seems to be an important tool in toolbox to produce a well groomed Java code base. I loved Sander's progression from a simple introduction example to the more complex use cases that help his company deliver (pun intended). Error-prone isn't for the faint of heart, but a component that belongs into any code base of size. The session inspired me to improve our Java tooling, well done!&lt;/p&gt;
&lt;p&gt;The Steve pun, one last thing, was the &lt;a href="https://error-prone.picnic.tech"&gt;icing on the cake&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;More content by Sander&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;&lt;a href="https://javamodularity.com/"&gt;Java Modularity&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="https://app.pluralsight.com/profile/author/sander-mak"&gt;Pluralsight courses&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="https://error-prone.picnic.tech"&gt;PicNic OpenSource Error-prone extensions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
	<link>2022/10/java-development-error-prone.html</link>
	<author>Stephan H. Wissel</author>
	<guid>dfa72a30-4f17-11ed-a715-8718e51da0fa</guid>
	<pubDate>18 October 2022</pubDate>

</item>
<item>
	<title>Calling a vert.x async method from a sync method</title>
	<description>&lt;p&gt;Made popular by &lt;a href="https://nodejs.org/en/"&gt;NodeJS&lt;/a&gt; and &lt;a href="http://es6-features.org/#PromiseUsage"&gt;ES6&lt;/a&gt; &lt;a href="https://www.bmc.com/blogs/asynchronous-programming/"&gt;asynchronous programming&lt;/a&gt; promises (pun intended) better throughput and resource usage by entertaining an &lt;a href="https://en.wikipedia.org/wiki/Event_loop"&gt;Event Loop&lt;/a&gt;. In Java land &lt;a href="https://vertx.io"&gt;vert.x&lt;/a&gt; implements exactly this approach and has proven its mettle, being the foundation of &lt;a href="https://quarkus.io"&gt;Quarkus&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Your legacy app doesn't magically convert&lt;/h2&gt;
&lt;p&gt;When you start a new &lt;a href="https://vertx.io"&gt;vert.x&lt;/a&gt; project using the &lt;a href="https://start.vertx.io"&gt;App Generator&lt;/a&gt;, everything is asynchronous from the beginning. Snippets of synchronous code (a.k.a blocking code), you might need to maintain, can be wrapped into &lt;a href="https://vertx.io/docs/vertx-core/java/#blocking_code"&gt;executeBlocking&lt;/a&gt; and handled in their own thread.&lt;/p&gt;
&lt;p&gt;However when you are about to convert a synchronous application, e.g. a &lt;a href="https://en.wikipedia.org/wiki/Jakarta_Servlet"&gt;servlet&lt;/a&gt; to asynchronous and you can't finish in a sprint/session, things become interesting. The &lt;a href="https://docs.oracle.com/javaee/6/api/javax/servlet/http/HttpServlet.html#doGet%28javax.servlet.http.HttpServletRequest,%20javax.servlet.http.HttpServletResponse%29"&gt;&lt;code&gt;doGet&lt;/code&gt; method&lt;/a&gt; is synchronous by nature. There are a few steps that need to be accomplished:&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Have vert.x running in its own thread. You can't start it on the main thread with its blocking operations&lt;/li&gt;
 &lt;li&gt;Have a method that returns a &lt;a href="https://vertx.io/docs/apidocs/io/vertx/core/Future.html"&gt;vert.x Future&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;Convert that into a Java &lt;a href="https://www.baeldung.com/java-completablefuture"&gt;CompletableFuture&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let's have a look at the moving parts:&lt;/p&gt;</description>
	<link>2022/08/calling-a-vertx-async-method-from-a-sync-method.html</link>
	<author>Stephan H. Wissel</author>
	<guid>9871d820-12e2-11ed-a8ff-2955beb6d3bc</guid>
	<pubDate>03 August 2022</pubDate>

</item>
<item>
	<title>Case insensitive deserialization</title>
	<description>&lt;p&gt;Growing up in Windows with &lt;a href="https://en.wikipedia.org/wiki/BASIC"&gt;BASIC&lt;/a&gt; you learn case doesn't matter, so &lt;code&gt;Color&lt;/code&gt; is the same as &lt;code&gt;COLOR&lt;/code&gt; or &lt;code&gt;cOLOR&lt;/code&gt; when it comes to variable names. Same applies to &lt;code&gt;@Formula&lt;/code&gt; or item names in Notes documents.&lt;/p&gt;
&lt;p&gt;On the other side, &lt;a href="https://en.wikipedia.org/wiki/Linux"&gt;Linux&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/Java_(programming_language)"&gt;Java&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/JavaScript"&gt;JavaScript&lt;/a&gt; and &lt;a href="https://www.json.org/json-en.html"&gt;JSON&lt;/a&gt; are very much case sensitive.&lt;/p&gt;
&lt;p&gt;This poses a challenge when deserializing (handcrafted) JSON files.&lt;/p&gt;
&lt;h2&gt;The Task at hand&lt;/h2&gt;
&lt;p&gt;Deserialization of JSON into a Java class instance &lt;a href="https://www.baeldung.com/jackson-deserialization"&gt;can be done&lt;/a&gt; using &lt;a href="https://github.com/FasterXML/jackson"&gt;jackson&lt;/a&gt;. This is also what the &lt;a href="https://vertx.io/docs/apidocs/io/vertx/core/json/JsonObject.html"&gt;JsonObject&lt;/a&gt; in &lt;a href="https://vertx.io"&gt;vert.x&lt;/a&gt; uses when you call &lt;a href="https://vertx.io/docs/apidocs/io/vertx/core/json/JsonObject.html#mapTo-java.lang.Class-"&gt;&lt;code&gt;json.mapTo(SomeClass)&lt;/code&gt;&lt;/a&gt;. Not using vert.x? You can use the &lt;a href="https://www.baeldung.com/jackson-object-mapper-tutorial"&gt;&lt;code&gt;ObjectMapper&lt;/code&gt;&lt;/a&gt;. Let's look at a sample Java class&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-java"&gt;import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import io.vertx.core.json.JsonObject;

@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonIgnoreProperties(ignoreUnknown = true)
public class JsonTest {

  public static fromJson(final JsonObject source) {
    return source.mapTo(JsonTest.class);
  }

  private String color;
  private String shape;
  private int answer;
  private boolean pretty;

  /* GETTERS and SETTERS omitted for brevity
     Let your IDE add them for you */
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you want to deserialize a good JSON, which works as expected:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;{
  "color": "Red",
  "shape": "round",
  "answer": 11,
  "pretty": true
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;but the very moment your JSON isn't following proper capitalization, like human provided JSON,&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;{
  "Color": "Red",
  "Shape": "square",
  "Answer": 42,
  "pretty": true,
  "ignore": "this"
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;deserialization will fail. We need to fix that.&lt;/p&gt;</description>
	<link>2022/06/case-insensitive-deserialization.html</link>
	<author>Stephan H. Wissel</author>
	<guid>77851ba0-e6f9-11ec-8a41-85f9122bc611</guid>
	<pubDate>08 June 2022</pubDate>

</item>

</channel>
</rss>
