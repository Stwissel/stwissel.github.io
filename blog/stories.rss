<?xml version="1.0"?>
<rss version="2.0">
<channel>
	<title>wissel.net Usability - Productivity - Business - The web - Singapore and Twins</title>
	<link>https://wissel.net/blog/stories.rss</link>
	<description>Thoughts, Insights and Opinions of Stephan H. Wissel. Topics included: IBM Lotus Notes and Domino, IBM Websphere, other IBM Lotus stuff,  J2EE, .Net, Software Archtecture, Personcentric Development, Agile Software, SDLC, Singapore and my Twins</description>
	<language>en,de</language>
	<copyright>(C) 2003 - 2018 Stephan H. Wissel, All rights reserved</copyright>
	<pubdate>Wed, 31 Oct 2018 09:56:46 +0000</pubdate>
<item>
	<title>My software stack</title>
	<description>&lt;p&gt;From time to time the question pops up: &lt;a href="/blog/imprint.html"&gt;what's your software stack&lt;/a&gt;? I use cloud based tools like &lt;a href="https://www.lucidchart.com"&gt;LucidChart&lt;/a&gt;, &lt;a href="https://github.com/stwissel"&gt;GitHub&lt;/a&gt;, &lt;a href="https://bitbucket.org"&gt;Bitbucket&lt;/a&gt; and various other SDLC related tools (subject to a future post), but still quite a number of locally installed tools.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#the-essentials" id="the-essentials"&gt;The essentials&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Tools I use on, more or less, daily basis:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://nodejs.org/en/"&gt;NodeJS&lt;/a&gt; (unsurprisingly)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://developer.salesforce.com/tools/sfdxcli"&gt;Salesforce CLI&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://devcenter.heroku.com/articles/heroku-cli"&gt;Heroku CLI&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://code.visualstudio.com/"&gt;Visual Studio Code&lt;/a&gt; with a few plugins:&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=salesforce.salesforcedx-vscode"&gt;SFDX Plugin&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=mohanChinnappan.apex-pmd-code-scanner"&gt;PMD Plugin&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=maty.vscode-mocha-sidebar"&gt;Mocha Sidebar&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=Orta.vscode-jest"&gt;Jest plugin&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens"&gt;Git Lens&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode"&gt;Prettier&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=MS-vsliveshare.vsliveshare"&gt;Live Share&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.git-tower.com/mac"&gt;Tower GIT Gui&lt;/a&gt; (and of course GIT command line) - or &lt;a href="https://www.sourcetreeapp.com/"&gt;SourceTree&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.openssl.org/"&gt;OpenSSL&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://eclipse.org"&gt;Eclipse&lt;/a&gt; - for Java development. Never warmed up to other Java IDEs (I tried)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://sourcegear.com/diffmerge/"&gt;DiffMerge tool&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;a current &lt;a href="https://www.java.com"&gt;JVM&lt;/a&gt; and &lt;a href="https://openjdk.java.net/"&gt;JDK&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://welkinsuite.com/"&gt;The Welkin Suite&lt;/a&gt; - for Salesforce development&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://getpostman.com"&gt;Postman&lt;/a&gt; - the Swiss Army Knife for REST&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://pencil.evolus.vn/"&gt;Pencil&lt;/a&gt; and &lt;a href="https://balsamiq.com/download/"&gt;Balsamiq&lt;/a&gt; for wire frames (The former when I need to share the raw file, the later when my counterpart has Balsamiq or images are sufficient)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.sublimetext.com/"&gt;Sublime&lt;/a&gt; - Editor super fast&lt;/li&gt; 
&lt;/ul&gt;</description>
	<link>2018/10/my-software-stack.html</link>
	<author>Stephan H. Wissel</author>
	<guid>a301ce70-dceb-11e8-995b-7547664f920f</guid>
	<pubDate>31 October 2018</pubDate>

</item>
<item>
	<title>Creating a Lightning Service</title>
	<description>&lt;p&gt;When you develop in &lt;a href="https://developer.salesforce.com/docs/component-library/overview/components"&gt;Lightning&lt;/a&gt; your client side architecture can benefit as much as the server from a &lt;a href="https://trailhead.salesforce.com/en/content/learn/modules/apex_patterns_sl/apex_patterns_sl_soc"&gt;separation of concerns&lt;/a&gt;. The component library is testimony to that.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#out-of-the-box-services" id="out-of-the-box-services"&gt;Out of the box services&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;The &lt;a href="https://trailhead.salesforce.com/en/content/learn/modules/apex_patterns_sl/apex_patterns_sl_soc"&gt;Component Library&lt;/a&gt; features a growing number of services:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://developer.salesforce.com/docs/atlas.en-us.lightning.meta/lightning/data_service.htm"&gt;Lightning Data Service&lt;/a&gt;, the workhorse of creating, loading and saving Salesforce records. One specialty: it doesn't have its own component, but surfaces through &lt;a href="https://developer.salesforce.com/docs/component-library/bundle/force:recordData/documentation"&gt;force:RecordData&lt;/a&gt;, &lt;a href="https://developer.salesforce.com/docs/component-library/bundle/lightning:recordEditForm/example"&gt;lightning:recordEditForm&lt;/a&gt;, &lt;a href="https://developer.salesforce.com/docs/component-library/bundle/lightning:recordViewForm/documentation"&gt;lightning:recordViewForm&lt;/a&gt; and &lt;a href="https://developer.salesforce.com/docs/component-library/bundle/lightning:recordForm"&gt;lightning:recordForm&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://developer.salesforce.com/docs/component-library/bundle/lightning:overlayLibrary/documentation"&gt;Overlay Library&lt;/a&gt; to show modals and popovers&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://developer.salesforce.com/docs/component-library/bundle/lightning:notificationsLibrary/specification"&gt;Notification Library&lt;/a&gt; to show notices and toasts&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://developer.salesforce.com/docs/component-library/bundle/lightning:omniToolkitAPI/documentation"&gt;Omni Toolkit API&lt;/a&gt; for accessing OmniChannel capabilities&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://developer.salesforce.com/docs/component-library/bundle/lightning:navigationItemAPI"&gt;Navigation Item API&lt;/a&gt; to move around in lightning&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://developer.salesforce.com/docs/component-library/bundle/lightning:conversationToolkitAPI/documentation"&gt;Conversation Toolkit API&lt;/a&gt; to interact with chat&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://developer.salesforce.com/docs/component-library/bundle/lightning:quickActionAPI"&gt;Quick Action API&lt;/a&gt; accessing quick actions&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://developer.salesforce.com/docs/component-library/bundle/lightning:workspaceAPI/documentation"&gt;Workspace API&lt;/a&gt; to access console app tabs and subtabs&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://developer.salesforce.com/docs/component-library/bundle/lightning:utilityBarAPI/documentation"&gt;Utility Bar API&lt;/a&gt; to access the utility bar&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://developer.salesforce.com/docs/component-library/bundle/lightning:empApi/documentation"&gt;Emp API&lt;/a&gt; to subscribe to streaming events&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;a href="#building-your-own" id="building-your-own"&gt;Building your own&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;There is more than one way to skin you cat. You can do:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Lightning Style&lt;/strong&gt;&lt;br&gt;&lt;a href="https://developer.salesforce.com/blogs/author/pozil"&gt;Philippe Ozil&lt;/a&gt; described &lt;a href="https://developer.salesforce.com/blogs/2018/08/implement-and-use-lightning-service-components.html"&gt;in detail&lt;/a&gt; how to use and create your own services ?lightning style'. You should check out his &lt;a href="https://github.com/pozil/server-action-service"&gt;Server Side Actions Service&lt;/a&gt; that allows you cut down on boiler plate code substantially&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;JavaScript Style&lt;/strong&gt;&lt;br&gt;Establish a global service extending the Window object&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;ES6 Style&lt;/strong&gt;&lt;br&gt;Import a JavaScript module. This would need to setup Babel - not too practical for now&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;a href="#extending-the-window-object" id="extending-the-window-object"&gt;Extending the window object&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;When you extend the window object, which is the browser's top level object, the service becomes available ?standalone?, like &lt;code&gt;alert()&lt;/code&gt; (which is actually &lt;code&gt;window.alert()&lt;/code&gt;). A service could look like this:&lt;/p&gt; 
&lt;pre class="brush: javascript"&gt;window.demoLib = ( function() {
	let someMethod = () =&amp;gt; {
		return 'Something'
	}

	let helloMethod = (paul) =&amp;gt; {
		return `Hello ${paul}`;
	}

	return {someMethod, helloMethod};
}());
&lt;/pre&gt; 
&lt;p&gt;This will now provide you with &lt;code&gt;demoLib.someMethod()&lt;/code&gt; returning &lt;em&gt;Something&lt;/em&gt; and &lt;code&gt;demoLib.helloMethod('World')&lt;/code&gt; returning ?&lt;em&gt;Hello World&lt;/em&gt;?. The final step to enable such a library is to add &lt;a href="https://developer.salesforce.com/docs/component-library/bundle/ltng:require"&gt;ltng:require&lt;/a&gt; to your components: &lt;code&gt;&amp;lt;ltng:require scripts="{!Resource.demoLib} afterScriptLoaded="someMethodIfRequired" /&amp;gt;&lt;/code&gt; presuming you stored your JS in resources as &lt;code&gt;demoLib.js&lt;/code&gt;. The Aura framework will make sure that the library is loaded once only, regardless how many components define it as dependency.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#what-can-go-wrong" id="what-can-go-wrong"&gt;What can go wrong?&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;There are a few caveats:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;For hard core Apex developers: JavaScript is case sensitive&lt;/li&gt; 
 &lt;li&gt;You need to be clearly communicating service names to other developers in your org. If someone has the idea to name a library the same as yours, things will break. Good practice is to check if your library and function is available: &lt;code&gt;if (window.demoLib &amp;amp;&amp;amp; window.demoLib.someMethod) {...}&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Fat arrow functions &lt;code&gt;() =&amp;gt; {...}&lt;/code&gt; are not supported in &lt;a href="https://www.forbes.com/sites/markgibbs/2011/12/16/internet-explorer-must-die/#3e6184391727"&gt;legacy browsers&lt;/a&gt;, so you need the slightly more verbose &lt;code&gt;function(){...}&lt;/code&gt; (beware the &lt;code&gt;this&lt;/code&gt; keyword behaves different then).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;As usual YMMV&lt;/p&gt;</description>
	<link>2018/10/creating-a-lightning-service.html</link>
	<author>Stephan H. Wissel</author>
	<guid>cb5a98f0-d365-11e8-842d-7def18d9bfb5</guid>
	<pubDate>19 October 2018</pubDate>

</item>
<item>
	<title>Structuring a Proof of Concept</title>
	<description>&lt;p&gt;A common practise in IT, as run up to a sale or a project is to proof that the intention of the undertaking can be fulfilled.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#the-challenge" id="the-challenge"&gt;The challenge&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;A PoC needs to strike a challenge between effort and coverage. A final proof of a project is its completion, so the temptation lures to try to proof everything. On the flip side: if they core functionalities aren't covered the proof has little value.&lt;/p&gt; 
&lt;p&gt;The second challenge is to define concise successs criteria. Quite often, especially for standard product PoC, it is left to ?how users like it' - which isn't a really qantifiable result.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#use-cases" id="use-cases"&gt;Use cases&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;A workable approach is to define use cases, that cover a typical scenario, like ?&lt;em&gt;Sale of an ice cream&lt;/em&gt;'. This scenario needs to be broken down into business steps until a step can be looked at: ?&lt;em&gt;did work / did not work&lt;/em&gt;'.&lt;br&gt; The breakdown needs to be business level, business language. So ?&lt;em&gt;Can click on customer info&lt;/em&gt;' should rather read ?&lt;em&gt;Customer info is retrievable&lt;/em&gt;'.&lt;/p&gt; 
&lt;p&gt;Use cases and steps are hierarchical, typically 2-3 levels are sufficient for most PoC. Deeper levels are a smell that you are looking at a pilot or full fledged project, not a PoC.&lt;/p&gt; 
&lt;p&gt;So, in a nutshell: A PoC line item needs to have a binary answer. If a binary answer isn't possible break the line item into smaller units. Stick to the domain specific language (usually: the business steps)&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#measurements" id="measurements"&gt;Measurements&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;When a use case line item has a binary outcome (works / doesn't work), the &lt;a href="https://www.brainyquote.com/quotes/h_l_mencken_129796"&gt;simplest measure&lt;/a&gt; is to check if everything worked to declare the PoC a success. Usually doesn't help.&lt;/p&gt; 
&lt;p&gt;The next level is to define a pass percentage. Like 70% of 200 line items must pass. Again &lt;a href="https://quoteinvestigator.com/2011/05/13/einstein-simple/"&gt;a simple solution&lt;/a&gt;. Challenge there: nice to have and essential features have equal weight. You could end with an outcome that has all &lt;em&gt;nice-to-have&lt;/em&gt; features, but might miss essentials.&lt;/p&gt; 
&lt;p&gt;So the next level is to define weights for each items, including a &lt;em&gt;showstopper&lt;/em&gt; flag for must-have features. Weighting discussions are popular battle grounds for feuding fractions, since the weight determines outcomes, especially for concurrent PoC execution.&lt;/p&gt; 
&lt;p&gt;Another weakness of this approach: works/doesn't work as binary value doesn't cover: ?&lt;em&gt;Does it work well?&lt;/em&gt;'. Like ?Is a pair of sneakers suitable to get from Boston to New York?' The binary answer: &lt;em&gt;Yes you can walk, but the real answer: use a car, train, bus or plane.&lt;/em&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#balanced-scorecard-to-the-rescue" id="balanced-scorecard-to-the-rescue"&gt;Balanced Scorecard to the rescue&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Looking at the definition of &lt;a href="https://www.userfocus.co.uk/resources/iso9241/intro.html"&gt;Usability&lt;/a&gt;, one can find 3 criteria:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Does it work?&lt;/li&gt; 
 &lt;li&gt;Is it efficient?&lt;/li&gt; 
 &lt;li&gt;Is the user pleased?&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;I would treat the first column as a binary value and the later two as scales from 1-5. This allows to generate a balanced score card that reflects important aspects of a proof. Depending on the nature of the system, you could add additional columns like ?&lt;em&gt;failure resistance, error recovery, risk&lt;/em&gt;'.&lt;/p&gt; 
&lt;p&gt;While it doesn't relieve you from the weight bickering, it provides a clearer picture of actual outcomes.&lt;/p&gt; 
&lt;p&gt;As usual: YMMV&lt;/p&gt;</description>
	<link>2018/10/structure-a-poc.html</link>
	<author>Stephan H. Wissel</author>
	<guid>97766ef889461d533745cd7d2838c5d1</guid>
	<pubDate>04 October 2018</pubDate>

</item>
<item>
	<title>Adding Labels to Lightning Datatable</title>
	<description>&lt;p&gt;In &lt;a href="/blog/2018/08/lightning-datatables-and-relationship-queries.html"&gt;Part 1&lt;/a&gt; I described a way to make any SOQL result fit for use in a Datatable. The next step is to provide column labels. While it would be easy to just hardcode them, &lt;a href="https://www.linkedin.com/in/abhishek-mohanty-56904914b/"&gt;Abhishek&lt;/a&gt; suggested to use the original field names. The beauty of that approach: The admin can adjust and/or translate field labels without touching the code.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#going-meta" id="going-meta"&gt;Going Meta&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;APEX has a rich API that allow querying an object's properties in the &lt;a href="https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_namespace_Schema.htm"&gt;Schema&lt;/a&gt; name space. Getting the information for a collection of objects can be done using &lt;code&gt;Schema.describeSObjects(sObjectTypes)&lt;/code&gt; or &lt;code&gt;Schema.getGlobalDescribe()&lt;/code&gt; (see &lt;a href="https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_methods_system_schema.htm"&gt;details here&lt;/a&gt;).&lt;/p&gt; 
&lt;p&gt;The interesting challenge is to find the object names of the relationships, the default field list will only tell you the name you gave it, but not the object you relate to. So some more code is required (see below).&lt;/p&gt; 
&lt;p&gt;Relationship fields can be identified by the part before the &lt;code&gt;.&lt;/code&gt; either ending in &lt;code&gt;__r&lt;/code&gt; or &lt;code&gt;id&lt;/code&gt;. So we break a query apart and extract a &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt; for the field name and a &lt;code&gt;String&lt;/code&gt; for the start object name. Our scenario doesn't cater to subqueries. These two parameters get fed into a utility function.&lt;/p&gt; 
&lt;pre class="brush: java"&gt;public without sharing class AuraLabelHelper {
    
    private static Map&amp;lt;String, Schema.SObjectType&amp;gt; globalDescribe = Schema.getGlobalDescribe();
    
    public static Map&amp;lt;String, String&amp;gt; retrieveFieldLablesFromFieldList(List&amp;lt;String&amp;gt; fieldList, String objName) {
        Map&amp;lt;String, String&amp;gt; result = new Map&amp;lt;String, String&amp;gt; ();
        Map&amp;lt;String, Schema.SObjectField&amp;gt; fieldDefinitions = internalFieldLablesFromFieldList(fieldList, objName, '');
        for (String key : fieldDefinitions.keySet()) {
            DescribeFieldResult dfr = fieldDefinitions.get(key).getDescribe();
            result.put(key, dfr.getLabel());
        }
        return result;
    }
    
    
    private static Map&amp;lt;String, Schema.SObjectField&amp;gt; internalFieldLablesFromFieldList(List&amp;lt;String&amp;gt; fieldList, String objName, String prefix) {
        Map&amp;lt;String, Schema.SObjectField&amp;gt; result = new Map&amp;lt;String, Schema.SObjectField&amp;gt; ();
        Schema.SObjectType objectType = AuraLabelHelper.globalDescribe.get(objName);
        Schema.DescribeSObjectResult describeResult = objectType.getDescribe();
        // Labels for the top level object - needs to be lowercased  
        Map&amp;lt;String, Schema.SObjectField&amp;gt; fieldMap = describeResult.fields.getMap();
        Map&amp;lt;String, Schema.SObjectField&amp;gt; fieldMapLower = new Map&amp;lt;String, Schema.SObjectField&amp;gt; ();
        
        for (String key : fieldMap.keySet()) {
            fieldMapLower.put(key.toLowerCase(), fieldMap.get(key));
        }
        
        for (String fieldName : fieldList) {
            String fieldNameLower = fieldName.toLowerCase();
            if (fieldMapLower.containsKey(fieldNameLower)) {
                result.put(prefix + fieldNameLower, fieldMapLower.get(fieldNameLower));
            } else if (fieldNameLower.contains('__r.')) {
                // We have a potential relationship field at hand
                String relationFieldName = fieldNameLower.left(fieldNameLower.indexOf('__r.')) + '__c';
                Schema.DescribeFieldResult relationDescribe = fieldMapLower.get(relationFieldName).getDescribe();
                Schema.SObjectType reference = relationDescribe.getReferenceTo().get(0);
                String objApiName = reference.getDescribe().getName();
                List&amp;lt;String&amp;gt; subFieldList = new List&amp;lt;String&amp;gt; ();
                String newPrefix = prefix + fieldNameLower.left(fieldNameLower.indexOf('.'))+'_';
                subFieldList.add(fieldNameLower.substring(fieldNameLower.indexOf('__r.') + 4));
                result.putAll(internalFieldLablesFromFieldList(subFieldList, objApiName, newPrefix));
            }
        }
        
        return result;
    }
}
&lt;/pre&gt; 
&lt;p&gt;Good boys and girls create a test class:&lt;/p&gt; 
&lt;pre class="brush: java"&gt;@IsTest
public class AuraLabelHelperTest {

    @IsTest
    public static void simpleAccountTest() {
        List&amp;lt;String&amp;gt; fieldNames = new List&amp;lt;String&amp;gt; ();
        fieldNames.add('Id');
        fieldNames.add('Name');
        fieldNames.add('Customer__c');
        fieldNames.add('Customer__r.Name');

        Map&amp;lt;String, String&amp;gt; result = AuraLabelHelper.retrieveFieldLablesFromFieldList(fieldNames, 'Address__c');
        System.debug(result);
        System.assert(result.containsKey('id'));
        System.assert(result.containsKey('customer__r_name'));

    }

}
&lt;/pre&gt; 
&lt;p&gt;Next stop is putting it all together. As usual YMMV.&lt;/p&gt;</description>
	<link>2018/08/adding-labels-to-lightning-datatable.html</link>
	<author>Stephan H. Wissel</author>
	<guid>2e2c0090-ac10-11e8-8c5f-317c3a183f75</guid>
	<pubDate>31 August 2018</pubDate>

</item>
<item>
	<title>Lightning Datatable and Relationship Queries</title>
	<description>&lt;p&gt;The &lt;a href="https://developer.salesforce.com/docs/component-library/bundle/lightning:datatable/example"&gt;Lightning Datatable&lt;/a&gt; is a flexible component to show data in a sortable, actionable table. Formatting is automatic provided by the &lt;a href="https://www.lightningdesignsystem.com/"&gt;Lightning Design System&lt;/a&gt;. Data gets provided as &lt;a href="http://json.org/"&gt;JSON array&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#the-challenge" id="the-challenge"&gt;The challenge&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;A prime use case for a data table is to show results returned via &lt;code&gt;@AuraEnabled&lt;/code&gt; from a &lt;a href="https://developer.salesforce.com/docs/atlas.en-us.soql_sosl.meta/soql_sosl/"&gt;SOQL&lt;/a&gt; query. Ideally relationship identity fields should turn into links and data from relationship queries (something like &lt;code&gt;MyCustomObj__r.Color&lt;/code&gt;) should be usable in the table as well.&lt;/p&gt; 
&lt;p&gt;The tricky part: Relationship fields are returned (IMHO properly) as JSON objects. Datatable can't deal with object values for their columns. A returned value might look like this (deliberately using a generic example):&lt;/p&gt; 
&lt;pre class="brush: javascript"&gt;[{
  Id: 'payloadid',
  Color__: 'Blue',
  Stuff__r: {
    Id: 'ToyId',
    Name: 'Teddy',
    Price__c: 34.5,
    Shape__r: {
      Size__c: 'XL',
      Geometry__c: 'round'
    }
  },
  Dance__c: 'Tango'
}];
&lt;/pre&gt;</description>
	<link>2018/08/lightning-datatables-and-relationship-queries.html</link>
	<author>Stephan H. Wissel</author>
	<guid>3ae1b010-ab51-11e8-aadd-ef9c25093d46</guid>
	<pubDate>29 August 2018</pubDate>

</item>
<item>
	<title>Designing Lightning Components for Reuse</title>
	<description>&lt;p&gt;This is a living document about a common sense approach to developing reusable Lightning components. It might change over time.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#salesforce-documentation" id="salesforce-documentation"&gt;Salesforce documentation&lt;/a&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://developer.salesforce.com/docs/atlas.en-us.lightning.meta/lightning/intro_framework.htm"&gt;Lightning Developer Guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://developer.salesforce.com/docs/component-library/overview/components"&gt;Lightning Component Library&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;As well as the instance specific component library&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#principles" id="principles"&gt;Principles&lt;/a&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Components shall serve a single purpose, designed for reusability&lt;/li&gt; 
 &lt;li&gt;Components shall use the most feasible least code approach&lt;/li&gt; 
 &lt;li&gt;Components shall not contain country specific logic in the front-end&lt;/li&gt; 
 &lt;li&gt;Components shall be documented and tested&lt;/li&gt; 
 &lt;li&gt;Components shall use composition over inheritance. Inheritance is NOT forbidden, use it wisely&lt;/li&gt; 
 &lt;li&gt;Components shall observe case sensitivity even for non case sensitive item (e.g. field names)&lt;/li&gt; 
 &lt;li&gt;Components shall prefer component markup over html markup (e.g. &lt;code&gt;lightning:card&lt;/code&gt; over &lt;code&gt;div class="slds-..."&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Components shall use component navigation (if navigation is needed)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;a href="#naming" id="naming"&gt;Naming&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Related files and components need to be named so they appear close to each other. E.g. a component ?VehicleInfoList? that depends on inner components. Those would also start with ?VehicleInfo? e.g. ?VehicleInfoCard? ?VehicleInfoLineItem?, ?VehicleInfoInterested? etc.&lt;br&gt; Files should be named like this:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;SalesProcess.cmp&lt;/li&gt; 
 &lt;li&gt;SalesProcessController.js&lt;/li&gt; 
 &lt;li&gt;SalesProcessHelper.js&lt;/li&gt; 
 &lt;li&gt;SalesProcess[WhatEvent].evt&lt;/li&gt; 
 &lt;li&gt;SalesProcess.SVG&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;a href="#interfaces" id="interfaces"&gt;Interfaces&lt;/a&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;A component shall only implement the interfaces that it actually uses.&lt;/li&gt; 
 &lt;li&gt;A component that relies on a current record, shall not use ?availableForAllPageTypes? and must implement ?hasRecordId? and the attribute ?recordId?.&lt;/li&gt; 
 &lt;li&gt;Components that are not used on a page layout, but rather inside other components shall not implement interfaces (?availableFor??) that make them appear in the page editor&lt;/li&gt; 
 &lt;li&gt;Components shall only implement the interfaces they actually use. Avoid interfaces the component ?might use in future?&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;a href="#data-access" id="data-access"&gt;Data access&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Components shall use the ?least code? principles for data access. To be checked in this sequence:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Does the component need data access or can the attributes of it provide all the input it requires?&lt;/li&gt; 
 &lt;li&gt;Can lightning:recordForm be used?&lt;/li&gt; 
 &lt;li&gt;Can lightning:recordEditForm and lightning:recordReadForm be used?&lt;/li&gt; 
 &lt;li&gt;Can force:recordData be used?&lt;/li&gt; 
 &lt;li&gt;Is a custom @AuraEnabled method in the controller needed for data provision?&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;This doesn't preclude fetching Meta data or configuration. Ensure to use storable actions where feasible. More principles:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Use data change handlers where appropriate&lt;/li&gt; 
 &lt;li&gt;Use component events&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;a href="#code-principles" id="code-principles"&gt;Code principles&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;This section probably will expand over time&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Code needs to be readable&lt;/li&gt; 
 &lt;li&gt;The controllers (both client and server side) shall be light modules that marshall actual work to helper classes and helper functions&lt;/li&gt; 
 &lt;li&gt;In Apex helper classes shall be instantiated using factory classes - this allows intoducing country specific behavior&lt;/li&gt; 
 &lt;li&gt;All Apex helper classes shall be based on Interfaces&lt;/li&gt; 
 &lt;li&gt;Methods and functions shall be single purpose and not exceed a page size. Break them down (makes them more testable anyway) if to big&lt;/li&gt; 
 &lt;li&gt;Don't copy/paste&lt;/li&gt; 
 &lt;li&gt;Run PMD (free download) on all Apex (eventually on JavaScript too)&lt;/li&gt; 
 &lt;li&gt;Operations that can fail need to be handled with try/catch or its equivalent&lt;/li&gt; 
 &lt;li&gt;Use @ApexDoc and @JSDoc style comments&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;a href="#testing" id="testing"&gt;Testing&lt;/a&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;All components need test code: both for Apex (natural) and the client side component.&lt;/li&gt; 
 &lt;li&gt;A component is incomplete without a ?Lightning testing service? test.&lt;/li&gt; 
 &lt;li&gt;Use assertions generously!&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;a href="#documentation" id="documentation"&gt;Documentation&lt;/a&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Lightning components have a description&lt;/li&gt; 
 &lt;li&gt;Each lightning component comes with a documentation section - don't waste time documenting them outside Salesforce.&lt;/li&gt; 
 &lt;li&gt;Use the documentation to briefly explain what it does (no Pulitzer price for this writing!).&lt;/li&gt; 
 &lt;li&gt;Include at least one example in the documentation&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;a href="#parameter" id="parameter"&gt;Parameter&lt;/a&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Components that can be dragged onto a page can benefit from having parameters the page maintainer can use to configure the component, thus increasing reusability and limit the number of components that need to show up in the palette.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://developer.salesforce.com/docs/atlas.en-us.lightning.meta/lightning/components_config_for_app_builder_design_files.htm"&gt;Parameter documentation&lt;/a&gt; - Check the documentation for details.&lt;/li&gt; 
 &lt;li&gt;If a component is usable only for a specific object page, add that to the Design Resource.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;As usual YMMV&lt;/p&gt;</description>
	<link>2018/07/designing-lightning-components-for-reuse.html</link>
	<author>Stephan H. Wissel</author>
	<guid>f8870080-9084-11e8-9829-0f2fefca6bce</guid>
	<pubDate>26 July 2018</pubDate>

</item>
<item>
	<title>Postman and the Salesforce REST API</title>
	<description>&lt;p&gt;The Salesforce API is a great way to access Salesforce data and can be used with tools like &lt;a href="http://www.pocketsoap.com/osx/soqlx/"&gt;SoqlXplore&lt;/a&gt; or the &lt;a href="https://workbench.developerforce.com/"&gt;Salesforce Workbench&lt;/a&gt;. The API uses OAuth and a Bearer Authentication, so some steps are required to make that work in Postman&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#prepare-salesforce" id="prepare-salesforce"&gt;Prepare Salesforce&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;You will need a &lt;a href="https://help.salesforce.com/articleView?id=connected_app_overview.htm&amp;amp;type=5"&gt;connected APP&lt;/a&gt;. I usually create one that is pre-approved for my user profile(s), so I don't need to bother with the approval steps in Postman. However you could opt for self-approval and access the app once to approve its use, before you continue with the command line. Note down the &lt;code&gt;ClientId&lt;/code&gt; and &lt;code&gt;ClientSecret&lt;/code&gt; values.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#prepare-postman" id="prepare-postman"&gt;Prepare Postman&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Postman has great build in support for &lt;a href="https://www.getpostman.com/docs/v6/postman/sending_api_requests/authorization"&gt;all sorts of authorization&lt;/a&gt; interactively. However my goal here is to fully automate it, so you can run a &lt;a href="http://blog.getpostman.com/2014/03/07/writing-automated-tests-for-apis-using-postman/"&gt;test suite&lt;/a&gt; without manual intervention. First stop is the creation of one environment. You can have multiple environments to cater to different Salesforce instances.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt; Never ever ever store the environment into version control. It would contain credentials -&amp;gt; &lt;strong&gt;bad bad&lt;/strong&gt; idea!&lt;/p&gt; 
&lt;p&gt;My environment variables look like this:&lt;/p&gt; 
&lt;pre class="brush: javascript"&gt;{
	"CLIENT_ID" : "the ClientId from Salesforce",
	"CLIENT_SECRET" : "The ClientSecret from Salesforce",
    "USER_ID" : "some@email.com",
    "PASSWORD" : "DontTell",
    "LOGIN_URL" : "https://login.salesforce.com/"
}
&lt;/pre&gt; 
&lt;p&gt;Providing the Login URL allows to reuse postman collections between Sandboxes, Developer Orgs or Production Orgs without the need to actually edit the postman entries. Next on the menu: getting a token&lt;/p&gt;</description>
	<link>2018/07/postman-and-the-salesforce-rest-api.html</link>
	<author>Stephan H. Wissel</author>
	<guid>c92b6b70-8038-11e8-a388-63a342b09cf1</guid>
	<pubDate>06 July 2018</pubDate>

</item>
<item>
	<title>Mime is where Legacy Systems go to die</title>
	<description>&lt;p&gt;Your new system went live. Migration of current, active data went well. A decision was made not to move historic data and keep the old system around in ?read-only? mode, just in case some information needs to be looked up. Over time your zoo of legacy systems grows. I'll outline a way to put them to rest.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#the-challenges" id="the-challenges"&gt;The challenges&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;All recent systems (that's younger than 30 years) data is stored more or less normalized. A business document, like a contract, is split over multiple tables like customer, address, header, line items, item details, product etc.&lt;/p&gt; 
&lt;p&gt;Dumping this data as is (&lt;a href="https://en.wikipedia.org/wiki/Comma-separated_values"&gt;csv&lt;/a&gt; rules supreme here) only creates a &lt;a href="https://www.geotab.com/blog/big-data-graveyard/"&gt;data graveyard&lt;/a&gt; instead of the much coveted &lt;a href="https://en.wikipedia.org/wiki/Data_lake"&gt;data lake&lt;/a&gt; or &lt;a href="https://en.wikipedia.org/wiki/Data_warehouse"&gt;data warehouse&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The issue gets aggravated by the prevalence of &lt;a href="https://en.wikipedia.org/wiki/Magic_number_(programming)"&gt;magic numbers&lt;/a&gt; and abbreviations that are only resolved inside the legacy system. So looking at one piece of data tells you squid. Only an &lt;a href="https://en.wikipedia.org/wiki/Old_Hands"&gt;old hand&lt;/a&gt; would be able to make sense of &lt;code&gt;Status 82&lt;/code&gt; or &lt;code&gt;Flags x7D3z&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Access to meaningful information is confined to the user interface of the legacy application. It provides search and assembly of business relevant context&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#the-solution-approach" id="the-solution-approach"&gt;The solution approach&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Solving this puzzle requires a three step approach:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;denormalize&lt;/li&gt; 
 &lt;li&gt;transform&lt;/li&gt; 
 &lt;li&gt;make accessible&lt;/li&gt; 
&lt;/ul&gt;</description>
	<link>2018/06/mime-is-where-legacy-systems-go-to-die.html</link>
	<author>Stephan H. Wissel</author>
	<guid>3c2f6850-7383-11e8-b9df-3334377ac3ef</guid>
	<pubDate>22 June 2018</pubDate>

</item>
<item>
	<title>Adventures in TDD</title>
	<description>&lt;p&gt;There are two challenges getting into &lt;a href="https://en.wikipedia.org/wiki/Test-driven_development"&gt;TDD&lt;/a&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Why should I test upfront when I know it fails (there's this &lt;strong&gt;massive&lt;/strong&gt; aversion of failure in my part of the world)?&lt;/li&gt; 
 &lt;li&gt;Setting up the whole thing.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;I made peace with the first requirement using a very large monitor and a split screen, writing code and test on parallel, deviating from the ?pure teachings' for the comfort of my workflow.&lt;/p&gt; 
&lt;p&gt;The second part is trickier, There are so many moving parts. This post documents some of the insights.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#testing-in-the-ide" id="testing-in-the-ide"&gt;Testing in the IDE&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;a href="http://agiledata.org/essays/tdd.html"&gt;TDD&lt;/a&gt; has the idea that you create your test first and only write code until your test passes. Then you write another failing test and start over writing code.&lt;/p&gt; 
&lt;p&gt;As a consequence you need to test in your &lt;a href="https://en.wikipedia.org/wiki/Integrated_development_environment"&gt;IDE&lt;/a&gt;. For JavaScript or Java that's easy (the languages I use most):&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;In JavaScript you define a script &lt;code&gt;test&lt;/code&gt; in your &lt;a href="https://docs.npmjs.com/misc/scripts"&gt;package.json&lt;/a&gt; you can run any time. For a &lt;a href="https://dictionary.cambridge.org/dictionary/english/connoisseur"&gt;connoisseur&lt;/a&gt; there are tools like &lt;a href="https://wallabyjs.com/"&gt;WallabyJS&lt;/a&gt; or &lt;a href="https://marketplace.visualstudio.com/items?itemName=maty.vscode-mocha-sidebar"&gt;VSCode Mocha Sidebar&lt;/a&gt; that run your tests as you type and/or save. The tricky part is: what testing libraries (more on that below) to use?&lt;/li&gt; 
 &lt;li&gt;In Java &lt;a href="https://maven.apache.org/"&gt;Maven&lt;/a&gt; has a default goal &lt;code&gt;validate&lt;/code&gt; and &lt;a href="https://junit.org/"&gt;junit&lt;/a&gt; is the gold standard for tests. For automated continuous IDE testing there is &lt;a href="http://infinitest.github.io/"&gt;Infinitest&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;For Salesforce you have a combination of JavaScript and Apex (and clicks-not-code), testing is a little trickier. The commercials IDE &lt;a href="https://welkinsuite.com/"&gt;TheWelkingSuite&lt;/a&gt; and &lt;a href="https://plugins.jetbrains.com/plugin/7831-illuminated-cloud"&gt;Illuminated Cloud&lt;/a&gt; make that a lot easier. How easy is in they eye of the beholder. (Honorable mention: &lt;a href="https://jetforcer.com/"&gt;JetForcer&lt;/a&gt; - I simply haven't tested that one yet)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;a href="#testing-in-your-continuous-integration" id="testing-in-your-continuous-integration"&gt;Testing in your Continuous Integration&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Automated testing, after a commit to &lt;a href="https://github.com"&gt;Github&lt;/a&gt;, &lt;a href="https://gitlab.com"&gt;GitLab&lt;/a&gt; or &lt;a href="https://bitbucket.org"&gt;BitBucket&lt;/a&gt; happens once you configure a pipeline as a hook into the repository and have tests specified the pipeline can pick up. Luckily your maven and npm scripts will most likely work as a starting point.&lt;/p&gt; 
&lt;p&gt;The bigger challenge is the orchestration of various services like static testing, dependency management and reporting (and good luck if your infra guys claim, they could setup and run everything inhouse).&lt;/p&gt; 
&lt;p&gt;Some of the selections available:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Repository 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com"&gt;Github&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://gitlab.com"&gt;GitLab&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://bitbucket.org"&gt;BitBucket&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Pipelines 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://www.heroku.com/flow"&gt;Heroku Flow&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://bitbucket.org"&gt;BitBucket&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://travis-ci.org/"&gt;Travis&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://www.cloudbees.com/"&gt;Jenkins&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://www.codeship.io/"&gt;CodeShip&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://circleci.com/"&gt;CircleCI&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;and &lt;a href="https://github.com/ligurio/awesome-ci"&gt;more of them&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Testing and Reporting service 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://codeclimate.com/"&gt;CodeClimate&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://saucelabs.com/"&gt;SauceLab&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://codacy.com/"&gt;Codacy&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://coveralls.io/"&gt;Coveralls&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://snyk.io"&gt;Snyk&lt;/a&gt; (for vulnerabilities)&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://greenkeeper.io"&gt;GreenKeeper&lt;/a&gt; (for dependency management)&lt;/li&gt; 
   &lt;li&gt;and &lt;a href="https://google.com/search?q=cloud+based+testing+service"&gt;many more&lt;/a&gt;&lt;br&gt; some run extra tests, some report on tests that ran in your pipeline&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt;</description>
	<link>2018/06/adventures-in-tdd.html</link>
	<author>Stephan H. Wissel</author>
	<guid>7e579790-6c60-11e8-b1dc-1329f863fc15</guid>
	<pubDate>10 June 2018</pubDate>

</item>
<item>
	<title>What really happens in OAuth</title>
	<description>&lt;p&gt;OAuth in its various versions is the gold standard for Authorization (and using&lt;a href="http://openid.net/connect/"&gt;OpenID Connect&lt;/a&gt; for Authentication as well). There are &lt;a href="https://www.digitalocean.com/community/tutorials/an-introduction-to-oauth-2"&gt;plenty&lt;/a&gt; &lt;a href="http://openid.net/specs/oauth-v2-form-post-response-mode-1_0.html"&gt;of&lt;/a&gt; &lt;a href="https://medium.com/@technospace/an-introduction-to-oauth-2-0-4c71b5fb19ff"&gt;introductions&lt;/a&gt; &lt;a href="https://www.slideshare.net/aaronpk/an-introduction-to-oauth2"&gt;around&lt;/a&gt; &lt;a href="https://www.slideshare.net/aaronpk/an-introduction-to-oauth2"&gt;explaining&lt;/a&gt; &lt;a href="https://aaronparecki.com/oauth-2-simplified/"&gt;OAuth&lt;/a&gt;. My favorite HTTP tool &lt;a href="https://www.getpostman.com/"&gt;Postman&lt;/a&gt; makes it really simple to obtain access via OAuth.&lt;/p&gt; 
&lt;p&gt;Nevertheless all those explanations are quite high level, so I wondered what happens on the wire for the getToken part so I started digging. This is what I found. &lt;em&gt;Nota bene&lt;/em&gt;: There is no inherit security in OAuth if you don't use &lt;strong&gt;https&lt;/strong&gt;.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#the-components" id="the-components"&gt;The components&lt;/a&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Authorization server: server to interact with to get an authorization&lt;/li&gt; 
 &lt;li&gt;Client identifier (ClientID): ?userid? of the application&lt;/li&gt; 
 &lt;li&gt;Client Secret: ?password? of the application&lt;/li&gt; 
 &lt;li&gt;A user&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;I'm not looking at the Resource Server here - it only comes into play before or after the actual token process.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#the-form-post-flow" id="the-form-post-flow"&gt;The Form-Post Flow&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;There are &lt;a href="https://auth0.com/docs/api-auth/which-oauth-flow-to-use"&gt;several flows&lt;/a&gt; available to pick from. I'm looking at the Form-Post flow where user credentials are passed to the authentication server to obtain access and refresh tokens.&lt;/p&gt; 
&lt;p&gt;For this flow we need to post a HTTP form to the authorization server. The post has 2 parts: Header and body. A request looks like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;POST /yourOAuthEndPoint HTTP/1.1
Host: authserver.acme.com
Accept-Encoding: gzip, deflate
Accept: *.*
Authorization: Basic Y2xpZW50aWQ6Y2xpZW50c2VjcmV0
Content-Type: application/x-www-form-urlencoded
Cache-Control: no-cache

grant_type=password
  &amp;amp;username=user%40email.com
  &amp;amp;password=password
  &amp;amp;scope=openid+email+profile
  &amp;amp;client_id=clientid
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Some remarks:&lt;br&gt; - The &lt;code&gt;Authorization&lt;/code&gt; header is just as &lt;a href="https://www.base64encode.org/"&gt;Base64&lt;/a&gt;version of &lt;code&gt;clientid:clientsecret&lt;/code&gt; - you have t replace it with your actual info&lt;br&gt; - Content-Type must be &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt;&lt;br&gt; - The body is just one line with no spaces, I split it only for readability&lt;br&gt; - scope is a encoded list the + signs are actually spaces. Keeping that in mind you want to keep the server side scope names simple&lt;br&gt; - You need to repeat the clientid as header value&lt;/p&gt; 
&lt;p&gt;As a result you get back a JSON structure with authorization information. It can look like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;{
    "access_token": "wildStringForAccess",
    "refresh_token": "wildStringForRefreshingAccess",
    "token_type": "Bearer",
    "expires_in": 300
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The result is easy to understand:&lt;br&gt; - &lt;code&gt;expires_in&lt;/code&gt;: Duration for the access token in seconds&lt;br&gt; - &lt;code&gt;token_type&lt;/code&gt;: &lt;code&gt;Bearer&lt;/code&gt; denotes that you call your resource server with a header value of &lt;code&gt;Authorization: Bearer wildStringForAccess&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;As usual YMMV&lt;/p&gt;</description>
	<link>2018/06/what-really-happens-in-oauth.html</link>
	<author>Stephan H. Wissel</author>
	<guid>78e56b10-67b6-11e8-9406-054f86671783</guid>
	<pubDate>04 June 2018</pubDate>

</item>

</channel>
</rss>
