<?xml version="1.0"?>
<rss version="2.0">
<channel>
	<title>wissel.net Usability - Productivity - Business - The web - Singapore and Twins</title>
	<link>https://wissel.net/blog/stories.rss</link>
	<description>Thoughts, Insights and Opinions of Stephan H. Wissel. Topics included: IBM Lotus Notes and Domino, IBM Websphere, other IBM Lotus stuff,  J2EE, .Net, Software Archtecture, Personcentric Development, Agile Software, SDLC, Singapore and my Twins</description>
	<language>en,de</language>
	<copyright>(C) 2003 - 2018 Stephan H. Wissel, All rights reserved</copyright>
	<pubdate>Mon, 04 Jun 2018 06:28:27 +0000</pubdate>
<item>
	<title>What really happens in OAuth</title>
	<description>&lt;p&gt;OAuth in its various versions is the gold standard for Authorization (and using&lt;a href="http://openid.net/connect/"&gt;OpenID Connect&lt;/a&gt; for Authentication as well). There are &lt;a href="https://www.digitalocean.com/community/tutorials/an-introduction-to-oauth-2"&gt;plenty&lt;/a&gt; &lt;a href="http://openid.net/specs/oauth-v2-form-post-response-mode-1_0.html"&gt;of&lt;/a&gt; &lt;a href="https://medium.com/@technospace/an-introduction-to-oauth-2-0-4c71b5fb19ff"&gt;introductions&lt;/a&gt; &lt;a href="https://www.slideshare.net/aaronpk/an-introduction-to-oauth2"&gt;around&lt;/a&gt; &lt;a href="https://www.slideshare.net/aaronpk/an-introduction-to-oauth2"&gt;explaining&lt;/a&gt; &lt;a href="https://aaronparecki.com/oauth-2-simplified/"&gt;OAuth&lt;/a&gt;. My favorite HTTP tool &lt;a href="https://www.getpostman.com/"&gt;Postman&lt;/a&gt; makes it really simple to obtain access via OAuth.&lt;/p&gt; 
&lt;p&gt;Nevertheless all those explanations are quite high level, so I wondered what happens on the wire for the getToken part so I started digging. This is what I found. &lt;em&gt;Nota bene&lt;/em&gt;: There is no inherit security in OAuth if you don't use &lt;strong&gt;https&lt;/strong&gt;.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#the-components" id="the-components"&gt;The components&lt;/a&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Authorization server: server to interact with to get an authorization&lt;/li&gt; 
 &lt;li&gt;Client identifier (ClientID): ?userid? of the application&lt;/li&gt; 
 &lt;li&gt;Client Secret: ?password? of the application&lt;/li&gt; 
 &lt;li&gt;A user&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;I'm not looking at the Resource Server here - it only comes into play before or after the actual token process.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#the-form-post-flow" id="the-form-post-flow"&gt;The Form-Post Flow&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;There are &lt;a href="https://auth0.com/docs/api-auth/which-oauth-flow-to-use"&gt;several flows&lt;/a&gt; available to pick from. I'm looking at the Form-Post flow where user credentials are passed to the authentication server to obtain access and refresh tokens.&lt;/p&gt; 
&lt;p&gt;For this flow we need to post a HTTP form to the authorization server. The post has 2 parts: Header and body. A request looks like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;POST /yourOAuthEndPoint HTTP/1.1
Host: authserver.acme.com
Accept-Encoding: gzip, deflate
Accept: *.*
Authorization: Basic Y2xpZW50aWQ6Y2xpZW50c2VjcmV0
Content-Type: application/x-www-form-urlencoded
Cache-Control: no-cache

grant_type=password
  &amp;amp;username=user%40email.com
  &amp;amp;password=password
  &amp;amp;scope=openid+email+profile
  &amp;amp;client_id=clientid
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Some remarks:&lt;br&gt; - The &lt;code&gt;Authorization&lt;/code&gt; header is just as &lt;a href="https://www.base64encode.org/"&gt;Base64&lt;/a&gt;version of &lt;code&gt;clientid:clientsecret&lt;/code&gt; - you have t replace it with your actual info&lt;br&gt; - Content-Type must be &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt;&lt;br&gt; - The body is just one line with no spaces, I split it only for readability&lt;br&gt; - scope is a encoded list the + signs are actually spaces. Keeping that in mind you want to keep the server side scope names simple&lt;br&gt; - You need to repeat the clientid as header value&lt;/p&gt; 
&lt;p&gt;As a result you get back a JSON structure with authorization information. It can look like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;{
    "access_token": "wildStringForAccess",
    "refresh_token": "wildStringForRefreshingAccess",
    "token_type": "Bearer",
    "expires_in": 300
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The result is easy to understand:&lt;br&gt; - &lt;code&gt;expires_in&lt;/code&gt;: Duration for the access token in seconds&lt;br&gt; - &lt;code&gt;token_type&lt;/code&gt;: &lt;code&gt;Bearer&lt;/code&gt; denotes that you call your resource server with a header value of &lt;code&gt;Authorization: Bearer wildStringForAccess&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;As usual YMMV&lt;/p&gt;</description>
	<link>2018/06/what-really-happens-in-oauth.html</link>
	<author>Stephan H. Wissel</author>
	<guid>78e56b10-67b6-11e8-9406-054f86671783</guid>
	<pubDate>2018-06-04 03:16</pubDate>

</item>
<item>
	<title>Reuse a 3rd Party Json Web Token (JWT) for Salesforce authentication</title>
	<description>&lt;h3&gt;&lt;a href="#the-scenario" id="the-scenario"&gt;The scenario&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;You run an app, could be a mobile native, a &lt;a href="https://en.wikipedia.org/wiki/Single-page_application"&gt;SPA&lt;/a&gt;, a &lt;a href="https://en.wikipedia.org/wiki/Progressive_Web_Apps"&gt;PWA&lt;/a&gt; or just an application with JavaScript logic, in your domain that needs to incorporate data from your Salesforce instance or one of your Salesforce communities.&lt;/p&gt; 
&lt;p&gt;Users have authenticated with your website and the app is using a &lt;a href="https://www.jsonwebtoken.io/"&gt;JWT&lt;/a&gt; Bearer Token to establish identity. You don't want to bother users with an additional authentication.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#what-you-need" id="what-you-need"&gt;What you need&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Salesforce has &lt;a href="https://help.salesforce.com/articleView?id=remoteaccess_oauth_jwt_flow.htm&amp;amp;type=5"&gt;very specific&lt;/a&gt; requirements how a JWT must be formed to qualify for authentication. For example the token can be valid only for 5 minutes. It is very unlikely that your token matches the requirements.&lt;/p&gt; 
&lt;p&gt;Therefore you will need to extract the user identity from existing token, while checking that it isn't spoofed and create a new token that you present to Salesforce to obtain the session token. So you need:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;The key that can be used to verify the existing token. This could be a simple String, used for symmetrical signature or an X509 Public Key&lt;/li&gt; 
 &lt;li&gt;A private key for Salesforce to sign a new JWT (See below)&lt;/li&gt; 
 &lt;li&gt;A configured &lt;a href="https://help.salesforce.com/articleView?id=connected_app_overview.htm&amp;amp;type=5"&gt;Connected App&lt;/a&gt; in Salesforce where you upload they full certificate and obtain the Consumer Key&lt;/li&gt; 
 &lt;li&gt;Some place to run the code, like &lt;a href="https://wwww.heroku.com/"&gt;Heroku&lt;/a&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;img src="/blog/images/2018/jwtFlow.png" alt="Authentication Flow for 3rd party JWT"&gt;&lt;/p&gt;</description>
	<link>2018/05/reuse-a-3rd-party-jwt.html</link>
	<author>Stephan H. Wissel</author>
	<guid>7c4b8140-4ecf-11e8-80e2-bfca30024cb4</guid>
	<pubDate>2018-05-03 10:42</pubDate>

</item>
<item>
	<title>Function length and double byte languages</title>
	<description>&lt;p&gt;Complexity is a prime enemy of maintainability. &lt;a href="https://softwareengineering.stackexchange.com/questions/133404/what-is-the-ideal-length-of-a-method-for-you"&gt;So the conventional wisdom&lt;/a&gt; suggests methods should be around 20 lines, with some evidence suggesting up to 100+ lines.&lt;/p&gt; 
&lt;p&gt;When I review code written by non-native English speakers, especially when their primary language is double byte based, I find methods in the 500-1000 lines range, with some special champions up to 5000 lines. So I wondered what might contribute to these function/method worms.&lt;/p&gt;</description>
	<link>2018/04/function-length-and-double-byte-languages.html</link>
	<author>Stephan H. Wissel</author>
	<guid>5c6fd510-3b9c-11e8-90bb-13b34de998f8</guid>
	<pubDate>2018-04-09 10:18</pubDate>

</item>
<item>
	<title>Creative logging with $A.log()</title>
	<description>&lt;p&gt;In Lightning applications there are two ways to log: &lt;code&gt;console.log(..)&lt;/code&gt; and &lt;code&gt;$A.log(...)&lt;/code&gt;. This has led to some confusion what to use.&lt;/p&gt; 
&lt;p&gt;The official statement: &lt;code&gt;$A.log()&lt;/code&gt; will eventually go away, use &lt;code&gt;console.log()&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;This is a real pity, since &lt;code&gt;$A.log()&lt;/code&gt; is quite powerful and closer to what a developer would expect from logging. One reason for its demise: in a production setting &lt;code&gt;$A.log()&lt;/code&gt; would output - nothing. There's no official documentation how to change that and the &lt;code&gt;$A.logger.subscribe(...)&lt;/code&gt; method is neither documented nor guaranteed, only &lt;a href="https://salesforce.stackexchange.com/questions/86322/how-to-use-aura-log-and-where-does-it-print-it-output"&gt;mentioned on Stack Exchange&lt;/a&gt;. So?&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#enjoy-it-while-it-lasts" id="enjoy-it-while-it-lasts"&gt;Enjoy it while it lasts&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;The simple case to activate console output in production is to add a helper function that can be triggered by a button or whatever you find necessary:&lt;/p&gt; 
&lt;pre class="brush: javascript"&gt;$A.logger.subscribe( "INFO", function( level, message, error ) {
                                console.log( message );
                                console.log( error );
                             });
&lt;/pre&gt; 
&lt;p&gt;Instead of sending output to the console, which could confuse users seeing all that ?tech' stuff, you could redirect it into a custom component (the following snippet fits into an onInit script):&lt;/p&gt; 
&lt;pre class="brush: javascript"&gt;var target = component.find("loggerlist").getElement();
$A.logger.subscribe( "INFO", function( level, message, error ) {
                               target.innerHTML += "&amp;lt;li&amp;gt;"+message+"&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;"+error+"&amp;lt;/li&amp;gt;";
                             });
&lt;/pre&gt; 
&lt;p&gt;The target element would be &lt;code&gt;&amp;lt;ol auraid="loggerlist"&amp;gt;&lt;/code&gt; so you get a running list.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#across-the-network" id="across-the-network"&gt;Across the network&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;One is not limited to staying on the same machine. With a few lines of code logging can happen on a remote location as well. The following shows logging using websockets. For a production run (e.g. permanent instrumentation) I would make it a little more robust, like keeping the connection open and check if it is still there or send JSON, but for the occasional support this is good enough:&lt;/p&gt; 
&lt;pre class="brush: javascript"&gt;$A.logger.subscribe( "INFO", function( level, message, error ) {
    var wsEndPoint = 'wss://somewebsocket.url/ws/log';
    var connection = new WebSocket(wsEndPoint);
     connection.onopen = function(event) {
        connection.send(message);
        connection.send(error);
        connection.close();
    };
});

&lt;/pre&gt; 
&lt;p&gt;I'll show a potential receiving end implementation in a future post.&lt;br&gt; As I said: enjoy it while it lasts, it might go away soon. YMMV&lt;/p&gt;</description>
	<link>2018/04/lightning-creative-logging.html</link>
	<author>Stephan H. Wissel</author>
	<guid>b1ad71c0-36fd-11e8-8924-2159462a0d7c</guid>
	<pubDate>2018-04-03 02:50</pubDate>

</item>
<item>
	<title>Salesforce one year on</title>
	<description>&lt;p&gt;A year ago I said &lt;a href="2017/04/goodbye-ibm-hello-salesforce.html"&gt;Good by IBM, Hello Salesforce&lt;/a&gt;. A lot has happened in the last 12 month. Salesforce is only my second salaried job, I've been running my own companies and been freelance before.&lt;/p&gt; 
&lt;p&gt;Coming from IBM, where &lt;em&gt;Resource Actions&lt;/em&gt; had efficiently killed employee engagement, Salesforce's Ohana culture was a refreshing different. It makes such a difference to work with people who are genuinely interested in your success, without exception. In summary:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;I became a &lt;a href="https://trailhead.salesforce.com/en/me/stwissel"&gt;Trailblazer Ranger&lt;/a&gt;, completing 30 trails, 206 badges and collecting 169625 points&lt;/li&gt; 
 &lt;li&gt;Passed five Salesforce certifications&lt;/li&gt; 
 &lt;li&gt;Contributed to customer success in Singapore, Australia and Korea&lt;/li&gt; 
 &lt;li&gt;Wrote 25 blog entries (Way to little, more are coming)&lt;/li&gt; 
 &lt;li&gt;Moved my blog from Domino to git (more on that below)&lt;/li&gt; 
 &lt;li&gt;Contributed to OpenSource on github: 
  &lt;ul&gt; 
   &lt;li&gt;Maintainer for &lt;a href="https://github.com/Stwissel/node-red-contrib-salesforce"&gt;node-red-contrib-salesforce&lt;/a&gt;. The nodes that connect &lt;a href="https://nodered.org"&gt;NodeRED&lt;/a&gt; to Salesforce, including the support for platform events&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/Stwissel/Excel2XML"&gt;Excel2XML&lt;/a&gt;: Tool that converts XLSX tables into XML, so data can be extracted in command line applications. Main purpose is to make Excel data accessible in build pipelines (e.g. sample values for tests)&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/Stwissel/SpringCanvasSample"&gt;Spring Boot and Salesforce Canvas&lt;/a&gt;: Sample application that turns a Canvas POST into a JWT authentication, so classic multi pages applications can be integrated into Salesforce Canvas&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/Stwissel/SampleProxy"&gt;Vert.x proxy&lt;/a&gt; Filtering proxy implemented in &lt;a href="https://vertx.io"&gt;Apache vert.x&lt;/a&gt;. It allows to front a web application and filter HTML, JSON etc. based on content and URL&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/Stwissel/vertx-sfdc-platformevents"&gt;SFDC Platform Events&lt;/a&gt;: Modules for &lt;a href="https://vertx.io"&gt;Apache vert.x&lt;/a&gt; to connect to Salesforce. It includes authentication and processing of platform events. This allows for high performance multi-threaded interaction with Salesforce APIs, not limited to platform events&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/Stwissel/blog-comments-public"&gt;Blog Comments&lt;/a&gt; Tool that accepts a JSON formated comment structure and creates a Bitbucket file, a commit and a pull request. Allows for a database free comment engine&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/Stwissel/blogengine"&gt;BlogEngine&lt;/a&gt;: The application that powers this blog. It generates static files when commits/merges happen to my master branch on Bitbucket&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;What a ride, onto year two!&lt;/p&gt;</description>
	<link>2018/04/salesforce-one-year-on.html</link>
	<author>Stephan H. Wissel</author>
	<guid>39d80750-3568-11e8-876d-71d5cc4499a1</guid>
	<pubDate>2018-04-01 12:50</pubDate>

</item>
<item>
	<title>Boolean to get major overhaul</title>
	<description>&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/George_Boole"&gt;George Boole&lt;/a&gt; didn't seem to understand his five teenage daughters, (he didn't have sons, so this is about teenagers, not daughters) otherwise his boolean logic would encompass not only &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt;, but also &lt;code&gt;maybe&lt;/code&gt; or &lt;code&gt;don't know&lt;/code&gt;. Luckily that omission will be addressed now.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#boolean-to-merge-with-ternary" id="boolean-to-merge-with-ternary"&gt;Boolean to merge with Ternary&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Quick recap&lt;/strong&gt;: a boolean value has the values &lt;code&gt;true&lt;/code&gt; (usually 1), &lt;code&gt;false&lt;/code&gt; (usually 0). Ternary has 3 states, typically denoted -1, 0, 1. Not to confuse ternary with QBits which are true and false at the same time.&lt;/p&gt; 
&lt;p&gt;To reflect the real world, where nothing is certain, and cater to teenage level developers, the ternary and boolean data types will be merged into a new type: &lt;strong&gt;RealBoolean&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;Proposals are under way to incorporate RealBoolean into all major programming languages ASAP. RealBoolean will have the values &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;undecided&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt;. While it is up to the programming languages how these values are represented, consensus is, that the most likely candidates are -1, 0 and 1.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#new-hardware" id="new-hardware"&gt;New hardware&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Like specialized mining hardware for Crypto, RealBoolean will benefit from purpose build ternary computers. &lt;a href="https://en.wikipedia.org/wiki/Setun"&gt;Early models&lt;/a&gt; had been running since 1958. Ternary computing also has arrived in &lt;a href="https://hackaday.com/2016/12/16/building-the-first-ternary-microprocessor/"&gt;micro processor architectures&lt;/a&gt;. Of course there are &lt;a href="https://www.techopedia.com/why-not-ternary-computers/2/32427"&gt;doubters&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#transition-period" id="transition-period"&gt;Transition period&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Having multiple data types to express the truth might fit the political desire for &lt;em&gt;alternate facts&lt;/em&gt;, but is an unsustainable confusion in programming. Therefore the classic boolean values will become illegal April 01, 2042.&lt;br&gt; In the transition period classic booleans will be &lt;a href="https://en.wikipedia.org/wiki/Duck_typing"&gt;ducktyped&lt;/a&gt; into RealBoolean whenever the values &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; or &lt;code&gt;1&lt;/code&gt; are used. For boolean &lt;code&gt;0&lt;/code&gt; or &lt;code&gt;-1&lt;/code&gt; (as some unfortunate languages use) compilers and runtimes are mandated to issue a &lt;strong&gt;warning&lt;/strong&gt; for the first 5 years, thereafter a &lt;strong&gt;stern warning&lt;/strong&gt; before they finally become illegal&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#enforcement" id="enforcement"&gt;Enforcement&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;All version control repositories will be scanned (the NSA does that anyway) and offending code flagged with new issues. Binary code, not compiled from a repository, will be treated as virus, blocked and deleted. After the deadline all remaining offending code will be transpiled into COBOL - good luck with finding developers to make sense of that code thereafter&lt;/p&gt;</description>
	<link>2018/04/boolean-to-get-major-overhaul.html</link>
	<author>Stephan H. Wissel</author>
	<guid>2efe5190-3568-11e8-9f7b-dd4d46818a1f</guid>
	<pubDate>2018-04-01 12:50</pubDate>

</item>
<item>
	<title>Authenticate from Salesforce to Heroku with JWT</title>
	<description>&lt;p&gt;&lt;a href="https://heroku.com"&gt;Heroku&lt;/a&gt; PAAS is an easy and flexible way to extend Salesforce functionality.&lt;br&gt; Its easy to call out to a Heroku REST service build with a method of your choice: Java, JavaScript, Ruby etc.&lt;br&gt; The usual sticky point between two platforms is the &lt;strong&gt;identity of the caller&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;In a lot of cases the only requirement is ?a valid Salesforce user?, eventually with some additional claims added.&lt;br&gt; For this scenario a &lt;a href="https://jwt.io/"&gt;JWT&lt;/a&gt; Bearer authentication (&lt;a href="https://tools.ietf.org/html/rfc7519"&gt;RFC 7519&lt;/a&gt;) is a good pick.&lt;/p&gt; 
&lt;p&gt;When you look around, most examples revolve around a JWT token being issued after some means of authentication from the same system that was authenticated against.&lt;br&gt; This scenario is different: The Salesforce server issues the JWT token and code on Heroku validates the token as authorization.&lt;br&gt; The beauty of the approach: &lt;strong&gt;no extra calls&lt;/strong&gt; need to be made to get this working.&lt;/p&gt; 
&lt;p&gt;What you will need:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;A valid certificate, in this case self signed is good enough (it won't be used by a browser)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://openssl.org"&gt;OpenSSL&lt;/a&gt; installed on your computer&lt;/li&gt; 
 &lt;li&gt;A Heroku account&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;a href="#preparing-the-certificate" id="preparing-the-certificate"&gt;Preparing the certificate&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;In Salesforce setup open &lt;a href="https://help.salesforce.com/articleView?id=security_keys_about.htm&amp;amp;type=5"&gt;Certificate and Key management&lt;/a&gt;.&lt;br&gt; Create or pick a key. Note down the name. For this article I will use &lt;em&gt;YourCertNameHere&lt;/em&gt;. Open the key and click on &lt;em&gt;Download Certificate&lt;/em&gt;.&lt;br&gt; The cert will be downloaded in crt format. We use this file to extract the &lt;strong&gt;public&lt;/strong&gt; key that Heroku will use to verify the signature. To get the key use:&lt;/p&gt; 
&lt;pre class="brush: bash"&gt;openssl x509 -pubkey -noout -in YourCertNameHere.crt
&lt;/pre&gt; 
&lt;p&gt;The String we need is between the BEGIN and END lines, excluding the lines. You can store it into a file or create a Heroku environment variable.&lt;br&gt; Since it is a public key, you don't need to guard it as fiercly as your private keys.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#the-apex-code" id="the-apex-code"&gt;The APEX code&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Before making a call-out to Heroku, you need to componse the signed JWT token. That's done in just a few lines:&lt;/p&gt; 
&lt;pre class="brush: java"&gt;public static String getJWTBearer(String subject, String keyName) {
    Auth.JWT jwt = new Auth.JWT();
    jwt.setSub(subject);
    Auth.JWS myJws = new Auth.JWS(jwt, keyName);
    return myJws.getCompactSerialization();
}
&lt;/pre&gt; 
&lt;p&gt;You might opt to add additional claims beside the subject, when your use case does require that.&lt;br&gt; The header value gets added to the &lt;code&gt;Authorization&lt;/code&gt; header as &lt;code&gt;Bearer&lt;/code&gt; authorization.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#java-code" id="java-code"&gt;Java code&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;I'm using the &lt;a href="https://github.com/jwtk/jjwt"&gt;jjwt&lt;/a&gt; library which is available on &lt;a href="https://search.maven.org/#artifactdetails%7Cio.jsonwebtoken%7Cjjwt%7C0.9.0%7Cjar"&gt;Maven Central&lt;/a&gt;.&lt;br&gt; It makes it simple to retrieve a claim. An expired claim or an invalid signature will throw an error, so wrap it into a try/catch.&lt;/p&gt; 
&lt;pre class="brush: java"&gt;import java.security.Key;
import java.security.KeyFactory;
import java.security.spec.X509EncodedKeySpec;
import java.util.Base64;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;

public class JwtVerifier {
	public static Claims getClaims(String key, String token) throws Exception {

		byte[] byteKey = Base64.getMimeDecoder().decode(key);
		X509EncodedKeySpec X509publicKey = new X509EncodedKeySpec(byteKey);
		KeyFactory kf = KeyFactory.getInstance("RSA");
		Key realKey = kf.generatePublic(X509publicKey);
		return Jwts.parser().setSigningKey(realKey).parseClaimsJws(token).getBody();
	}
}
&lt;/pre&gt; 
&lt;p&gt;The only catch in the code was the need for &lt;code&gt;MimeDecoder&lt;/code&gt; instead of a standard &lt;code&gt;Decoder&lt;/code&gt; for Base64 decoding.&lt;br&gt; The subject, typically the user, can be retrieved using &lt;code&gt;claims.getSubject()&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Next stop, for another blog entry: the NodeJS equivalent.&lt;/p&gt; 
&lt;p&gt;As usual YMMV!&lt;/p&gt;</description>
	<link>2018/03/salesforce-heroku-jwt.html</link>
	<author>Stephan H. Wissel</author>
	<guid>cafb442a-6edb-4a5a-8414-1427353e25df</guid>
	<pubDate>2018-03-23 04:40</pubDate>

</item>
<item>
	<title>Using LetsEncrypt certificates in your JKS</title>
	<description>&lt;p&gt;Dealing with certificates in Java is always fun. The keystore Java uses is different from the certificate files you are used to in your web server or node.js.&lt;/p&gt; 
&lt;p&gt;Salesforce is build on Java, so we have to make peace with the Keystore. This article outlines the steps to use a LetsEncrypt certificate in a keystore. You will need:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Internet connection&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://openssl.org"&gt;OpenSSL&lt;/a&gt; installed&lt;/li&gt; 
 &lt;li&gt;Able to run the &lt;a href="https://letsencrypt.org/how-it-works/"&gt;LetsEncrypt challenge&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Access to your DNS to add a record (for the challenge)&lt;/li&gt; 
 &lt;li&gt;Java runtime installed&lt;/li&gt; 
 &lt;li&gt;Public IP address&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For this sample I will use the Domain ???demo.example.com???&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#obtaining-a-pem-certficate-from-letsencrypt" id="obtaining-a-pem-certficate-from-letsencrypt"&gt;Obtaining a PEM certficate from LetsEncrypt&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Easiest is to use the certbot utility on a Linux machine (e.g. spin up an instance on Heroku). DigitalOcean has &lt;a href="https://www.digitalocean.com/community/tutorials/how-to-use-certbot-standalone-mode-to-retrieve-let-s-encrypt-ssl-certificates"&gt;detailed instructions&lt;/a&gt;.&lt;br&gt; There used to be a tls-sni challenge which was marked insecure, so you want to the DNS challenge.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;sudo certbot certonly --manual --preferred-challenges dns -d demo.example.com&lt;/code&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#convert-pem-to-pkcs12-format" id="convert-pem-to-pkcs12-format"&gt;Convert PEM to PKCS12 format&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;First concatenate all PEM files into one. Presuming you used the Letsencrypt mechanism:&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;sudo cat /etc/letsencrypt/life/demo.example.com/*.pem &amp;gt; fullcert.pem&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Then use OpenSSL to convert that into PKCS12 format. Note: if you do that on a Windows command prompt you must &lt;em&gt;run the command prompt as administrator&lt;/em&gt; otherwise you just get an error&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;openssl pkcs12 -export -out fullchain.pkcs12 -in fullchain.pem&lt;/code&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#prepare-a-java-jsk-keystore" id="prepare-a-java-jsk-keystore"&gt;Prepare a Java JSK keystore&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;You can't just create an empty keystore, so create a new temp key and specify a new keystore, then delete that key. That gives you the &lt;a href="https://docs.oracle.com/cd/E35976_01/server.740/es_admin/src/tadm_ssl_convert_pem_to_jks.html"&gt;empty keystore&lt;/a&gt;:&lt;/p&gt; 
&lt;pre class="brush: bash"&gt;keytool -genkey -keyalg RSA -alias sfdcsec -keystore sfdcsec.ks
keytool -delete -alias sfdcsec -keystore sfdcsec.ks
&lt;/pre&gt; 
&lt;h3&gt;&lt;a href="#import-pkcs12-into-jks" id="import-pkcs12-into-jks"&gt;Import pkcs12 into JKS&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Almost final steps. Don't forget your passwords&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;keytool -v -importkeystore -srckeystore fullchain.pkcs12 -destkeystore sfdcsec.ks -deststoretype JKS&lt;/code&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#adjust-alias-for-salesforce-import" id="adjust-alias-for-salesforce-import"&gt;Adjust alias for Salesforce import&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;The Salesforce import utility is picky about Alias names. The previous import created the entry&lt;br&gt; &lt;code&gt;Alias name: 1&lt;/code&gt; which needs to be updated:&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;keytool -keystore sfdcsec.ks -changealias -alias 1 -destalias demo_example_com&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;And voilah, you have a properly signed certificate for your Salesforce instance. Downside: to be repeated every 90 days.&lt;/p&gt; 
&lt;p&gt;As usual YMMV!&lt;/p&gt;</description>
	<link>2018/03/letsencrypt-java-keystore.html</link>
	<author>Stephan H. Wissel</author>
	<guid>3f404a7d-3883-4a8a-a976-0e84417ff0d7</guid>
	<pubDate>2018-03-22 03:18</pubDate>

</item>
<item>
	<title>A filtering proxy server with vert.x</title>
	<description>&lt;h3&gt;&lt;a href="#scenario" id="scenario"&gt;Scenario&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;You have this nice application running in your (cloud or on premises) environment and then &lt;a href="http://ec.europa.eu/justice/smedataprotect/index_en.htm"&gt;a big scare&lt;/a&gt; hits. Suddenly you need to remove or mask different streams of data depending on all sorts of conditions your legal department is 
 &lt;strike&gt;
  torturing
 &lt;/strike&gt; advising you.&lt;/p&gt; 
&lt;p&gt;Until your applications natively can do that, you might resort to a content filter that sits as a proxy between you and the application (technically it is a &lt;a href="https://en.wikipedia.org/wiki/Reverse_proxy"&gt;reverse proxy&lt;/a&gt;, but that's fine print).&lt;/p&gt; 
&lt;p&gt;To explore the feasibility of such an approach I created &lt;a href="https://stwissel.github.io/SampleProxy/"&gt;SampleProxy&lt;/a&gt; based on work of &lt;a href="https://github.com/vietj/vertx-http-proxy"&gt;Julien Viet&lt;/a&gt; using &lt;a href="http://vertx.io"&gt;vert.x&lt;/a&gt; as my runtime environment.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#requirements" id="requirements"&gt;Requirements&lt;/a&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Needs to be a &lt;strong&gt;content filter&lt;/strong&gt;, not a URL blocker&lt;/li&gt; 
 &lt;li&gt;Need to provide functionality for practical use out-of-the-box, but needs to be extensible (configuration over code)&lt;/li&gt; 
 &lt;li&gt;Need to be able to filter HTML, JSON, XML and Text. No need to filter binary formats. Contemplating about JavaScript (you could use the text filter for that)&lt;/li&gt; 
 &lt;li&gt;Filter based on mime-type and URL as standard, but extensible to use &lt;strong&gt;anything&lt;/strong&gt; in the request or reply to decide what to filter&lt;/li&gt; 
 &lt;li&gt;Configurable FilterChain: a filter decides what to filter (with the mime-type as minimum condition) and hands actual filter operation to a chain of subfilters that do the actual stream manipulation&lt;/li&gt; 
 &lt;li&gt;configurable subfilters. E.g. a filter that can remove JSON nodes from JSON data should read the qualifier from a configuration, so the same filter class can be reused for different filter purposes&lt;/li&gt; 
 &lt;li&gt;CSS isn't on the radar yet, but contributions would be happily accepted&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;a href="#the-flow" id="the-flow"&gt;The flow&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;img src="/blog/images/2018/ProxyDataFlow.png" alt="Flow from browser to proxy to application and back"&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#things-i-learned-along-the-way" id="things-i-learned-along-the-way"&gt;Things I learned along the way&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;There are always a few lessons to be had, here are some from this project:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;http is a chunked beast. When you send larger amount of content, probability approaches 1 that your server uses &lt;a href="https://en.wikipedia.org/wiki/Chunked_transfer_encoding"&gt;chunked&lt;/a&gt; - until HTTP/2 resolves us from it. A hard choice needs to be made to either use a stream based processing of a chunk (think &lt;a href="https://en.wikipedia.org/wiki/Simple_API_for_XML"&gt;SAX&lt;/a&gt;) or collecting the Junks to be able to process a &lt;a href="https://en.wikipedia.org/wiki/Document_Object_Model"&gt;DOM&lt;/a&gt;. To be fully flexible I opted for a DOM/Object based approach, but you are free to create whatever you deem necessary&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://jsoup.org/"&gt;Jsoup&lt;/a&gt; is a reliable HTML parser. It supports &lt;a href="https://www.w3.org/TR/selectors-3/"&gt;CSS selectors&lt;/a&gt; that make addressing HTML elements a breeze. Solves one of the hardest problems: targeting&lt;/li&gt; 
 &lt;li&gt;Targeting JSON data is much harder that it needs to be, the very moment Arrays appear in your JSON structure. There is &lt;a href="https://tools.ietf.org/html/rfc6901"&gt;RFC6901 JSON Pointer&lt;/a&gt;, but it targets exactly one element, while a typical use case would be: ?from the list (array) of discussion posts, pick the list of comments and those who have an eMail, mask them?. So I implemented 2 variations: a simple path style address &lt;code&gt;/discussion/posts/comments/email&lt;/code&gt; which automatically traverses arrays and an &lt;a href="https://gist.github.com/Stwissel/900acc8ed6a46131530ab89bb70b9f9d"&gt;XPath based&lt;/a&gt; approach where I convert JSON to a strict XML syntax and back. More &lt;a href="/blog/2018/02/query-a-json-object-like-xpath.html"&gt;detail here&lt;/a&gt;, examples in a future post&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;a href="#items-on-the-todo-list" id="items-on-the-todo-list"&gt;Items on the ToDo list&lt;/a&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Better documentation&lt;/li&gt; 
 &lt;li&gt;Code cleanup&lt;/li&gt; 
 &lt;li&gt;Tests&lt;/li&gt; 
 &lt;li&gt;Deploy to Heroku button&lt;/li&gt; 
 &lt;li&gt;More filters&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;a href="#your-turn" id="your-turn"&gt;Your turn&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Go &lt;a href="https://stwissel.github.io/SampleProxy/"&gt;check it out&lt;/a&gt; and let me know what you think! (Yeah - documentation needs some work).&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Caveat&lt;/strong&gt; (a.k.a disclaimer): this is a prototype and work in progress, YMMV!&lt;/p&gt;</description>
	<link>2018/03/a-filtering-proxy-server-with-vertx.html</link>
	<author>Stephan H. Wissel</author>
	<guid>17171be0-1879-11e8-8afb-4b4609893bc5</guid>
	<pubDate>2018-03-04 03:18</pubDate>

</item>
<item>
	<title>Query a JSON object like XPath in Java</title>
	<description>&lt;p&gt;I'm fond of &lt;a href="/blog/categories/xml.html"&gt;XML&lt;/a&gt; especially &lt;a href="https://www.w3.org/TR/xslt/"&gt;XSLT&lt;/a&gt; and the related &lt;a href="https://en.wikipedia.org/wiki/XPath"&gt;XPath&lt;/a&gt; query possibilities.&lt;br&gt; Moving into the wonderworld of &lt;a href="http://www.json.org/"&gt;JSON&lt;/a&gt; I'm missing those platform independent query and rendering options.&lt;br&gt; For templating &lt;a href="https://mustache.github.io/"&gt;Mustache&lt;/a&gt; comes close, especially in regards of platform support, but XPath still has to find its match in the JSON world.&lt;/p&gt; 
&lt;p&gt;The closest equivalent is &lt;a href="https://www.npmjs.com/package/jsonpath"&gt;JSONPath&lt;/a&gt; (also available &lt;a href="https://github.com/json-path/JsonPath"&gt;for Java&lt;/a&gt; ) with a nice &lt;a href="http://jsonpath.com/"&gt;interactive playground&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;I was looking at adopting it for one of &lt;a href="https://github.com/Stwissel/SampleProxy"&gt;my projects&lt;/a&gt; written in &lt;a href="https://vertx.io"&gt;vert.x&lt;/a&gt;.&lt;br&gt; JSON isn't native to Java and there are several competing implementations around JSON: &lt;a href="https://github.com/google/gson"&gt;Google's GSON&lt;/a&gt;, &lt;a href="https://github.com/FasterXML/jackson-docs"&gt;Jackson&lt;/a&gt;&lt;br&gt; and &lt;a href="http://vertx.io/docs/apidocs/io/vertx/core/json/JsonObject.html"&gt;vert.x core JsonObject&lt;/a&gt; (there are probably more).&lt;/p&gt; 
&lt;p&gt;So I was wondering: What if I could use XPath and by extension XSLT directly on JSON? The first step there would be a save way to transform JSON to XML and back.&lt;br&gt; Using vert.x &lt;a href="http://vertx.io/docs/apidocs/io/vertx/core/json/JsonObject.html"&gt;JsonObject&lt;/a&gt; and &lt;a href="http://vertx.io/docs/apidocs/io/vertx/core/json/JsonArray.html"&gt;JsonArray&lt;/a&gt; as starting point,&lt;br&gt; I had the following considerations:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;I can't use XML tags to map to JSON labels, since labels can contain any character, XML tags are restricted&lt;/li&gt; 
 &lt;li&gt;The resulting XML only needs 2 elements: Element and Array&lt;/li&gt; 
 &lt;li&gt;An element can have a scalar value, my first test deals with strings only, or can contain another element or array&lt;/li&gt; 
 &lt;li&gt;An array does not have a value. It can contain zero or more scalar values and/or zero or more arrays or elements&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;So I build a small prototype. A simple class that reads a json file from the command line, prints it to the console, transforms it to XML, prints it to the console, transforms it back and prints it again.&lt;br&gt; The prototype depends on vert.x core.&lt;/p&gt; 
&lt;p&gt;The result can be found &lt;a href="https://gist.github.com/Stwissel/900acc8ed6a46131530ab89bb70b9f9d"&gt;in this gist&lt;/a&gt; or &lt;a href="/blog/2018/02/query-a-json-object-like-xpath.html"&gt;read more&lt;/a&gt;.&lt;/p&gt;</description>
	<link>2018/02/query-a-json-object-like-xpath.html</link>
	<author>Stephan H. Wissel</author>
	<guid>26d44c30-1c32-11e8-975d-b5df85697815</guid>
	<pubDate>2018-02-28 03:50</pubDate>

</item>

</channel>
</rss>
