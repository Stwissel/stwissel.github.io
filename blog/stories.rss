<?xml version="1.0"?>
<rss version="2.0">
<channel>
	<title>wissel.net Usability - Productivity - Business - The web - Singapore and Twins</title>
	<link>https://wissel.net/blog/stories.rss</link>
	<description>Thoughts, Insights and Opinions of Stephan H. Wissel. Topics included: Salesforce, Lotus Notes and Domino, IBM Websphere, NodeJS, JavaScript,  J2EE, .Net, Software Archtecture, Personcentric Development, Agile Software, SDLC, Singapore and my Twins</description>
	<language>en,de</language>
	<copyright>(C) 2003 - 2021 Stephan H. Wissel, All rights reserved</copyright>
	<pubdate>Wed, 19 Oct 2022 20:56:25 +0000</pubdate>
<item>
	<title>Test-Driven Development Is a Paradox</title>
	<description>&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Test-driven_development"&gt;TDD&lt;/a&gt; is favored by &lt;a href="https://www.youtube.com/c/ContinuousDelivery"&gt;very&lt;/a&gt; &lt;a href="https://en.wikipedia.org/wiki/Martin_Fowler_(software_engineer)"&gt;succesfull&lt;/a&gt; &lt;a href="https://en.wikipedia.org/wiki/Kent_Beck"&gt;engineers&lt;/a&gt; as a means of accellerating software development by preserving quality.&lt;/p&gt;
&lt;p&gt;Objections &lt;a href="https://stackoverflow.com/questions/64333/disadvantages-of-test-driven-development"&gt;are plenty&lt;/a&gt;. The talk by &lt;a href="https://twitter.com/burkhufnagel"&gt;Burt Hufnagel&lt;/a&gt; tries to address those.&lt;/p&gt;
&lt;h3&gt;The TDD Paradox&lt;/h3&gt;
&lt;p&gt;TDD requires you to write more code, so you can be done sooner. It's like learning to drive a car. Your first mile takes, give or take, 40-50h to complete: Driving lessons, driving tests, get the license issued before you drive. You can walk a lot more in 50 hours, you get the drift...&lt;/p&gt;
&lt;p&gt;Looking deeper at "development" we see, it has multiple components:&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;understanding and clarifying the business requirements (business rather loosely defined)&lt;/li&gt;
 &lt;li&gt;write code&lt;/li&gt;
 &lt;li&gt;manual testing&lt;/li&gt;
 &lt;li&gt;debugging&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;TDD helps with the first and third component. A well defined test communicates the desired outcome and serves as a living specification. Having the machine running tests reduces the need for manual testing and frees up time to work on functionality&lt;/p&gt;
&lt;h3&gt;Test early, test often&lt;/h3&gt;
&lt;p&gt;TDD proposes to write tests first, not as an afterthought. The strongest new argument Burk proposed was: nobody wants to write a test for code freshly debugged and proven working (at that time). There's no immediate value in it. A test, initially failing, written upfront is a reassurance to be on the right track when going green.&lt;/p&gt;
&lt;p&gt;Using the "test first" approach, tests turn into a design process, increasing the confidence in not only doing things right, but also doing the right thing. In other words: &lt;strong&gt;Tests are Specifications&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Best results are to be had when working in small increments and &lt;a href="https://martinfowler.com/bliki/Yagni.html"&gt;resist the urge&lt;/a&gt; to "code for things you think are coming next" instead of "(just) make the test pass".&lt;/p&gt;
&lt;h3&gt;It's not a cure-it-all&lt;/h3&gt;
&lt;p&gt;TDD might not be a good fit:&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;no clear business requirements - you can't test when you don't know what you want&lt;/li&gt;
 &lt;li&gt;exploratory coding - trying stuff out&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A common objection is "we have an existing non-TDD code base, we can't switch to TDD". Burt suggest to use "Defect Driven Development". Write a test that test for defect free behavior and then fix the defect. Your test harness will grow while defects shrink&lt;/p&gt;
&lt;h3&gt;Test long and prosper&lt;/h3&gt;
&lt;p&gt;The usual subjects for testing in Java are &lt;a href="https://junit.org/junit5/"&gt;JUnit&lt;/a&gt; and &lt;a href="https://site.mockito.org/"&gt;Mockito&lt;/a&gt;. Bart introduced another, very promising tool: &lt;a href="https://spockframework.org/"&gt;Spock&lt;/a&gt;. Spock is written in &lt;a href="https://groovy-lang.org/"&gt;Groovy&lt;/a&gt; and allows to specify a test's purpose more expressive and concise than Junit's &lt;code&gt;@DisplayName&lt;/code&gt; property. Luckily it isn't an exclusive-or question, Spock interacts with JUnit and Mockito quite nicely&lt;/p&gt;
&lt;h3&gt;In conclusion&lt;/h3&gt;
&lt;p&gt;Bart made a good case for TDD, backed by experience and tooling, if in doubt &lt;a href="https://github.com/BurkHufnagel/Presentations/blob/master/TDD_is_a_Paradox.pdf"&gt;visit his arguments&lt;/a&gt;.&lt;/p&gt;</description>
	<link>2022/10/tdd-paradox.html</link>
	<author>Stephan H. Wissel</author>
	<guid>c79e5360-4fcf-11ed-8e72-918359ae0736</guid>
	<pubDate>19 October 2022</pubDate>

</item>
<item>
	<title>CI/CD, Github Actions, and GraalVM Native Image</title>
	<description>&lt;p&gt;&lt;a href="https://www.graalvm.org/"&gt;GraalVM&lt;/a&gt; is a promising polyglot runtime for Java, JavaScript, Python, Ruby and &lt;a href="https://webassembly.org/"&gt;WASM&lt;/a&gt;.&lt;br&gt; It can produce native images. Unsurprisingly &lt;em&gt;with great powers come&lt;/em&gt; ... lots of things to learn.&lt;/p&gt;
&lt;h3&gt;GraalVM Native Image Benefits&lt;/h3&gt;
&lt;p&gt;A native image has a number of benefits over an JVM based application, mainly owed to the extensive analysis done at build time.&lt;br&gt; Some of advantages mentioned:&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Runtime speed ~ 25% above the same code running on an JVM&lt;/li&gt;
 &lt;li&gt;Ahead of Time compilation can lead to up to 9 times less memory consumption than running on an JVM&lt;/li&gt;
 &lt;li&gt;Code executes faster with a smaller memory footprint than comparable Go applications ( but still is bigger/slower than C by a whisk)&lt;/li&gt;
 &lt;li&gt;Warmup time got moved to build time, improving startup time&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Building the image&lt;/h3&gt;
&lt;p&gt;Build has been greatly improved with tooling available:&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;a &lt;a href="https://graalvm.github.io/native-build-tools/latest/maven-plugin.html"&gt;Maven plugin&lt;/a&gt; (also available for &lt;a href="https://graalvm.github.io/native-build-tools/latest/gradle-plugin.html"&gt;Gradle&lt;/a&gt;), eliminating the need of extensive commandline foo.&lt;/li&gt;
 &lt;li&gt;a GitHub action to &lt;a href="https://github.com/marketplace/actions/github-action-for-graalvm"&gt;install the GraalVM tooing&lt;/a&gt; in a pipeline&lt;/li&gt;
 &lt;li&gt;reduced memory consumption, so most apps will fit into the GitHub build container limit of 7GB memory&lt;/li&gt;
 &lt;li&gt;option for a non-optimized fast build, useful for testing correctness&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Thoughts and conclusions&lt;/h3&gt;
&lt;p&gt;A big step in the right direction making native images more accessible. There's still room for improvements, like caching the build images and more samples. What Oracle solved nicely: If you are a GraalVM Enterprise customer, accessing GraalVM Enterprise edition is done using an access token, fully compatible to any build system. No messing around with downloads and manual installations required.&lt;/p&gt;</description>
	<link>2022/10/github-actions-graalvm.html</link>
	<author>Stephan H. Wissel</author>
	<guid>8b6bb240-4f37-11ed-bf58-75c7d10c023d</guid>
	<pubDate>18 October 2022</pubDate>

</item>
<item>
	<title>Streamlining Lage-scale Java Development using Error Prone</title>
	<description>&lt;p&gt;It has been a while since I attended an in-person conference. Finally this October I managed to attend &lt;a href="https://www.oracle.com/cloudworld/javaone/"&gt;JavaOne&lt;/a&gt; in Las Vegas. I shall report on interesting sessions.&lt;/p&gt;
&lt;p&gt;The first one is by &lt;a href="https://twitter.com/Sander_Mak"&gt;Sander Mak&lt;/a&gt; on a topic near and dear to me: Code Quality&lt;/p&gt;
&lt;h3&gt;Another tool in the box&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://errorprone.info"&gt;Error Prone&lt;/a&gt;, courtesy of Google, supplements tools like &lt;a href="https://www.sonarqube.org/"&gt;Sonar&lt;/a&gt;, &lt;a href="https://spotbugs.github.io/"&gt;Spotbugs&lt;/a&gt; or &lt;a href="https://checkstyle.sourceforge.io/"&gt;Checkstyle&lt;/a&gt;. Other than these tools it is a compiler plugin with &amp;gt; 500 checks.&lt;/p&gt;
&lt;p&gt;It can be configured to fix a set of identified errors automatically in code, inline or as patch file. Sander used a few simple demos to drive home what is possible using the tooling. Besides the ckecks that are available out-of-the-box one can implement extensions. One &lt;a href="https://github.com/mockito/mockito/tree/main/subprojects/errorprone"&gt;interesting contribution&lt;/a&gt; comes from the popular mocking framework &lt;a href="https://site.mockito.org/"&gt;Mockito&lt;/a&gt;, extending the checks to your use of mocking.&lt;/p&gt;
&lt;p&gt;Extending error-prone is possible using two complementary approaches:&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;writing your own extensions (extending &lt;a href="https://www.javadoc.io/doc/com.google.errorprone/error_prone_check_api/2.0.17/com/google/errorprone/bugpatterns/BugChecker.html"&gt;BugChecker&lt;/a&gt;), dealing with Java's AST and all its power&lt;/li&gt;
 &lt;li&gt;using the included ReFaster templates that allow for powerfull pattern based code upgrades&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Use cases&lt;/h3&gt;
&lt;p&gt;Just a few samples from the session:&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;implement consistency in coding style (not to confuse with &lt;a href="/blog/2021/12/spotless-code-with-a-git-hook.html"&gt;code style&lt;/a&gt;)&lt;/li&gt;
 &lt;li&gt;reduce visible clutter like &lt;code&gt;final&lt;/code&gt; before variables by using &lt;code&gt;@var&lt;/code&gt; to denote mutable variables and consider immutable the default&lt;/li&gt;
 &lt;li&gt;ease the transition to higher JVM versions, e.g replace &lt;code&gt;!Optional.isPresent()&lt;/code&gt; with &lt;code&gt;Optional.isEmpty()&lt;/code&gt; (JDK11)&lt;/li&gt;
 &lt;li&gt;verify logging uses &lt;code&gt;{}&lt;/code&gt; instead of &lt;code&gt;%s&lt;/code&gt;&lt;/li&gt;
 &lt;li&gt;fail builds that violate rules and conventions&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;My impression&lt;/h3&gt;
&lt;p&gt;Error-prone seems to be an important tool in toolbox to produce a well groomed Java code base. I loved Sander's progression from a simple introduction example to the more complex use cases that help his company deliver (pun intended). Error-prone isn't for the faint of heart, but a component that belongs into any code base of size. The session inspired me to improve our Java tooling, well done!&lt;/p&gt;
&lt;p&gt;The Steve pun, one last thing, was the &lt;a href="https://error-prone.picnic.tech"&gt;icing on the cake&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;More content by Sander&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;&lt;a href="https://javamodularity.com/"&gt;Java Modularity&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="https://app.pluralsight.com/profile/author/sander-mak"&gt;Pluralsight courses&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="https://error-prone.picnic.tech"&gt;PicNic OpenSource Error-prone extensions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
	<link>2022/10/java-development-error-prone.html</link>
	<author>Stephan H. Wissel</author>
	<guid>dfa72a30-4f17-11ed-a715-8718e51da0fa</guid>
	<pubDate>18 October 2022</pubDate>

</item>
<item>
	<title>Calling a vert.x async method from a sync method</title>
	<description>&lt;p&gt;Made popular by &lt;a href="https://nodejs.org/en/"&gt;NodeJS&lt;/a&gt; and &lt;a href="http://es6-features.org/#PromiseUsage"&gt;ES6&lt;/a&gt; &lt;a href="https://www.bmc.com/blogs/asynchronous-programming/"&gt;asynchronous programming&lt;/a&gt; promises (pun intended) better throughput and resource usage by entertaining an &lt;a href="https://en.wikipedia.org/wiki/Event_loop"&gt;Event Loop&lt;/a&gt;. In Java land &lt;a href="https://vertx.io"&gt;vert.x&lt;/a&gt; implements exactly this approach and has proven its mettle, being the foundation of &lt;a href="https://quarkus.io"&gt;Quarkus&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Your legacy app doesn't magically convert&lt;/h2&gt;
&lt;p&gt;When you start a new &lt;a href="https://vertx.io"&gt;vert.x&lt;/a&gt; project using the &lt;a href="https://start.vertx.io"&gt;App Generator&lt;/a&gt;, everything is asynchronous from the beginning. Snippets of synchronous code (a.k.a blocking code), you might need to maintain, can be wrapped into &lt;a href="https://vertx.io/docs/vertx-core/java/#blocking_code"&gt;executeBlocking&lt;/a&gt; and handled in their own thread.&lt;/p&gt;
&lt;p&gt;However when you are about to convert a synchronous application, e.g. a &lt;a href="https://en.wikipedia.org/wiki/Jakarta_Servlet"&gt;servlet&lt;/a&gt; to asynchronous and you can't finish in a sprint/session, things become interesting. The &lt;a href="https://docs.oracle.com/javaee/6/api/javax/servlet/http/HttpServlet.html#doGet%28javax.servlet.http.HttpServletRequest,%20javax.servlet.http.HttpServletResponse%29"&gt;&lt;code&gt;doGet&lt;/code&gt; method&lt;/a&gt; is synchronous by nature. There are a few steps that need to be accomplished:&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Have vert.x running in its own thread. You can't start it on the main thread with its blocking operations&lt;/li&gt;
 &lt;li&gt;Have a method that returns a &lt;a href="https://vertx.io/docs/apidocs/io/vertx/core/Future.html"&gt;vert.x Future&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;Convert that into a Java &lt;a href="https://www.baeldung.com/java-completablefuture"&gt;CompletableFuture&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let's have a look at the moving parts:&lt;/p&gt;</description>
	<link>2022/08/calling-a-vertx-async-method-from-a-sync-method.html</link>
	<author>Stephan H. Wissel</author>
	<guid>9871d820-12e2-11ed-a8ff-2955beb6d3bc</guid>
	<pubDate>03 August 2022</pubDate>

</item>
<item>
	<title>Case insensitive deserialization</title>
	<description>&lt;p&gt;Growing up in Windows with &lt;a href="https://en.wikipedia.org/wiki/BASIC"&gt;BASIC&lt;/a&gt; you learn case doesn't matter, so &lt;code&gt;Color&lt;/code&gt; is the same as &lt;code&gt;COLOR&lt;/code&gt; or &lt;code&gt;cOLOR&lt;/code&gt; when it comes to variable names. Same applies to &lt;code&gt;@Formula&lt;/code&gt; or item names in Notes documents.&lt;/p&gt;
&lt;p&gt;On the other side, &lt;a href="https://en.wikipedia.org/wiki/Linux"&gt;Linux&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/Java_(programming_language)"&gt;Java&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/JavaScript"&gt;JavaScript&lt;/a&gt; and &lt;a href="https://www.json.org/json-en.html"&gt;JSON&lt;/a&gt; are very much case sensitive.&lt;/p&gt;
&lt;p&gt;This poses a challenge when deserializing (handcrafted) JSON files.&lt;/p&gt;
&lt;h2&gt;The Task at hand&lt;/h2&gt;
&lt;p&gt;Deserialization of JSON into a Java class instance &lt;a href="https://www.baeldung.com/jackson-deserialization"&gt;can be done&lt;/a&gt; using &lt;a href="https://github.com/FasterXML/jackson"&gt;jackson&lt;/a&gt;. This is also what the &lt;a href="https://vertx.io/docs/apidocs/io/vertx/core/json/JsonObject.html"&gt;JsonObject&lt;/a&gt; in &lt;a href="https://vertx.io"&gt;vert.x&lt;/a&gt; uses when you call &lt;a href="https://vertx.io/docs/apidocs/io/vertx/core/json/JsonObject.html#mapTo-java.lang.Class-"&gt;&lt;code&gt;json.mapTo(SomeClass)&lt;/code&gt;&lt;/a&gt;. Not using vert.x? You can use the &lt;a href="https://www.baeldung.com/jackson-object-mapper-tutorial"&gt;&lt;code&gt;ObjectMapper&lt;/code&gt;&lt;/a&gt;. Let's look at a sample Java class&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-java"&gt;import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import io.vertx.core.json.JsonObject;

@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonIgnoreProperties(ignoreUnknown = true)
public class JsonTest {

  public static fromJson(final JsonObject source) {
    return source.mapTo(JsonTest.class);
  }

  private String color;
  private String shape;
  private int answer;
  private boolean pretty;

  /* GETTERS and SETTERS omitted for brevity
     Let your IDE add them for you */
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you want to deserialize a good JSON, which works as expected:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;{
  "color": "Red",
  "shape": "round",
  "answer": 11,
  "pretty": true
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;but the very moment your JSON isn't following proper capitalization, like human provided JSON,&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;{
  "Color": "Red",
  "Shape": "square",
  "Answer": 42,
  "pretty": true,
  "ignore": "this"
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;deserialization will fail. We need to fix that.&lt;/p&gt;</description>
	<link>2022/06/case-insensitive-deserialization.html</link>
	<author>Stephan H. Wissel</author>
	<guid>77851ba0-e6f9-11ec-8a41-85f9122bc611</guid>
	<pubDate>08 June 2022</pubDate>

</item>
<item>
	<title>Dance the OAuth with me</title>
	<description>&lt;p&gt;&lt;a href="https://www.oauth.com"&gt;OAuth&lt;/a&gt; and its cousin &lt;a href="https://openid.net"&gt;OIDC&lt;/a&gt; are the ubiquitous methods to &lt;a href="https://openid.net/gainpoc/"&gt;gain&lt;/a&gt; identity and authorization information. Since it is a &lt;a href="https://www.lexico.com/en/definition/menage_a_trois"&gt;m?nage ? trois&lt;/a&gt; between a user, an &lt;a href="https://en.wikipedia.org/wiki/Identity_provider"&gt;Identity provider (IdP)&lt;/a&gt; and an application, refered to as "Service provider", it is hard to trouble shoot.&lt;/p&gt;
&lt;h2&gt;A play in five acts&lt;/h2&gt;
&lt;p&gt;In the recent &lt;a href="https://opensource.hcltechsw.com/domino-keep-docs/"&gt;Project KEEP&lt;/a&gt; we build an IdP into the API, so you have the choice of just using Domino or using an external IdP.&lt;/p&gt;
&lt;p&gt;To ensure it works as expected several dependent HTTPS calls were needed. Each call would harvest some information into environment variables for the following step&lt;/p&gt;
&lt;h3&gt;Act 0 - initial setup&lt;/h3&gt;
&lt;p&gt;Store several variables into the environment:&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;&lt;code&gt;UserName&lt;/code&gt;: the user you will simulate to approve&lt;/li&gt;
 &lt;li&gt;&lt;code&gt;Password&lt;/code&gt;: their password&lt;/li&gt;
 &lt;li&gt;&lt;code&gt;HOST&lt;/code&gt;: The starting URL for the first call&lt;/li&gt;
 &lt;li&gt;&lt;code&gt;state&lt;/code&gt;: a random string, need to stay the same through the sequence&lt;/li&gt;
 &lt;li&gt;&lt;code&gt;client_id&lt;/code&gt;: The application configured as service provider&lt;/li&gt;
 &lt;li&gt;&lt;code&gt;client_secret&lt;/code&gt;: The service provider "password"&lt;/li&gt;
 &lt;li&gt;&lt;code&gt;scope&lt;/code&gt;: the scope (or a subset) you have configured for the service provider&lt;/li&gt;
 &lt;li&gt;&lt;code&gt;redirect_uri&lt;/code&gt;: one of the redirection URIs you have configured for the service provider&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;An OAuth flow contains basic authentication calls, so you need to ensure proper &lt;a href="https://en.wikipedia.org/wiki/Transport_Layer_Security"&gt;TLS&lt;/a&gt; connections.&lt;/p&gt;
&lt;p&gt;&lt;img src="/blog/images/2022/OAuthDance.svg" alt="OAuth Dance"&gt;&lt;/p&gt;</description>
	<link>2022/06/dance-the-oauth-with-me.html</link>
	<author>Stephan H. Wissel</author>
	<guid>d4acca20-e579-11ec-b9b8-f1cad397bc73</guid>
	<pubDate>06 June 2022</pubDate>

</item>
<item>
	<title>Yes No Maybe Boolean deserialization with Jackson</title>
	<description>&lt;p&gt;The &lt;a href="https://en.wikipedia.org/wiki/Robustness_principle"&gt;Robustness principle&lt;/a&gt; demands: be lenient in what you accept and strict in what you emit. I was facing this challenge when deserializing boolean values.&lt;/p&gt;
&lt;h3&gt;What is true&lt;/h3&gt;
&lt;p&gt;Glancing at data, we can spot, mostly easily what looks trueish:&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;true&lt;/li&gt;
 &lt;li&gt;"&lt;strong&gt;T&lt;/strong&gt;rue"&lt;/li&gt;
 &lt;li&gt;"&lt;strong&gt;Y&lt;/strong&gt;es"&lt;/li&gt;
 &lt;li&gt;1&lt;/li&gt;
 &lt;li&gt;"&lt;strong&gt;S&lt;/strong&gt;i"&lt;/li&gt;
 &lt;li&gt;"&lt;strong&gt;J&lt;/strong&gt;a"&lt;/li&gt;
 &lt;li&gt;"&lt;strong&gt;A&lt;/strong&gt;ctive"&lt;/li&gt;
 &lt;li&gt;"&lt;strong&gt;i&lt;/strong&gt;sActive"&lt;/li&gt;
 &lt;li&gt;"&lt;strong&gt;e&lt;/strong&gt;nabled"&lt;/li&gt;
 &lt;li&gt;"&lt;strong&gt;o&lt;/strong&gt;n"&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The last three options aren't as clear cut, they depend on your use case. Using a simple class, lets try to deserialize from &lt;a href="https://www.json.org/json-en.html"&gt;JSON&lt;/a&gt; to an instance of a &lt;a href="https://www.java.com/"&gt;Java&lt;/a&gt; class instance using &lt;a href="https://github.com/FasterXML/jackson"&gt;Jackson&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Java doesn't have native support for JSON, so we need to rely on libraries like &lt;a href="https://github.com/FasterXML/jackson"&gt;Jackson&lt;/a&gt;, &lt;a href="https://github.com/google/gson"&gt;Google GSON&lt;/a&gt; (or any other listed on the &lt;a href="https://www.json.org/json-en.html"&gt;JSON&lt;/a&gt; page). I choose Jackson, since it is the library underpinning the &lt;a href="https://vertx.io/docs/apidocs/io/vertx/core/json/JsonObject.html"&gt;JsonObject&lt;/a&gt; of the &lt;a href="https://vertx.io/"&gt;Eclipse Vert.x&lt;/a&gt; Framework I'm fond of. Over at &lt;a href="https://www.baeldung.com/"&gt;Baeldung&lt;/a&gt; you will find more &lt;a href="https://www.baeldung.com/jackson-object-mapper-tutorial"&gt;generic Jackson tutorials&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let's look at a simple Java class (Yes, Java14 will make it &lt;a href="https://vladmihalcea.com/java-records-guide/"&gt;less verbose&lt;/a&gt;), that sports &lt;code&gt;fromJson()&lt;/code&gt; and &lt;code&gt;toJson()&lt;/code&gt; as well as convenient overwrite of &lt;code&gt;equals()&lt;/code&gt; and &lt;code&gt;toString()&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-java"&gt;package com.notessensei.blogsamples;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import io.vertx.core.json.JsonObject;

@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonIgnoreProperties(ignoreUnknown = true)
public class Component {

  public static Component fromJson(final JsonObject source) {
    return source.mapTo(Component.class);
  }

  private String name;
  private boolean active = false;

  public Component() {
    // Default empty constructor required
  }

  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public boolean getActive() {
    return active;
  }

  public void setActive(boolean isActive) {
    this.active = isActive;
  }

  public JsonObject toJson() {
    return JsonObject.mapFrom(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj instanceof Component) {
      return this.toString().equals(obj.toString());
    }
    return super.equals(obj);
  }

  @Override
  public String toString() {
    return this.toJson().encode();
  }

}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Trying to instantiate a class instance with the following JSON will work:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;{
  "name": "Heater",
  "active": false
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;{
  "name": "Aircon"
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;{
  "name": "Fridge",
  "active": true,
  "PowerConsumption": {
    "unit": "kw",
    "measure": 7
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However it will fail with those:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;{
  "name": "System1",
  "active": "on"
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;{
  "name": "System2",
  "active": "yes"
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You get the charming error &lt;em&gt;Cannot deserialize value of type &lt;code&gt;boolean&lt;/code&gt; from String "yes": only "true"/"True"/"TRUE" or "false"/"False"/"FALSE" recognized`&lt;/em&gt;. Interestingly numbers work.&lt;/p&gt;
&lt;p&gt;On a side note: &lt;a href="https://github.com/FasterXML/jackson"&gt;Jackson&lt;/a&gt; uses the presence of getters/setters to decide (de)serialization and needs &lt;code&gt;getActive&lt;/code&gt; and &lt;code&gt;setActive&lt;/code&gt; or &lt;code&gt;isActive&lt;/code&gt;. When you name your variable &lt;code&gt;isActive&lt;/code&gt; Eclipse would generate &lt;code&gt;setActive&lt;/code&gt; and &lt;code&gt;isActive&lt;/code&gt; instead of &lt;code&gt;getIsActive&lt;/code&gt; / &lt;code&gt;isIsActive&lt;/code&gt; and &lt;code&gt;setIsActive&lt;/code&gt;. So simply avoid the &lt;code&gt;is...&lt;/code&gt; prefix for internal variables.&lt;/p&gt;</description>
	<link>2022/05/yes-no-maybe-booleans.html</link>
	<author>Stephan H. Wissel</author>
	<guid>f7d5b920-ce05-11ec-a659-7f18fb299d1b</guid>
	<pubDate>07 May 2022</pubDate>

</item>
<item>
	<title>The Quest for a software documentation system</title>
	<description>&lt;p&gt;Software documentation is a thankless business and never complete. Picking the right system can make or break your documentation success&lt;/p&gt;
&lt;h3&gt;Contenders&lt;/h3&gt;
&lt;p&gt;We have a number of options commonly used, each with strengh and weaknesses.&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;&lt;a href="https://www.xml.com/articles/2017/01/19/what-dita/"&gt;DITA&lt;/a&gt;: The OASIS Open Darwin Information Typing Architecture. Extremly powerful, especially the concept of single source definition: You define an item once and just reference it. XML based, suitable for complex documentation, but with a super steep learning curve, effectively prohibit community contributions&lt;/li&gt;
 &lt;li&gt;&lt;a href="https://jekyllrb.com"&gt;jekyll&lt;/a&gt;: Markdown driven template engine, best known for driving &lt;a href="https://pages.github.com"&gt;GitHub Pages&lt;/a&gt;. With the &lt;a href="https://just-the-docs.github.io/just-the-docs/"&gt;Just-the-docs&lt;/a&gt; template it makes documentation creation a simple task in your repository's &lt;code&gt;/doc&lt;/code&gt; directory. Running site generation and hosting is build into github, so no GitHub action or other CI/CD pipeline needed. Lacks good tooling for multi-version documentation&lt;/li&gt;
 &lt;li&gt;&lt;a href="https://maven.apache.org/plugins/maven-site-plugin/"&gt;Maven sites&lt;/a&gt;: a good option when Java is your language. Tightly coupled to the build process it produces full reporting and JavaDoc. Can be a pain to setup&lt;/li&gt;
 &lt;li&gt;&lt;a href="https://readthedocs.org"&gt;Read the docs&lt;/a&gt;: Great destination for OpenSource documentation or your &lt;a href="https://readthedocs.com"&gt;corporate documentation&lt;/a&gt; if the build server can reach it. Uses the &lt;a href="https://www.mkdocs.org"&gt;MKDocs&lt;/a&gt; rendering engine&lt;/li&gt;
 &lt;li&gt;and &lt;a href="https://document360.com/blog/software-documentation-tools/"&gt;many&lt;/a&gt;, did I say &lt;a href="https://www.process.st/software-documentation/"&gt;many more&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I found the tools quite impressive and somehow wanting at the same time. So taking a step back, it is worth to look at requirements&lt;/p&gt;</description>
	<link>2022/03/quest-for-software-documentation-system.html</link>
	<author>Stephan H. Wissel</author>
	<guid>db4e1a90-9fa2-11ec-bec4-9fa5fdc87e87</guid>
	<pubDate>09 March 2022</pubDate>

</item>
<item>
	<title>Maven JNA macOS and LD_LIBRARY_PATH</title>
	<description>&lt;p&gt;When running Java applications on a &lt;code&gt;*nix&lt;/code&gt; style of operating system that need to load native libraries, you will need to set the &lt;a href="https://linuxhint.com/what-is-ld-library-path/"&gt;LD_LIBRARY_PATH&lt;/a&gt; environment variable (&lt;a href="https://medium.com/macos-is-not-linux-and-other-nix-reflections/d-o-y-ou-ld-library-path-you-6ab0a6135a33"&gt;or something similar&lt;/a&gt;). That's not an issue on Linux.&lt;/p&gt;
&lt;h3&gt;macOS: I won't let you, it's for your own good&lt;/h3&gt;
&lt;p&gt;On &lt;a href="https://en.wikipedia.org/wiki/MacOS"&gt;macOS&lt;/a&gt; the &lt;a href="https://support.apple.com/en-sg/guide/security/secb7ea06b49/web"&gt;System Integrity Protection (SIP)&lt;/a&gt; prevents these variables to be set in &lt;a href="https://stackoverflow.com/questions/60126159/how-to-set-ld-library-path-dyld-library-path-on-macos"&gt;your shell (bash, zsh)&lt;/a&gt;. It works inside Eclipse, when you define environment parameters, but not in any shell script. Unfortunately &lt;a href="https://maven.apache.org"&gt;Maven&lt;/a&gt;'s command line &lt;code&gt;mvn&lt;/code&gt; is a shell script.&lt;/p&gt;
&lt;h3&gt;The Notes challenge&lt;/h3&gt;
&lt;p&gt;Since the Notes client is a cross-platform product, the library locations aren't where a macOS program would look for:&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;The application directory. That's where the &lt;strong&gt;Java&lt;/strong&gt; runtime is at home, not the notes executable&lt;/li&gt;
 &lt;li&gt;In a library location, here looking for &lt;code&gt;notes&lt;/code&gt; instead of &lt;code&gt;libnotes.dylib&lt;/code&gt;&lt;/li&gt;
 &lt;li&gt;&lt;code&gt;/Users/[YOURNAME]/Library/Frameworks/notes.framework/&lt;/code&gt;&lt;/li&gt;
 &lt;li&gt;&lt;code&gt;/Library/Frameworks/notes.framework/&lt;/code&gt;&lt;/li&gt;
 &lt;li&gt;&lt;code&gt;/System/Library/Frameworks/notes.framework/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You could try to symlink the first library: &lt;code&gt;ln -s /Applications/HCL\ Notes.app/Contents/MacOS/libnotes.dylib ~/Library/Frameworks/notes.framework/notes&lt;/code&gt; (after creating the rewuired directories) to run into the next challenge.&lt;/p&gt;</description>
	<link>2022/01/maven-jna-macos-and-ld_library_path.html</link>
	<author>Stephan H. Wissel</author>
	<guid>624428a0-7398-11ec-9bb6-e9198cdc4c3b</guid>
	<pubDate>12 January 2022</pubDate>

</item>
<item>
	<title>Async Java with vert.x</title>
	<description>&lt;p&gt;I wrote about &lt;a href="/blog/2020/11/streams-and-functional-programming-in-java.html"&gt;more modern&lt;/a&gt; Java syntax &lt;a href="/blog/2021/01/collecting-java-streams.html"&gt;and streams&lt;/a&gt; before.&lt;br&gt; There is more to it. &lt;a href="https://en.wikipedia.org/wiki/Non-blocking_I/O_%28Java%29"&gt;Non Blocking I/O&lt;/a&gt; and &lt;a href="https://en.wikipedia.org/wiki/Event_loop"&gt;Event Loops&lt;/a&gt; allow for&lt;br&gt;&lt;a href="https://www.quora.com/Why-is-Node-js-so-much-faster?share=1"&gt;better performance&lt;/a&gt;. It's not a magic bullet, some readjustment is required&lt;/p&gt;
&lt;h2&gt;Adjusting methods, exceptions and return values&lt;/h2&gt;
&lt;p&gt;Initially it might look daunting, but the adjustments are not too big. Let's look at some examples. A classic Java method looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-java"&gt;String someResult throws DidnWorkException {
    // Working code goes here
    if (someCondition) {
        throw new DidnWorkException();
    }
    return "It worked";
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Its asynchronous counter-part looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-java"&gt;Future&amp;lt;String&amp;gt; someResult() {
    return Future.future(promise -&amp;gt; {
        // Working code goes here
        if (someCondition) {
            promise.fail("It didn't work"); // Could use a Throwable too
        } else {
            promise.complete("It worked");
        }
    });
}
&lt;/code&gt;&lt;/pre&gt;</description>
	<link>2022/01/async-java-with-vertx.html</link>
	<author>Stephan H. Wissel</author>
	<guid>5f447370-6e85-11ec-b6b7-31691e9a39a5</guid>
	<pubDate>06 January 2022</pubDate>

</item>

</channel>
</rss>
