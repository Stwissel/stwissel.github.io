<?xml version="1.0"?>
<rss version="2.0">
<channel>
	<title>wissel.net Usability - Productivity - Business - The web - Singapore and Twins</title>
	<link>https://wissel.net/blog/stories.rss</link>
	<description>Thoughts, Insights and Opinions of Stephan H. Wissel. Topics included: Salesforce, Lotus Notes and Domino, IBM Websphere, NodeJS, JavaScript,  J2EE, .Net, Software Archtecture, Personcentric Development, Agile Software, SDLC, Singapore and my Twins</description>
	<language>en,de</language>
	<copyright>(C) 2003 - 2021 Stephan H. Wissel, All rights reserved</copyright>
	<pubdate>Thu, 31 Jul 2025 12:22:22 +0000</pubdate>
<item>
	<title>CouchDB, JWKS and PEM public keys</title>
	<description>&lt;p&gt;Depending on &lt;a href="/blog/2024/06/how-deep-do-you-authenticate.html"&gt;how deep you authenticate&lt;/a&gt;, you might be tasked maintaining a user base in &lt;code&gt;_users&lt;/code&gt; (and welcome to "I forgot my password" hell). The standing recommendation is to implement a single source of identity using a directory as &lt;a href="https://www.cloudflare.com/learning/access-management/what-is-an-identity-provider"&gt;Identity Provider (IdP)&lt;/a&gt;. My favorite &lt;a href="https://couchdb.apache.org/"&gt;NoSQL database&lt;/a&gt; can be &lt;a href="https://docs.couchdb.org/en/stable/api/server/authn.html#jwt-authentication"&gt;configured&lt;/a&gt; to trust JWT signed by known IdPs, so let's do that.&lt;/p&gt;
&lt;h3&gt;Some assembly required&lt;/h3&gt;
&lt;p&gt;CouchDB can be configured in three ways: Edit the respective ini file, use the Fauxton UI or use the REST API. I like the later since I'm comfortable with &lt;a href="https://curl.se/"&gt;curl&lt;/a&gt; and &lt;a href="https://www.usebruno.com/"&gt;Bruno&lt;/a&gt; (not a fan of Postman anymore). The steps are:&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;configure a client on your identity provider&lt;/li&gt;
 &lt;li&gt;enable JWT authentication&lt;/li&gt;
 &lt;li&gt;specify what claims are mandatory&lt;/li&gt;
 &lt;li&gt;specify how to map roles&lt;/li&gt;
 &lt;li&gt;add trustedd public keys&lt;/li&gt;
 &lt;li&gt;restart your node&lt;/li&gt;
&lt;/ul&gt;</description>
	<link>2025/07/couchdb-and-jwks.html</link>
	<author>Stephan H. Wissel</author>
	<guid>268f01d0-6d46-11f0-802c-d975bb98b8ec</guid>
	<pubDate>30 July 2025</pubDate>

</item>
<item>
	<title>Report your CSP (violations)</title>
	<description>&lt;p&gt;I'm a big fan of a strict &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Guides/CSP"&gt;Content Security Policy (CSP)&lt;/a&gt;. It can be a pain to setup (but there is help, &lt;a href="https://report-uri.com/home/generate"&gt;&lt;strong&gt;here&lt;/strong&gt;&lt;/a&gt;, &lt;a href="https://cybeready.com/top-9-content-security-policy-generators/"&gt;here&lt;/a&gt;, &lt;a href="https://chromewebstore.google.com/detail/content-security-policy-c/ahlnecfloencbkpfnpljbojmjkfgnmdc?hl=en"&gt;here&lt;/a&gt; and &lt;a href="https://www.quantcdn.io/tools/automatic-csp-generator"&gt;&lt;strong&gt;here&lt;/strong&gt;&lt;/a&gt;) and &lt;a href="https://csp-evaluator.withgoogle.com/"&gt;evaluate&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Let's report it&lt;/h3&gt;
&lt;p&gt;You won't know if a policy was tried to be violated unless the attempt is reported back to your application. For that purpose we use the CSP directives &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Reference/Headers/Content-Security-Policy/report-to"&gt;&lt;code&gt;report-to&lt;/code&gt;&lt;/a&gt; and the older, deprecated &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Reference/Headers/Content-Security-Policy/report-uri"&gt;&lt;code&gt;report-uri&lt;/code&gt;&lt;/a&gt;. Until Firefox catches up, use both. When a browser supports &lt;code&gt;report-to&lt;/code&gt;, &lt;code&gt;report-uri&lt;/code&gt; gets ignored.&lt;/p&gt;
&lt;p&gt;Reporting isn't only useful in production, but already during development and especially during retrofitting. There you can swap the &lt;code&gt;Content-Security-Policy&lt;/code&gt; header for &lt;code&gt;Content-Security-Policy-Report-Only&lt;/code&gt;. It will allow all content to load, but report back all violations.&lt;/p&gt;
&lt;p&gt;You then run your &lt;a href="https://www.browserstack.com/guide/end-to-end-testing"&gt;E2E Tests&lt;/a&gt; (You have those, haven't you?) and get a free overview what loads from where. Adjust the CSP, rinse and repeat.&lt;/p&gt;
&lt;h3&gt;Where to report to?&lt;/h3&gt;
&lt;p&gt;There are numerous SaaS providers with fancy dashboards, that offer ready made solutions. When you are pressed for time, that might be your best option. I haven't evaluated them, so I can't recommend or endorse them.&lt;/p&gt;</description>
	<link>2025/07/report-your-csp.html</link>
	<author>Stephan H. Wissel</author>
	<guid>e2912cf0-6148-11f0-b6bc-9dae663e3d57</guid>
	<pubDate>07 July 2025</pubDate>

</item>
<item>
	<title>HTML's template element in single page applications</title>
	<description>&lt;p&gt;"&lt;em&gt;We need to use [insert-framework-of-the-day]!&lt;/em&gt;" is the typical answer when asking for a light web single page application (SPA).&lt;/p&gt;
&lt;p&gt;It doesn't need to be that way, &lt;a href="https://paulswithers.github.io/"&gt;Paul&lt;/a&gt; and myself shared in a &lt;a href="https://github.com/paulswithers/super-procode-mode-openntf"&gt;recent webinar&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Serving the long tail&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.wavemaker.com/long-tail-apps-shadow-it-problem/"&gt;Long Tail Apps&lt;/a&gt; tend to be outside of IT control, since they bypass the (usually heavy) standup of an IT development project.&lt;/p&gt;
&lt;p&gt;That standup could be way lighter, when your application just consists of one html file, one css file, one js file, one manifest and (optionally) one or more image files as well as a &lt;a href="https://opensource.hcltechsw.com/Domino-rest-api/references/hostingstatic.html"&gt;definded point of deployment&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The typical objection goes: "&lt;em&gt;But it is never one HTML file, I need a login, a list and a form in read and edit mode&lt;/em&gt;"&lt;/p&gt;
&lt;h3&gt;template to the rescue&lt;/h3&gt;
&lt;p&gt;The &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/template"&gt;&lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt;&lt;/a&gt; element is part of the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_components"&gt;WebComponents&lt;/a&gt; specification and it is useful in simple SPA applications.&lt;/p&gt;</description>
	<link>2025/06/html-templates-spa.html</link>
	<author>Stephan H. Wissel</author>
	<guid>bfdb1860-5009-11f0-9a8e-691adff7d010</guid>
	<pubDate>23 June 2025</pubDate>

</item>
<item>
	<title>Fun with AI system prompts</title>
	<description>&lt;p&gt;&lt;a href="https://www.google.com/search?q=ai+chatbots"&gt;AI Chatbots&lt;/a&gt; are a popular topic. As part of a session at &lt;a href="https://engage.ug/"&gt;Engage 2025&lt;/a&gt; I was looking for an easy to grasp example to understand the difference of user prompt and system prompt, the later typically invisible to the user. My goal was to make it abundantly clear how important the system prompt is.&lt;/p&gt;
&lt;p&gt;I settled sending the same user prompt with vastly different system prompts. Here is what I got.&lt;/p&gt;
&lt;h3&gt;Romeo at the balcony&lt;/h3&gt;
&lt;p&gt;Mercutio?s mocking my love and he?s never been in love himself.&lt;/p&gt;
&lt;p&gt;Wait. What?s that light coming from the window over there? It?s like the east, with Juliet as the morning sun! Rise, Juliet, beautiful sun, and kill the jealous moon who?s already fading and sad because you are far more beautiful than she is. Don?t swear off men like the virgin moon goddess Diana?the moon envies you anyway. Her virginal appearance is weak and pale and only fools want to emulate it. Get rid of it.&lt;/p&gt;
&lt;p&gt;It?s my lady! Oh, it?s my love. Oh, if only she knew I love her. She?s talking but I can?t hear anything. What does it matter?&lt;/p&gt;
&lt;p&gt;Her expression means something and I can answer that. No, I?m being too forward. She?s not talking to me. Oh, if two of the most beautiful stars had to leave heaven on important business, they?d ask her eyes to do the twinkling for them while they were gone! What if her eyes took their places in the sky and those stars became her eyes? Her beautiful face would outshine those stars in her head like daylight outshines lamps, while her eyes in the sky would be so bright at nighttime that birds would be convinced it was day. Look at how she leans her cheek on her hand. I wish I were a glove on her hand so I could touch her cheek!&lt;/p&gt;</description>
	<link>2025/05/fun-with-ai-system-prompts.html</link>
	<author>Stephan H. Wissel</author>
	<guid>d4495700-365d-11f0-87fb-618e413f1645</guid>
	<pubDate>07 May 2025</pubDate>

</item>
<item>
	<title>Deploying a Single Page Application using the Domino REST API</title>
	<description>&lt;p&gt;The &lt;a href="https://opensource.hcltechsw.com/Domino-rest-api/"&gt;Domino REST API&lt;/a&gt; not only provides secure access to "jsonified" Domino data,&lt;br&gt;
  but also comes with capabilities to ease integration. This enables one to quickly cater to &lt;a href="https://en.wikipedia.org/wiki/Long_tail"&gt;the long tail&lt;/a&gt; of applications, giving them a home instead of loosing them to the shadow IT.&lt;/p&gt;
&lt;p&gt;Once you know the steps, you can deploy new &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/SPA"&gt;Single Purpose Applications&lt;/a&gt; (I modified the meaning of SPA a little) in no time.&lt;/p&gt;
&lt;h3&gt;No CORS, no headache&lt;/h3&gt;
&lt;p&gt;DRAPI allows to &lt;a href="https://opensource.hcltechsw.com/Domino-rest-api/references/hostingstatic.html"&gt;host static applications&lt;/a&gt; in the &lt;code&gt;keepweb.d&lt;/code&gt; directory. "Static" might be a little misnomer (it only relates to the source files, not the interaction) since a JS file can make your experience quite interactive. Since you run on the same Domain and port as the API, you don't need to worry about &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/CORS"&gt;CORS&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Preparation&lt;/h3&gt;
&lt;p&gt;Your SPA will live in a sub directory of &lt;code&gt;keepweb.d&lt;/code&gt;, so think about a name, we shall use &lt;code&gt;demo42&lt;/code&gt; here. Add a suitable icon (e.g. 72x72 px png), name it &lt;code&gt;demo42.png&lt;/code&gt; and you are ready to roll. Let's assume our Domino API is running on &lt;code&gt;https://api.demo.io&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Work faster with vitejs&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://vite.dev/"&gt;viteJS&lt;/a&gt; is one of the fronteand tools you &lt;strong&gt;want&lt;/strong&gt; to learn. It features "hot module reload" to speed up development and, when done, packages your application nice and tidy.&lt;/p&gt;
&lt;p&gt;It is easy to get started. You need a current version (22.x at time of writing) of &lt;a href="https://nodejs.org/en"&gt;nodeJS&lt;/a&gt; installed as development tooling.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;npm create vite@latest demo42 -- --template vanilla
cd demo42
npm install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will create the demo42 directory and scaffold the project for you. Before we get started with athe development, let's adjust the environment. In the root of the project create a file &lt;code&gt;vite.config.js&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;import { defineConfig } from 'vite';

export default defineConfig({
  base: '/keepweb/demo42/',
  server: {
    proxy: {
      '/api': {
        target: 'https://api.demo.io',
        changeOrigin: true
      }
    }
  }
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This allows you to develop in the comfort of your local machine's &lt;a href="https://vite.dev/guide/api-hmr"&gt;hot module reload&lt;/a&gt; which refreshes your app on svae automagically. It also fixes the path matching to its final destination. Next create in &lt;code&gt;public&lt;/code&gt; the file &lt;code&gt;manifest.json&lt;/code&gt;. This file defines the tile layout for the landing page.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;{
  "short_name": "Demo 42",
  "name": "The final answer to all Demos",
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#aacccc",
  "icon": "vite.svg"
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can play with colors and icons as you deem fit. Now we are ready to run the application:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;npm run dev
&lt;/code&gt;&lt;/pre&gt;</description>
	<link>2025/03/deploying-a-spa-to-drapi.html</link>
	<author>Stephan H. Wissel</author>
	<guid>7e85c300-0339-11f0-b3bc-e33450aa6e10</guid>
	<pubDate>17 March 2025</pubDate>

</item>
<item>
	<title>ufw cheatsheet</title>
	<description>&lt;p&gt;Mainly as a note to self.&lt;/p&gt;
&lt;h3&gt;My default firewall setup&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;sudo ufw status
sudo ufw default allow outgoing
sudo ufw default deny incoming
grep IPV6 /etc/default/ufw
sudo ufw allow ssh
sudo ufw limit ssh/tcp comment 'Rate limit for openssh server'
sudo ufw allow 80/tcp comment 'Allow nginx HTTP'
sudo ufw limit 80 comment 'limit nginx HTTP'
sudo ufw allow 443/tcp comment 'Allow nginx HTTPS'
# For Domino mail
sudo ufw allow 1352/tcp comment 'Allow Notes replication'
sudo ufw allow 25/tcp comment 'Allow SMTP'
sudo ufw allow 587/tcp comment 'Allow SMTP'
sudo ufw allow 110/tcp comment 'Allow POP3'
sudo ufw allow 995/tcp comment 'Allow POP3s'
sudo ufw allow 143/tcp comment 'Allow IMAP'
sudo ufw allow 993/tcp comment 'Allow IMAPs'
sudo ufw allow from 1.2.3.4 'Allow the othe Domino'
sudo ufw enable
&lt;/code&gt;&lt;/pre&gt;</description>
	<link>2025/02/ufw-cheatsheet.html</link>
	<author>Stephan H. Wissel</author>
	<guid>dd7313e0-f3a3-11ef-85ce-6116619fca24</guid>
	<pubDate>26 February 2025</pubDate>

</item>
<item>
	<title>Java Record Derived Creation (stopgap until JEP 468 arrives)</title>
	<description>&lt;p&gt;Java 14 (in a preview feature) introduced &lt;a href="https://docs.oracle.com/en/java/javase/14/language/records.html"&gt;Records&lt;/a&gt;. In a nutshell: Records are (&lt;a href="https://codeadventures.littlebluefrog.nl/posts/06-immutability-in-records/"&gt;mostly&lt;/a&gt;) immutable objects with a greatly reduced amount of boilerplate code requirements. For a detailed introduction head over to &lt;a href="https://www.baeldung.com/java-record-keyword"&gt;Baeldung&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;When records need update&lt;/h3&gt;
&lt;p&gt;The short answer: create a new record and use the existing as input. Let's look at an example:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-java"&gt;public record Billionaire(String name, Long wealth, Temporal assessment) {

  public Billionaire cloneWithNewAssesment(Long newWealth, Temporal currentAssesment) {
    return new Billionaire(this.name, newWealth,currentAssesment);
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By itself this is a clean solution. You might add another function for unchanged assesment values. It gets messy when your records have a few more fields.&lt;/p&gt;
&lt;p&gt;To address this, &lt;a href="https://openjdk.org/jeps/468"&gt;JEP 468&lt;/a&gt; has neen proposed. Unfortunately it isn't seen anywhere in &lt;a href="https://openjdk.org/projects/jdk/23/"&gt;JDK 23&lt;/a&gt; or &lt;a href="https://openjdk.org/projects/jdk/24/"&gt;JDK 24&lt;/a&gt;. Its syntax follows the spirit of boilerplate avoidance.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-java"&gt;// Wealth changed
Billonaire theUpdated = oldBillionaire with { newWealth, newAssesment}

// Wealth unchanged
Billonaire anotherUpdated = oldBillionaire with { newAssesment}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ultimately that's the way to go. Until then I needed a stopgap measure. It contains quite some boilerplate, following the &lt;a href="https://www.digitalocean.com/community/tutorials/builder-design-pattern-in-java"&gt;builder pattern&lt;/a&gt; to make use easier&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-java"&gt;public record Billionaire(String name, Long wealth, Temporal assessment) {

  public BillionaireUpdater forCloning() {
    return new BillionaireUpdater(this);
  }
}

public class BillionaireUpdater {

  Long wealth = null;
  Temporal assessment = null;
  final Billionaire old;


  public BillionaireUpdater(Billionaire old) {
    this.old = old;
  }

  public BillionaireUpdater wealth(Long wealth) {
    this.wealth = wealth;
    return this;
  }

  public BillionaireUpdater assessment(Temporal assessment) {
    this.assessment = assessment;
    return this;
  }

  public Billionaire build() {
    return new Billionaire(
      old.name(),
      this.wealth == null ? old.wealth : this.wealth,
      this.assesment == null ? old.assesment : this.assesment
    );
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This approach keeps the "bulky" code outside the record, so once &lt;a href="https://openjdk.org/jeps/468"&gt;JEP 468&lt;/a&gt; becomes available, updating should be managable leading to the ultimate removal of the &lt;code&gt;Updater&lt;/code&gt; classes. The use is quite straight forward:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-java"&gt;Billionaire theUpdated = oldBillionaire.forCloning()
                                    .wealth(insaneAmount)
                                    .assesment(dateOfAssesment)
                                    .build();

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As usual YMMV&lt;/p&gt;</description>
	<link>2024/12/java-record-derived-creation.html</link>
	<author>Stephan H. Wissel</author>
	<guid>5f44d330-c664-11ef-af6d-a7bb66125fd9</guid>
	<pubDate>30 December 2024</pubDate>

</item>
<item>
	<title>Building ARM64 on Github</title>
	<description>&lt;p&gt;Getting your &lt;a href="https://www.redhat.com/en/topics/devops/what-is-ci-cd"&gt;CI/CD&lt;/a&gt; pipeline right can be a daunting task. Here is one I had to address:&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Create a &lt;a href="https://quarkus.io/"&gt;Quarkus&lt;/a&gt; Java application&lt;/li&gt;
 &lt;li&gt;Compile it to a native executable&lt;/li&gt;
 &lt;li&gt;Build a container for it&lt;/li&gt;
 &lt;li&gt;Make the container available to both Linux and MacOS&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The little irony, Docker on macOS or Windowsruns Linux under the hood.&lt;/p&gt;
&lt;h3&gt;The easy part - Quarkus&lt;/h3&gt;
&lt;p&gt;As I've &lt;a href="/blog/2023/10/quarkus-and-graalvm-starter.html"&gt;written before&lt;/a&gt; it is easy to get started with &lt;a href="https://quarkus.io/"&gt;Quarkus&lt;/a&gt;. It provides &lt;a href="https://quarkus.io/guides/container-image"&gt;5 ways to build containers&lt;/a&gt;, and &lt;a href="https://quarkus.io/guides/building-native-image"&gt;detailed instructions&lt;/a&gt; to build a native image.&lt;/p&gt;
&lt;p&gt;Building a native image looked daunting, with quite some prerequisites like GraalVM, CLI and C compiler. Luckily all this is available in a builder image, and a simple property settin in your &lt;a href="https://maven.apache.org/guides/introduction/introduction-to-the-pom.html"&gt;&lt;code&gt;pom.xml&lt;/code&gt;&lt;/a&gt; settles it:&lt;/p&gt;</description>
	<link>2024/11/building-arm64-on-github.html</link>
	<author>Stephan H. Wissel</author>
	<guid>d7561d60-a6f8-11ef-97b1-713842e709f4</guid>
	<pubDate>20 November 2024</pubDate>

</item>
<item>
	<title>Using RBAC with OpenAPI and vert.x</title>
	<description>&lt;p&gt;I'm stronlgy in favour of &lt;a href="https://openpracticelibrary.com/practice/contract-first-development/"&gt;Contract-First Development&lt;/a&gt;, when in comes to APIs. All invested parties, including your future self, agree on a neutral format, that both API providers and consumers will stick to. For REST APIs that is the &lt;a href="https://www.openapis.org/"&gt;OpenAPI spec&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A popular critique of that approach is that it reeks of &lt;a href="https://en.wikipedia.org/wiki/Big_design_up_front"&gt;Big Design Upfront&lt;/a&gt;, happily skipping over the fact that nothing stops the teams to iterate over the specification too, one path, one schema at the time&lt;/p&gt;
&lt;h3&gt;The source of truth&lt;/h3&gt;
&lt;p&gt;The specification becomes the single authorative source for endpoints, security requirements, data formats and responses. While it is possible to generate the spec from source code, like. e.g. &lt;a href="https://spring.io/projects"&gt;Spring&lt;/a&gt; or &lt;a href="https://quarkus.io/extensions/io.quarkus/quarkus-smallrye-openapi/"&gt;Quarkus&lt;/a&gt;, I see clear advantages to provide the specification standalone. Create it &lt;a href="https://tools.openapis.org/"&gt;with a tool&lt;/a&gt; like &lt;a href="https://studio.apicur.io/"&gt;Apicur.io&lt;/a&gt;, &lt;a href="https://stoplight.io/"&gt;Stoplight&lt;/a&gt; or &lt;a href="https://apigit.com/"&gt;APIGit&lt;/a&gt;. Or use &lt;a href="https://marketplace.visualstudio.com/items?itemName=42Crunch.vscode-openapi"&gt;a plugin&lt;/a&gt; (or &lt;a href="https://marketplace.visualstudio.com/search?term=OpenAPI&amp;amp;target=VSCode"&gt;another&lt;/a&gt;) in your &lt;a href="https://visualstudio.microsoft.com/#vscode-section"&gt;IDE&lt;/a&gt; or &lt;a href="https://plugins.jetbrains.com/search?search=OpenAPI"&gt;the other one&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Once you have your first draft, you want to implement it server side. &lt;a href="https://vertx.io"&gt;Eclipse vert.x&lt;/a&gt; offers the &lt;a href="https://vertx.io/docs/vertx-web-openapi-router/java/"&gt;Vert.x OpenAPI Router&lt;/a&gt; for exactly that. You can get more details from my &lt;a href="https://stwissel.github.io/presentations/OpenAPI2023/index.html"&gt;OpenAPI talk&lt;/a&gt;, or by peeking into the &lt;a href="https://github.com/Stwissel/openapi-talk"&gt;sample project&lt;/a&gt; (which used vert.x inside &lt;a href="https://quarkus.io/"&gt;Quarkus&lt;/a&gt;).&lt;/p&gt;</description>
	<link>2024/11/using-rbac-with-openapi-and-vertx.html</link>
	<author>Stephan H. Wissel</author>
	<guid>600b57a0-9dcc-11ef-b719-8793681eb8df</guid>
	<pubDate>08 November 2024</pubDate>

</item>
<item>
	<title>One-Off IdP with KeyCloak</title>
	<description>&lt;p&gt;When end-2-end testing applications that use an &lt;a href="https://en.wikipedia.org/wiki/Identity_provider"&gt;IdP&lt;/a&gt;, an IdP needs to be in a known state to make test repeatable.&lt;/p&gt;
&lt;p&gt;Typically a container is used, with a configuration that needs to be reset before (and after) a run. Restoring the IdP configuration isn't ideal, since addring new test cases (e.g. adding a user with different properties to check application behavior). I propose a different approach: One-off IdP&lt;/p&gt;
&lt;h3&gt;Container without persistence&lt;/h3&gt;
&lt;p&gt;I start with an empty deployment of &lt;a href="https://www.keycloak.org/"&gt;KeyCloak&lt;/a&gt; running in a docker container.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-shell"&gt;#!/bin/bash
#Run a clean KeyCloak
docker run --rm -p 8080:8080 \
       --name testcloak \
       -e KEYCLOAK_ADMIN=admin \
       -e KEYCLOAK_ADMIN_PASSWORD=password \
       quay.io/keycloak/keycloak:latest start-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;--rm&lt;/code&gt; parameter ensures that the container is discarded after use. There is &lt;strong&gt;no&lt;/strong&gt; persistence flag (&lt;code&gt;--mount&lt;/code&gt;), so when the container goes down, all data perishes (and that's intendet).&lt;/p&gt;
&lt;h3&gt;Configuration sequence&lt;/h3&gt;
&lt;p&gt;The empty KeyCloak only knows the realm &lt;code&gt;master&lt;/code&gt; and the user &lt;code&gt;admin&lt;/code&gt;. To turn it into a fully functional IdP we need to configure it. Since we want this process to be repeatable we shall use &lt;a href="https://www.keycloak.org/docs-api/latest/rest-api/index.html"&gt;Keycloak's REST API&lt;/a&gt;. The documentation is complete, including an &lt;a href="https://www.openapis.org/"&gt;OpenAPI&lt;/a&gt; spec, but in a dictionary style, so all is good when you know what you are looking for. To learn what is needed the browser development tools while using the admin UI teach us the what.&lt;/p&gt;</description>
	<link>2024/10/onetime-idp-with-keycloak.html</link>
	<author>Stephan H. Wissel</author>
	<guid>83111210-8eba-11ef-9eab-1f7495f5460d</guid>
	<pubDate>20 October 2024</pubDate>

</item>

</channel>
</rss>
