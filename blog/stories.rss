<?xml version="1.0"?>
<rss version="2.0">
<channel>
	<title>wissel.net Usability - Productivity - Business - The web - Singapore and Twins</title>
	<link>https://wissel.net/blog/stories.rss</link>
	<description>Thoughts, Insights and Opinions of Stephan H. Wissel. Topics included: Salesforce, Lotus Notes and Domino, IBM Websphere, NodeJS, JavaScript,  J2EE, .Net, Software Archtecture, Personcentric Development, Agile Software, SDLC, Singapore and my Twins</description>
	<language>en,de</language>
	<copyright>(C) 2003 - 2019 Stephan H. Wissel, All rights reserved</copyright>
	<pubdate>Tue, 28 Apr 2020 07:54:51 +0000</pubdate>
<item>
	<title>Watching the EventBus</title>
	<description>&lt;p&gt;I'm quite fond of &lt;a href="https://en.wikipedia.org/wiki/Event-driven_architecture"&gt;Event-driven architecture&lt;/a&gt;, so to no surprise, I like vert.x's &lt;a href="https://vertx.io/docs/vertx-core/js/#event_bus"&gt;EventBus&lt;/a&gt; and its ability to enable &lt;a href="https://searchsoftwarequality.techtarget.com/definition/polyglot-programming"&gt;polyglot programming&lt;/a&gt;. So it is time to have a closer look&lt;/p&gt; 
&lt;h3&gt;Dem Volk aufs Maul geschaut&lt;/h3&gt; 
&lt;p&gt;(That's a word play on &lt;a href="https://www.eva-leipzig.de/product_info.php?info=p2961_Dem-Volk-aufs-Maul-geschaut.html"&gt;Martin Luther&lt;/a&gt; loosly translated as "Watch them how they talk")&lt;/p&gt; 
&lt;p&gt;I wanted to know, what exactly is happening "on the wire", without disrupting the regular flow. Turns out, there is an easy way to do this. The vert.x EventBus provides the methods &lt;a href="https://vertx.io/docs/apidocs/io/vertx/core/eventbus/EventBus.html#addOutboundInterceptor-io.vertx.core.Handler-"&gt;addOutboundInterceptor&lt;/a&gt; and &lt;a href="https://vertx.io/docs/apidocs/io/vertx/core/eventbus/EventBus.html#addInboundInterceptor-io.vertx.core.Handler-"&gt;addInboundInterceptor&lt;/a&gt; that provide you with access to a Handler with a &lt;a href="https://vertx.io/docs/apidocs/io/vertx/core/eventbus/DeliveryContext.html"&gt;DeliveryContext&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;From there you can get to the &lt;a href="https://vertx.io/docs/apidocs/io/vertx/core/eventbus/Message.html"&gt;Message&lt;/a&gt; or directly the message's body. So I took it for a spin in conjunction with a Websocket. This allows me to watch as the messages flow through:&lt;/p&gt; 
&lt;pre class="brush: java"&gt;final HttpServer server = this.vertx.createHttpServer();
server.websocketHandler(this::handlerWebsockets);

&lt;/pre&gt;</description>
	<link>2020/04/watching-the-eventbus.html</link>
	<author>Stephan H. Wissel</author>
	<guid>3c9fb2d0-891c-11ea-867f-b576e977aa02</guid>
	<pubDate>28 April 2020</pubDate>

</item>
<item>
	<title>SimpleXMLDoc revisited</title>
	<description>&lt;p&gt;It is 2020, &lt;a href="https://www.json.org/json-en.html"&gt;JSON&lt;/a&gt; is supposed to have won, with a &lt;a href="https://en.wikipedia.org/wiki/Protocol_Buffers"&gt;challenger in sight&lt;/a&gt;. &lt;a href="https://en.wikipedia.org/wiki/XML"&gt;XML&lt;/a&gt; with its fine distinction between Elements, Attributes and clear ownership demarked by name spaces, was supposed to be gone. But &lt;a href="https://www.odata.org/"&gt;OData&lt;/a&gt; made it &lt;a href="http://docs.oasis-open.org/odata/odata-csdl-xml/v4.01/odata-csdl-xml-v4.01.html"&gt;necessary&lt;/a&gt; to look again, as did &lt;a href="https://en.wikipedia.org/wiki/CalDAV"&gt;CalDAV&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Out into the OutputStream&lt;/h3&gt; 
&lt;p&gt;The &lt;a href="https://www.wissel.net/blog/downloads/2011/SimpleXMLDoc.java"&gt;initial version&lt;/a&gt; was introduced in the &lt;a href="https://wissel.net/blog/2011/10/xml-helper-class-for-xagents.html"&gt;context of XAgents&lt;/a&gt; which mandated an &lt;a href="https://docs.oracle.com/javase/8/docs/api/java/io/OutputStream.html"&gt;OutputStream&lt;/a&gt;. I find that adequate and useful, so I kept that. If you just want a String, a &lt;a href="https://docs.oracle.com/javase/8/docs/api/java/io/ByteArrayOutputStream.html"&gt;ByteArrayOutputStream&lt;/a&gt; will do quite nicely&lt;/p&gt; 
&lt;h3&gt;Fluent methods&lt;/h3&gt; 
&lt;p&gt;The big change to the &lt;a href="https://gist.github.com/Stwissel/ff2dca14074058e80c374bf6cfd0897e"&gt;revamped version&lt;/a&gt; is the addition of a fluent API. Each method call returns the object instance itself, so you can chain your document creation to look modern (and type less)&lt;/p&gt; 
&lt;h3&gt;Namespace and attributes&lt;/h3&gt; 
&lt;p&gt;Originally I though "simple" would be sufficient to create &lt;code&gt;Elements&lt;/code&gt; only. But as time goes by one starts to appreciate name spaces and &lt;code&gt;Attributes&lt;/code&gt;, so I added support for these too. To keep things simple: once we specify the namespace at the beginning of the document, we can simply refer to it by its alias name.&lt;/p&gt; 
&lt;p&gt;A sample:&lt;/p&gt; 
&lt;pre class="brush: java"&gt;    final ByteArrayOutputStream out = new ByteArrayOutputStream();
    final SimpleXMLDoc doc = new SimpleXMLDoc(out);
    doc.addNamespace("X", "https://xmen.org")
    .addNamespace("", "https://whyOhWhy.com/xml")
    .setXmlStyleSheet("somestle.xslt")
    .openElement("Endpoints")
    .openElement(doc.element("X:Endpoint")
          .addAttribute("name", "A Name")
          .addAttribute("url", "http://anywhere/")
          .addAttribute("meta", "meta not metta"))
     .closeElement(1)
     .addSimpleElement("description", "Something useful")
     .closeDocument();
    System.out.println(out.toString());
&lt;/pre&gt; 
&lt;h3&gt;Key methods&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;addNamespace&lt;/code&gt;: adds one name space and establishes the alias. To keep it simple, namespaces are defined &lt;strong&gt;only&lt;/strong&gt; at the beginning fo the document&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;setXmlStyleSheet&lt;/code&gt;: Same here, needs to be defined at the beginning - after all this class streams the result and stylesheets only start at the beginning&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;OpenElement&lt;/code&gt; starts a new XML Element. When provided with a string, it is an attribute free element, that can include the namespace abbreviation. When using a doc.element, we can add attributes&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;addSimpleElement&lt;/code&gt;: add an element, its String content and close it&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;closeElement&lt;/code&gt;: write out a number of closing tags. It deliberately uses number of tags and not tag names, so you don't need to track the names you have opened. Ensures that XML stays valid&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;closeDocument&lt;/code&gt;: closes all remaining Elements in the correct sequence and closes the document. Can be called once only&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Check the &lt;a href="https://gist.github.com/Stwissel/ff2dca14074058e80c374bf6cfd0897e"&gt;full source code&lt;/a&gt; for details&lt;/p&gt; 
&lt;p&gt;As usual YMMV&lt;/p&gt;</description>
	<link>2020/04/simplexmldoc-revisited.html</link>
	<author>Stephan H. Wissel</author>
	<guid>0bf96660-7d93-11ea-96f1-bbdc839f73d4</guid>
	<pubDate>13 April 2020</pubDate>

</item>
<item>
	<title>vert.x and CORS</title>
	<description>&lt;p&gt;One of the security mechanism for &lt;a href="https://en.wikipedia.org/wiki/Ajax_(programming)"&gt;AJAX&lt;/a&gt; calls is &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS"&gt;CORS&lt;/a&gt; (Cross-Origin Resource sharing), where a server advice a browser if it can request resources from it, coming from a different domain.&lt;/p&gt; 
&lt;p&gt;It is then up to the browser to heed that advice. To complicate matters: when the browser wants to POST data (or other similar operations), it will go through a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Preflighted_requests"&gt;preflight request&lt;/a&gt; adding to site latency.&lt;/p&gt; 
&lt;p&gt;I have to admit, I never fully understood the rationale, since only browsers adhere to &lt;a href="https://en.wikipedia.org/wiki/Cross-origin_resource_sharing"&gt;CORS&lt;/a&gt;, any webserver, &lt;a href="https://www.postman.com/"&gt;Postman&lt;/a&gt; or &lt;a href="https://curl.haxx.se/"&gt;CURL&lt;/a&gt; ignore &lt;a href="https://www.html5rocks.com/en/tutorials/cors/"&gt;CORS&lt;/a&gt; happily.&lt;/p&gt; 
&lt;h3&gt;None, One or All, but not Some&lt;/h3&gt; 
&lt;p&gt;There's another trouble with &lt;a href="https://auth0.com/blog/cors-tutorial-a-guide-to-cross-origin-resource-sharing/"&gt;CORS&lt;/a&gt;: The specification only allows for no-access, all-access (using * as value for &lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt;, with &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Origin"&gt;restrictions&lt;/a&gt;) or one specific domain, but not a list of domains.&lt;/p&gt; 
&lt;p&gt;Mozilla &lt;a href=""&gt;writes&lt;/a&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Limiting the possible &lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt; values to a set of allowed origins requires code on the server side to check the value of the &lt;code&gt;Origin&lt;/code&gt; request header, compare that to a list of allowed origins, and then if the &lt;code&gt;Origin&lt;/code&gt; value is in the list, to set the &lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt; value to the same value as the &lt;code&gt;Origin&lt;/code&gt; value.&lt;/p&gt; 
&lt;/blockquote&gt;</description>
	<link>2020/04/vertx-and-cors.html</link>
	<author>Stephan H. Wissel</author>
	<guid>9e5b7e20-78a3-11ea-a838-e39fbeb58f6a</guid>
	<pubDate>07 April 2020</pubDate>

</item>
<item>
	<title>My Maven starter template</title>
	<description>&lt;p&gt;&lt;a href="https://maven.apache.org/"&gt;Maven&lt;/a&gt; is to Java what &lt;a href="https://www.npmjs.com/"&gt;npm&lt;/a&gt; is to JavaScript. It can be a &lt;a href="https://en.wikipedia.org/wiki/The_Moon_Is_a_Harsh_Mistress"&gt;harsh mistress&lt;/a&gt; or your best companion. It depends&lt;/p&gt; 
&lt;h3&gt;Beyond dependencies and builds&lt;/h3&gt; 
&lt;p&gt;Maven removes the need to download and manages your dependencies. Unfortunately it doesn't come with &lt;code&gt;mvn install &amp;lt;packagename&amp;gt;&lt;/code&gt; like npm (or I haven't learned that yet), so keeping that &lt;code&gt;pom.xml&lt;/code&gt; current is a little &lt;strong&gt;PITA&lt;/strong&gt;. However once we make peace with it, the power of plugins makes development in auto-pilot a breeze. Some of the things you can do:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Generate a project site&lt;/li&gt; 
 &lt;li&gt;Generate various reports: code quality, code coverage&lt;/li&gt; 
 &lt;li&gt;Run unit tests&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Check out the &lt;a href="https://maven.apache.org/plugins/index.html"&gt;complete list&lt;/a&gt; to get an idea. I'm specifically fond of the &lt;a href="https://maven.apache.org/plugins/maven-site-plugin/"&gt;site generation&lt;/a&gt; capability. It allows us to keep your documentation in the same repository as the project, so we have one place less to worry about.&lt;/p&gt; 
&lt;p&gt;We simply add &lt;code&gt;/src/site/&lt;/code&gt; to our project and content can be created in &lt;a href="https://maven.apache.org/plugins/maven-site-plugin/examples/creating-content.html"&gt;multiple formats&lt;/a&gt;. My favorite one is &lt;a href="http://en.wikipedia.org/wiki/Markdown"&gt;Markdown&lt;/a&gt;. Besides my handcrafted pages, I generate reports:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Issue management&lt;/li&gt; 
 &lt;li&gt;Licenses&lt;/li&gt; 
 &lt;li&gt;Plugins&lt;/li&gt; 
 &lt;li&gt;Source code location&lt;/li&gt; 
 &lt;li&gt;Team&lt;/li&gt; 
 &lt;li&gt;JavaDoc&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://pmd.github.io/"&gt;PMD&lt;/a&gt; and CPD&lt;/li&gt; 
 &lt;li&gt;Surefire (Test results) and JaCoCo (Test coverage)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;All this involved a bit of boilerplate in the &lt;code&gt;pom.xml&lt;/code&gt; so I keep a template around,&lt;/p&gt;</description>
	<link>2020/04/my-maven-starter-template.html</link>
	<author>Stephan H. Wissel</author>
	<guid>79430ed0-77e7-11ea-a9f7-b71367f83efe</guid>
	<pubDate>06 April 2020</pubDate>

</item>
<item>
	<title>eMail etiquette - the 60ties are calling</title>
	<description>&lt;p&gt;With &lt;a href="https://www.urbandictionary.com/define.php?term=WFH"&gt;WFH&lt;/a&gt; being en vogue these days, not only &lt;a href="https://jitsi.org/"&gt;video conferencing&lt;/a&gt; and &lt;a href="https://telegram.org/"&gt;chat&lt;/a&gt;, but also &lt;a href="https://en.wikipedia.org/wiki/Email"&gt;eMail&lt;/a&gt;.&lt;br&gt; Dating back to the &lt;a href="https://en.wikipedia.org/wiki/History_of_email"&gt;1960ties&lt;/a&gt;, we had 6 decades to develop etiquette, which seems tobe lost to current users, so here we go again&lt;/p&gt; 
&lt;h3&gt;Addressing&lt;/h3&gt; 
&lt;p&gt;eMail has &lt;code&gt;To&lt;/code&gt;, &lt;code&gt;CopyTo&lt;/code&gt; (also called &lt;code&gt;CC&lt;/code&gt; for &lt;a href="https://en.wikipedia.org/wiki/Carbon_copy"&gt;Carbon Copy&lt;/a&gt;) and &lt;code&gt;BCC&lt;/code&gt; (Blind Carbon Copy) as a means of addressing people. They serve distinct purposes:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;TO&lt;/strong&gt;: This is the person (or people) we want to &lt;strong&gt;act&lt;/strong&gt; on our message, do something, reply etc. A good email has only few names, ideally one. If we have an ongoing eMail thread that involves multiple actors, we most likely use the wrong channel and are better of using collaborative software like &lt;a href="https://www.hcltechsw.com/products/connections"&gt;HCL Connections&lt;/a&gt;, &lt;a href="https://www.hcltechsw.com/products/sametime"&gt;HCL Sametime&lt;/a&gt;, &lt;a href="https://slackhq.com/"&gt;Slack&lt;/a&gt;, &lt;a href="https://products.office.com/en-us/microsoft-teams/group-chat-software"&gt;Teams&lt;/a&gt; or &lt;a href="https://www.salesforce.com/ap/products/chatter/overview/"&gt;Chatter&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;CC&lt;/strong&gt;: People, we think, who should be &lt;em&gt;keept in the loop&lt;/em&gt;. We don't expect any action or reaction of them. A lot of eMail veterans automatically route those messages to a low priority place&lt;br&gt; -- &lt;strong&gt;BCC&lt;/strong&gt;: all receipients here get the message and the rest of the addressies won't know. I used to call it the "mobbing copy". BCC is especially fun when someone there hits "reply all" and reveals the readership. There are few legitimate uses for this. One is distribution lists (see below), the other archive/record keeping. Our external readers don't need to know that your compliance archive has the eMail address compliance@acme.com If we really want someone outside the visible thread to take note - forward the message&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Subject line&lt;/h3&gt; 
&lt;p&gt;It is like &lt;em&gt;a tweet about our content&lt;/em&gt;. The subject needs to justify why it is worth the time and attention to open it. So "Status", "Report" or "Important" don't cut it. Common practise we can see are qualifiers, e.g Opportunity codes or project IDs at the beginning. Something like &lt;code&gt;[T3453]&lt;/code&gt; - makes it easier to filter.&lt;/p&gt; 
&lt;p&gt;The biggest competitor to inbox attention by subject is the sender identity. We probably open a message one or two reporting managers up even with bad subject lines.&lt;/p&gt; 
&lt;h3&gt;Content&lt;/h3&gt; 
&lt;p&gt;Let's keep it &lt;a href="http://five.sentenc.es/"&gt;crisp and short&lt;/a&gt;, best below 5 sentences.&lt;/p&gt; 
&lt;p&gt;We state:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;the information we want to provide&lt;/li&gt; 
 &lt;li&gt;the exact ask what action we expect, from whom and when&lt;/li&gt; 
 &lt;li&gt;name the person "team please look into... " doesn't cut it and is an indicator of a broken process&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If there is a lot of information, it might better live in a Wiki, a project place or even a file share. We then provide the news cast overview and a link - &lt;a href="https://knowyourmeme.com/photos/615323-intensifies"&gt;Would you like to know more?&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;There are &lt;a href="https://blog.hubspot.com/sales/email-etiquette-tips-rules"&gt;some&lt;/a&gt; interesting &lt;a href="https://www.inc.com/business-insider/email-etiquette-rules.html"&gt;cultural differences&lt;/a&gt;. In Anglosaxon or Eastern culture we would politely address the person and add a whiff of smalltalk, something along the lines "hope that finds you well". Germans, Dutch and other Nordics consider this a waste of space and time and consider it as the ultimate courtesy to cut through the chase and get to the point.&lt;/p&gt; 
&lt;p&gt;When we address close co-workers, who value efficiency, it even is OK to skip the greeting. We need to dread carefully here, it needs to be clarified otherwise it is seen ultra rude.&lt;/p&gt; 
&lt;h3&gt;Replies&lt;/h3&gt; 
&lt;p&gt;Do we reply to the sender or all of the addressies together. It seems to be the default for many "replyToAll". This is especially hillarious when a distribution list sneaked on the addressies. The rationale here is: &lt;em&gt;the sender wanted to keep all these in the loop, so I won't break it&lt;/em&gt;. For a small group, I hit replyAll, for larger ones only reply.&lt;/p&gt; 
&lt;p&gt;I would wish the eMail software would warn when you blast a reply. The guardian &lt;a href="https://www.theguardian.com/culture/2017/feb/03/when-is-it-appropriate-to-reply-all-mostly-never"&gt;agrees&lt;/a&gt;: don't replyAll.&lt;/p&gt; 
&lt;p&gt;A special mention: cherry-picking replies. We hit reply all and remove the mailing lists - good. We just remove the project manager we compete with - bad. So we need to be careful of the ramifications. Other receipients might wonder: &lt;em&gt;why are Jane and Joe no longer in this conversation?&lt;/em&gt;&lt;/p&gt; 
&lt;h3&gt;Distribution lists&lt;/h3&gt; 
&lt;p&gt;They firmly belong in BCC - avoids ReplyAll armageddon. When we use private distribution list, we need to make sure, they resolve before sending otherwise people can't reply. However - most likely - that group of people would be better served with a shared channel. A good strategy: we put it in BCC, write a two sencent summary and provide a link to the full info. Co-workers who are not into eMail will find in in their [insert the collaborative tool you use]&lt;/p&gt; 
&lt;p&gt;As usual YMMV&lt;/p&gt;</description>
	<link>2020/03/email-etiquette.html</link>
	<author>Stephan H. Wissel</author>
	<guid>b2cd0400-7001-11ea-9c0e-65de6ddf10e2</guid>
	<pubDate>27 March 2020</pubDate>

</item>
<item>
	<title>Running Java applications with Notes on macOS</title>
	<description>&lt;p&gt;My main work computer is a MacBook running macOS. Thank to &lt;a href="https://amzn.to/2QkhsA9"&gt;Logitech&lt;/a&gt;, they keyboard is just fine. As you know macOS neither features Domino Designer or Domino Admin. For &lt;a href="https://stwissel.github.io/presentations/engage2020/index.html"&gt;recent development&lt;/a&gt; I wanted to make sure that my applications can run on the client (I've done &lt;a href="/blog/2014/07/adventures-with-vertx-64bit-and-the-ibm-notes-client.html"&gt;that before&lt;/a&gt;).&lt;/p&gt; 
&lt;h3&gt;Java, Java on the wall, what's the right path of them all?&lt;/h3&gt; 
&lt;p&gt;(Sorry Schneewitchen)&lt;/p&gt; 
&lt;p&gt;In Notes/Domino &lt;a href="https://www.ibm.com/support/knowledgecenter/SSKTMJ_9.0.1/admin/over_whats_new_in_fp8.html"&gt;R9.0.1FP8&lt;/a&gt; - (client FP10) the Java runtime was updated to Java8 and in &lt;a href="https://help.hcltechsw.com/domino/11.0.0/wn_new_java_runtime_environment.html"&gt;R11&lt;/a&gt; changed to AdoptOpenJDK.&lt;/p&gt; 
&lt;p&gt;On macOS that led to a particular situation. The jvm packaged with the &lt;code&gt;HCL Notes.app&lt;/code&gt; can be found in the path&lt;br&gt; &lt;code&gt;HCL Notes.app/jre/Contents/Home&lt;/code&gt; with &lt;code&gt;bin&lt;/code&gt;, &lt;code&gt;lib&lt;/code&gt; and &lt;code&gt;lib/ext&lt;/code&gt; as we can expect from a JVM. Suspiciously absent are &lt;code&gt;Notes.jar&lt;/code&gt;, &lt;code&gt;websvc.jar&lt;/code&gt; and &lt;code&gt;njempcl.jar&lt;/code&gt;. They can be located at &lt;code&gt;HCL Notes.app/Contents/MacOS.jvm/lib/ext&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;While this isn't an issue for the Notes client, it is an obstacle when you try to run an external jar file. &lt;code&gt;java -jar somejar.jar&lt;/code&gt; ignores any classpath setting outside the JVM and only loads resources from the default JBM path (lib/ext).&lt;/p&gt; 
&lt;p&gt;I suspect the separation was neccesary due to the &lt;a href="https://adoptopenjdk.net/"&gt;AdoptOpenJDK&lt;/a&gt; distribution rules.&lt;/p&gt; 
&lt;p&gt;To solve this, we can use a start script that creates a &lt;a href="http://man7.org/linux/man-pages/man1/ln.1.html"&gt;symbolic link&lt;/a&gt; in the right place. Takeing the usual suspects like &lt;code&gt;DYLD_LIBRARY_PATH&lt;/code&gt; and &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt; into account we end with a script like this:&lt;/p&gt; 
&lt;pre class="brush: bash"&gt;#!/bin/bash
# MacOS Keep Starter file
# Keep locations - update as needed - leave the TLS stuff empty if you don't have it
export KEEPJAR=$HOME/keep/projectkeep.jar
export LOG_DIR=$HOME/keep/logs
export TLSFile=$HOME/keep/private/demoserver.projectkeep.io.pfx
export TLSPassword=supersecret

# Don't change anything below unless you are sure what you are doing
# Java files places unfortunately troublesome, so we link some
cd /Applications/HCL\ Notes.app/jre/Contents/Home/lib/ext
export SRCDIR="../../../../../Contents/MacOS/jvm/lib/ext"
if [ ! -f njempcl.jar ]; then
	ln -s $SRCDIR/njempcl.jar .
    echo "Linked njempcl.jar"
fi
if [ ! -f Notes.jar ]; then
	ln -s $SRCDIR/Notes.jar .
    echo "Linked Notes.jar"
fi
if [ ! -f websvc.jar ]; then
	ln -s $SRCDIR/websvc.jar .
    echo "Linked websvc.jar"
fi

# Local Keep Server
export DEBUG=true
export PATH=/Applications/HCL\ Notes.app/Contents/MacOS:$PATH
export JAVA_HOME=/Applications/HCL\ Notes.app/jre/Contents/Home
export GodMode=true
export DYLD_LIBRARY_PATH=/Applications/HCL\ Notes.app/Contents/MacOS
export LD_LIBRARY_PATH=/Applications/HCL\ Notes.app/Contents/MacOS
echo $LD_LIBRARY_PATH ..
cd $HOME/Library/Application\ Support/HCL\ Notes\ Data
/Applications/HCL\ Notes.app/jre/Contents/Home/bin/java -jar $KEEPJAR
cd ~
echo Done!

&lt;/pre&gt; 
&lt;p&gt;This script presumes thay we have admin permissions. We could contemplate to check for existing symbolic links and remove the ones we did set. I decided, that smells too much like &lt;a href="https://martinfowler.com/bliki/Yagni.html"&gt;YAGNI&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;As usual: YMMV&lt;/p&gt;</description>
	<link>2020/03/running-java-applications-with-notes-on-macos.html</link>
	<author>Stephan H. Wissel</author>
	<guid>f866de10-67a4-11ea-af28-77b6769d4987</guid>
	<pubDate>17 March 2020</pubDate>

</item>
<item>
	<title>OData - the fine print</title>
	<description>&lt;p&gt;For an &lt;a href="https://stwissel.github.io/presentations/engage2020/index.html"&gt;upcoming event&lt;/a&gt; I had to dig a little deeper into &lt;a href="https://www.odata.org/"&gt;OData&lt;/a&gt; and learned a few things along the lines.&lt;/p&gt; 
&lt;h3&gt;Same but different&lt;/h3&gt; 
&lt;p&gt;OData's current version is &lt;a href="http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html"&gt;4.0&lt;/a&gt; and that's the only version I will focus on in this article.&lt;/p&gt; 
&lt;p&gt;OData is the love child of an effort that joined Microsoft and SAP &lt;a href="https://www.frankensteins-laboratory.com/home-page"&gt;at the hip&lt;/a&gt; to create an universal internet data access standard, that on first sight has a lot of &lt;a href="https://en.wikipedia.org/wiki/Not_invented_here"&gt;NIH&lt;/a&gt; issues to sort out. But I'm sure on a second (or third or forth) look it will all make sense.&lt;/p&gt; 
&lt;h3&gt;Key components of OData&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;a service document in &lt;code&gt;JSON&lt;/code&gt; format. It describes what data endpoints are available and where. Depending on the requested scope (more on that later) that JSON contains different levels of details&lt;/li&gt; 
 &lt;li&gt;a meta data document. That document is referenced in the service document. The format is &lt;code&gt;XML&lt;/code&gt;. It describes the data format found in each record, relations to other record and actions that can be taken. Looks like &lt;a href="https://en.wikipedia.org/wiki/XML_schema"&gt;XML Schema&lt;/a&gt;, but not quite. &lt;em&gt;Record&lt;/em&gt; is used loosely here, data can be hierarchical and nested&lt;/li&gt; 
 &lt;li&gt;a query language squeezed into an URL, so data can be fetched using &lt;code&gt;HTTP GET&lt;/code&gt; without using a body submitted. Query allows data selections, filtering, output size and sorting to be specified&lt;/li&gt; 
 &lt;li&gt;Query results in JSON format enhanced with &lt;a href="http://docs.oasis-open.org/odata/odata-json-format/v4.01/odata-json-format-v4.01.html"&gt;OData specific Metadata&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;What I liked a lot: &lt;a href="https://www.odata.org/"&gt;OData.org&lt;/a&gt; offers a rich set of documentation and tutorials, including a &lt;a href="https://www.postman.com/"&gt;Postman&lt;/a&gt; collection to learn&lt;/p&gt; 
&lt;h3&gt;Happy soup&lt;/h3&gt; 
&lt;p&gt;So dealing with OData you can enjoy a mix of technologies:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;JSON for service document and payloads&lt;/li&gt; 
 &lt;li&gt;XML for meta data&lt;/li&gt; 
 &lt;li&gt;a dot notation (like dotNet or Java) for property values like data types (go &lt;a href="https://www.odata.org/getting-started/understand-odata-in-6-steps/"&gt;learn about it&lt;/a&gt;). E.g. &lt;code&gt;Edm.String&lt;/code&gt; defines a String value or &lt;code&gt;Org.OData.Core.V1.ResourcePath&lt;/code&gt; the path to data&lt;/li&gt; 
 &lt;li&gt;another query language&lt;/li&gt; 
 &lt;li&gt;individual items by default get addressed in an uncommon format: &lt;code&gt;serviceurl/People('johndoe')&lt;/code&gt;. Luckily this is optional and you can use the more common format for a route: &lt;code&gt;serviceurl/People/johndoe&lt;/code&gt;. This seems to be born out of squezing the &lt;em&gt;square pin&lt;/em&gt; URL into the &lt;em&gt;round hole&lt;/em&gt; of database schemas and flexible primary keys&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;On the upside: Your Salesforce and Excel users will love it. Import and CRUD operations are well supported.&lt;/p&gt; 
&lt;p&gt;Initially I was looking at &lt;a href="http://olingo.apache.org/"&gt;Apache Olingo&lt;/a&gt; to implement my needs. Unfortunately the library is too close to the Java servlet model and static defined data models (like your one application, not your data platform), so I disected my needs the hard way.&lt;/p&gt; 
&lt;h3&gt;Lessons learned along the way&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;A OData client (think Excel, Tableau, Salesforce) will initially connect to the service document url. It sends a &lt;code&gt;GET&lt;/code&gt; request. To specify what level of detail is required the &lt;code&gt;ACCEPT&lt;/code&gt; header is used. So when testing your provider implementation you need to take that into account&lt;/li&gt; 
 &lt;li&gt;Excel sends &lt;code&gt;ACCEPT application/json;odata.metadata=minimal&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Salesforce sends &lt;code&gt;ACCEPT application/json;odata.metadata=full&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;OpenAPI can specify the top level &lt;code&gt;application/json&lt;/code&gt; or the full qualified content type in the response. If you fully qualify it, you might end up with a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/406"&gt;406&lt;/a&gt; and wonder what happens&lt;/li&gt; 
 &lt;li&gt;The meta data url gets specified in your service document and is usually the service document url extended by &lt;code&gt;/$metadata&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;I ran into a potential Salesforce bug, where the meta data URL was ignored and the service document URL extended by &lt;code&gt;$metadata&lt;/code&gt;. Note the missing &lt;code&gt;/&lt;/code&gt;. Caused a bit of grief since Excel does &lt;code&gt;/$metadata&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Everything is case sensitive, which makes sense, but is fun in Domino that treats item names case insensitive&lt;/li&gt; 
 &lt;li&gt;I couldn't get Salesforce to play nice until I added a field &lt;code&gt;ExternalId&lt;/code&gt; to my form. Might be my lack of understanding how to change the primary key Salesforce will play nice with or something missing in my Metadata&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Same, same, but different&lt;/h3&gt; 
&lt;p&gt;Swap out the GET for a POST and the XML for something not-quite-JSON and you get &lt;a href="https://graphql.org/"&gt;GraphQL&lt;/a&gt; that tries to address a similar set of functionalities. We really love wheels reinvented&lt;/p&gt; 
&lt;p&gt;More lessons to be learned, stay tuned!&lt;/p&gt;</description>
	<link>2020/03/odata-the-fine-print.html</link>
	<author>Stephan H. Wissel</author>
	<guid>3f7c2eb0-5920-11ea-bc53-e13ee52fcb38</guid>
	<pubDate>04 March 2020</pubDate>

</item>
<item>
	<title>Domino Administration Back to Basics (Part 2) - Networking</title>
	<description>&lt;p&gt;In &lt;a href="/blog/2020/02/domino-administration-back-to-basics-part-1.html"&gt;Part 1&lt;/a&gt; we learned about the marvelous world of Notes Names, &lt;a href="https://en.wikipedia.org/wiki/X.400"&gt;X400&lt;/a&gt; and the perils of messing with certificates. One big difference to &lt;a href="https://en.wikipedia.org/wiki/X.509"&gt;X509&lt;/a&gt; is the (&lt;a href="https://github.com/IBM/domino-docker"&gt;almost&lt;/a&gt;) absence of certificate &lt;a href="https://www.openssl.org/"&gt;Command Line tools&lt;/a&gt; that can be &lt;a href="https://www.wissel.net/blog/2019/10/create-your-own-ca.html"&gt;so much fun&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Domino Networking - protocols &lt;a href="https://en.wikipedia.org/wiki/As_You_Like_It"&gt;as you like it&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Domino predates the rise of &lt;a href="https://en.wikipedia.org/wiki/Internet_protocol_suite"&gt;TCP/IP&lt;/a&gt; and the internet. To no surprise it has its own idea about networking. Starting with protocol support:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/NetBIOS_Frames"&gt;Netbios&lt;/a&gt; using &lt;a href="https://en.wikipedia.org/wiki/Network_Driver_Interface_Specification"&gt;NDIS&lt;/a&gt; (doesn't route) and&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/IPX/SPX"&gt;IPX/SPX&lt;/a&gt; A protocol from days long past, when red boxes weren't Redhat but Novell&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://help.hcltechsw.com/notes/11.0.0/locacc_direct_dialup_loc_conn_t.html"&gt;X.PC DialUp&lt;/a&gt; - Yes. A modem or something that takes &lt;a href="https://en.wikipedia.org/wiki/Hayes_command_set"&gt;modem commands&lt;/a&gt; and will establish a serial connection, no longer ships with Notes&lt;/li&gt; 
 &lt;li&gt;A few more obscure protocols: Vines, SPXII&lt;/li&gt; 
 &lt;li&gt;last not least TCP/IP&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Having this zoo of protocols, Notes needs its own version of name resolution. That version is called &lt;a href="https://help.hcltechsw.com/domino/11.0.0/conf_settingupnotesnamednetworks_t.html"&gt;Notes Named Network&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;One step back: What makes a Notes Domain?&lt;/h3&gt; 
&lt;p&gt;A &lt;strong&gt;Notes Domain&lt;/strong&gt; consists out of one or more server that use a Domino directory (a.k.a Public Name &amp;amp; Addressbook a.k.a &lt;code&gt;names.nsf&lt;/code&gt;) with the same replica id (a story for another time) as the other member servers &lt;strong&gt;and&lt;/strong&gt; have the same Domain name in their server document (that's where most of the server's setting are stored).&lt;/p&gt; 
&lt;p&gt;A popular point of confusion: Notes Names (from Part1) and Notes Domains: It is quite common to name your Domain after your orgID, but not mandatory. SO you could have &lt;code&gt;HeavyRock/Acme@Acme&lt;/code&gt; or &lt;code&gt;Sandstone/Acme@ToonsInc&lt;/code&gt; or &lt;code&gt;Machine/Blowup@Acme&lt;/code&gt; The first and the last would be in the same Domain, while the first and second share the Org certifier. Anything goes, but to keep it simple, keep OrgId and Domain the same - unless you have 5 good reasons not to.&lt;/p&gt; 
&lt;p&gt;Another one: &lt;strong&gt;NEVER&lt;/strong&gt; name your Notes Domain so it could be mistaken for an internet Domain. So no &lt;code&gt;.&lt;/code&gt; in the name. Spaces interestingly are OK!&lt;/p&gt;</description>
	<link>2020/02/domino-administration-back-to-basics-part-2.html</link>
	<author>Stephan H. Wissel</author>
	<guid>c08a0d10-4750-11ea-908b-599e50444f0f</guid>
	<pubDate>05 February 2020</pubDate>

</item>
<item>
	<title>Domino Administration - Back to Basics (Part 1) - Certificates</title>
	<description>&lt;p&gt;Domino is different, a lot of its concepts predate the internet and quite often inspired the standards. This is not an step-by-step instruction, but an introduction into concepts. The "step by step" approach is another story for another time.&lt;/p&gt; 
&lt;h3&gt;In the beginning was the Certificate&lt;/h3&gt; 
&lt;p&gt;Notes and Domino run &lt;a href="https://help.hcltechsw.com/domino/11.0.0/plan_certifieridsandcertificates_c.html"&gt;using ID&lt;/a&gt; files. This are not merly files that can arbitrarily reconstructed, but cryptographically created &lt;a href="https://en.wikipedia.org/wiki/Public-key_cryptography"&gt;Public Private key pairs&lt;/a&gt;. To avoid naming collisions the key names are hierarchical (Since R2), so anyone can call their server &lt;strong&gt;Server1&lt;/strong&gt; without confusion (sort of). This hierarchy is achieved using &lt;a href="https://en.wikipedia.org/wiki/X.400"&gt;X400&lt;/a&gt; naming conventions, an early competitor to DNS naming. A X400 name can consist out of multiple parts, these are the ones Domino is using:&lt;/p&gt; 
&lt;p&gt;&lt;img src="/blog/images/2020/X400Names.png" alt="X500 Name"&gt;&lt;/p&gt; 
&lt;p&gt;So the minimum is a common name and an Org. The starting point of each Domino journey is the creation of the OrgID. All other parts depend on it. Note: there isn't a country ID, even if country mentioned after the Org. When you create your OrgID (while setting up the very first server), you can specify the country and it becomes part of the OrgID.&lt;/p&gt; 
&lt;p&gt;In practise however I haven't seen many OrgIDs that would carry a country code in them. So you can skip that part.&lt;/p&gt; 
&lt;h3&gt;Signing Ids&lt;/h3&gt; 
&lt;p&gt;Using the OrgID as signing certificat, one can go and create server and user certificates. E.g using the OrgID &lt;code&gt;/O=Acme&lt;/code&gt; one can create &lt;code&gt;/CN=Coyotee/O=Acme&lt;/code&gt;. For convenience the qualifiers are usually omitted, their meaning results from the position (and the fact that country is 2 letter if present and Orgs have 3 or more). So instead of &lt;code&gt;/CN=Coyotee/O=Acme&lt;/code&gt; one can write &lt;code&gt;Coyotee/Acme&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;In practise however more enlightened organisation use their OrgCert as cautiously as root certificates in the &lt;a href="https://en.wikipedia.org/wiki/X.509"&gt;X509&lt;/a&gt; world and only &lt;a href="https://help.hcltechsw.com/domino/11.0.0/othr_registeringanorganizationalunitcertifieriddialogbo_t.html"&gt;register/sign&lt;/a&gt; Organizational Unit (&lt;code&gt;/OU=&lt;/code&gt;) Ids which then can be used to sign server and user certificates.&lt;/p&gt; 
&lt;p&gt;Trust between certificate is hierarchical, similar to Internet certificates, so IDs having the same root (/O) certifier recognizse each other. The hierachy can be used in Access Control (another story for another time) to grant access to all IDs at a given level e.g. &lt;code&gt;/OU=Management/O=Acme&lt;/code&gt;&lt;/p&gt;</description>
	<link>2020/02/domino-administration-back-to-basics-part-1.html</link>
	<author>Stephan H. Wissel</author>
	<guid>c136bf10-4714-11ea-8b49-d54a8f36cab2</guid>
	<pubDate>04 February 2020</pubDate>

</item>
<item>
	<title>Generating JWT tokens for tests</title>
	<description>&lt;p&gt;There are many options for &lt;a href="https://auth0.com/docs/authorization/concepts/authz-and-authn"&gt;Authentication and Authorisation&lt;/a&gt;. I'm fond of &lt;a href="https://jwt.io/"&gt;Json Web Tokens&lt;/a&gt; (JWT), implementing &lt;a href="https://tools.ietf.org/html/rfc7519"&gt;RFC7519&lt;/a&gt;. Mostly because they are like &lt;a href="https://en.wikipedia.org/wiki/IBM_Lightweight_Third-Party_Authentication"&gt;LTPA&lt;/a&gt; ~~for grownups~~, but standard compliant&lt;/p&gt; 
&lt;h3&gt;Quis custodiet ipsos custodes?&lt;/h3&gt; 
&lt;p&gt;JWT contains information that is digitally signed (and optional encrypted), so a receiving end can verify that the information is correct. The key elements here are:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;the JWT contains a claim, at least the &lt;strong&gt;subject&lt;/strong&gt; that is tamper resistant by being digitally signed&lt;/li&gt; 
 &lt;li&gt;JWT issuer and JWT consumer trust each other, by either having a shared secret (bad idea) or using a public/private key pair. The issuer signs the information with a private key. The consumer (your application server) verifies the signature using the public key&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;So besides protecting the private key of the issuer, you also want to be clear who's keys you trust. The one who &lt;a href="https://en.wikipedia.org/wiki/Quis_custodiet_ipsos_custodes"&gt;holds your identity&lt;/a&gt; can impersonate you at any time (so you might rethink if "Login with Facebook" is such a brilliant idea after all).&lt;/p&gt; 
&lt;p&gt;However when &lt;strong&gt;testing&lt;/strong&gt; systems, you develop local, you want to be able to have any user at your disposal, so you can generate the claim that is the &lt;a href="https://en.wikipedia.org/wiki/Open_sesame"&gt;Open Sesame&lt;/a&gt; to your test regime&lt;/p&gt; 
&lt;h3&gt;Building a claim&lt;/h3&gt; 
&lt;p&gt;We start by building the raw claim &lt;strong&gt;template.json&lt;/strong&gt; file:&lt;/p&gt; 
&lt;pre class="brush: javascript"&gt;{
  "iss": "Alibaba Caves",
  "aud": "40Thiefs",
  "expSeconds": 300
}
&lt;/pre&gt; 
&lt;p&gt;It contains an issuer, an audience and the duration in seconds. The later one is for my convenience. The receiving system might or might not check issuer (iss) and/or audience (aud).&lt;/p&gt; 
&lt;p&gt;Next step is to create a public/private key pair&lt;/p&gt;</description>
	<link>2020/01/generating-jwt-tokens-for-tests.html</link>
	<author>Stephan H. Wissel</author>
	<guid>955d04d0-445d-11ea-a785-85867ba0af46</guid>
	<pubDate>01 February 2020</pubDate>

</item>

</channel>
</rss>
