<?xml version="1.0"?>
<rss version="2.0">
<channel>
	<title>wissel.net Usability - Productivity - Business - The web - Singapore and Twins</title>
	<link>https://wissel.net/blog/stories.rss</link>
	<description>Thoughts, Insights and Opinions of Stephan H. Wissel. Topics included: IBM Lotus Notes and Domino, IBM Websphere, other IBM Lotus stuff,  J2EE, .Net, Software Archtecture, Personcentric Development, Agile Software, SDLC, Singapore and my Twins</description>
	<language>en,de</language>
	<copyright>(C) 2003 - 2018 Stephan H. Wissel, All rights reserved</copyright>
	<pubdate>Sat, 23 Feb 2019 07:02:00 +0000</pubdate>
<item>
	<title>From Excel to package.xml</title>
	<description>&lt;p&gt;Cleaning up an org that has gone through several generations of ownership and objectives is fun. Some tooling helps&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#data-frugality" id="data-frugality"&gt;Data frugality&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;A computing principle, very much the anathema to Google and Facebook, is &lt;a href="https://martinfowler.com/bliki/Datensparsamkeit.html"&gt;Data Frugality&lt;/a&gt;, storing only what you actually need. It is the data equivalent to coders' &lt;a href="https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it"&gt;YAGNI&lt;/a&gt; principle. Latest since &lt;a href="http://ec.europa.eu/justice/newsroom/data-protection/infographic/2017/index_en.htm"&gt;GDPR&lt;/a&gt; it got center stage attention.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#your-cleanup-plan" id="your-cleanup-plan"&gt;Your cleanup plan&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;So your cleanup exercise has a few steps:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Find fields that don't have any data. You can use tools like &lt;a href="https://appexchange.salesforce.com/appxListingDetail?listingId=a0N30000003HSXEEA4"&gt;Field Trip&lt;/a&gt; to achieve that&lt;/li&gt; 
 &lt;li&gt;Verify that these fields are not "about to be used", but "really obsolete"&lt;/li&gt; 
 &lt;li&gt;Add all the fields that did have some data, left over but unused&lt;/li&gt; 
 &lt;li&gt;Add fields that contain data legal told you to get rid off&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The absolute standard approach, of any consultant I have encountered, is to fire up an Excel sheet and track all fields in a list, capture insights in the &lt;code&gt;remarks&lt;/code&gt; column and have another column that indicates &lt;code&gt;can be deleted&lt;/code&gt; Status. Something like &lt;code&gt;Yes,No,Investigating&lt;/code&gt; or "Call Paul to clarify". I would be surprised if there's a different approach.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#excel-as-source" id="excel-as-source"&gt;Excel as source&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;In a current project the consultant neatly created one sheet (that's the page, not the file) per object, labeled with the object name, containing rows for all custom fields. Then the team went off to investigate. In result they identified more than one thousand fields to be deleted.&lt;/p&gt; 
&lt;p&gt;Now to actually get rid of the fields, you could &lt;a href="https://www.mturk.com/"&gt;outsource&lt;/a&gt; some manual labor to either go into you org or use Copy-Paste to create a &lt;code&gt;destructivechanges.xml&lt;/code&gt; package file for use with the &lt;a href="https://developer.salesforce.com/docs/atlas.en-us.daas.meta/daas/daas_destructive_changes.htm"&gt;Salesforce ANT tool&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;In any case: the probability that there will be errors in transferring is approximately 100%. The business owner will point to: I signed off that spreadsheet and not that XML file?. and finger pointing begins.&lt;/p&gt; 
&lt;p&gt;There must be a better way!&lt;/p&gt;</description>
	<link>2019/02/from-excel-to-package.xml.html</link>
	<author>Stephan H. Wissel</author>
	<guid>e66be7a0-3730-11e9-89cf-09a347326aff</guid>
	<pubDate>23 February 2019</pubDate>

</item>
<item>
	<title>Draining the happy soup - Part 3</title>
	<description>&lt;p&gt;In &lt;a href="/blog/2019/02/draining-the-happy-soup-part-2.html"&gt;Part 2&lt;/a&gt; we had a look at the plan. Now it is time to put it into motion. Let's setup our project structure&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#put-some-order-in-your-files" id="put-some-order-in-your-files"&gt;Put some order in your files&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Our goal is to distribute happy soup artifacts into packages. In this installment we setup the directory structure for that. Sticking to a clear structure makes it easier to get a step closer to package Nirvana step by step.&lt;/p&gt; 
&lt;p&gt;&lt;img src="/blog/images/2019/SFDXDirectoryStructure.jpg" alt="Proposed directory structure"&gt;&lt;/p&gt; 
&lt;p&gt;Let me run through some of the considerations:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;I'll keep all packages inside a single directory structure. Name the root after your org. What might pose a challenge is to name it &lt;code&gt;sfdx&lt;/code&gt; - too close to that hidden directory &lt;code&gt;.sfdx&lt;/code&gt; that does exist in your home directory and might exist in the project directories&lt;/li&gt; 
 &lt;li&gt;You could keep the whole tree in a single repository or subject each package directory to its own repository. I'd prefer the later, since it allows a developer to pull only the relevant directories from source control (That's Option B)&lt;/li&gt; 
 &lt;li&gt;The base directory, containing the artifacts that won't be packaged shall be named &lt;code&gt;HappySoup&lt;/code&gt;. While it is a rather colloquial term, it is well established&lt;/li&gt; 
 &lt;li&gt;I'm a little old fashioned when it comes to directory names: no spaces, double byte characters (that includes ?) or special characters&lt;/li&gt; 
 &lt;li&gt;You need to pay attention to &lt;code&gt;sfdx-project.json&lt;/code&gt; and &lt;code&gt;.sfdx&lt;/code&gt; as well as &lt;code&gt;.gitignore&lt;/code&gt;. More and that below&lt;/li&gt; 
 &lt;li&gt;When you have mixed OS developer communities using Windows, MAC or Linux, directory delimiters could become a headache. My tongue-in-cheek recommendation for Windows would be to use &lt;a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10"&gt;WSL&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;a href="#key-files-and-directories" id="key-files-and-directories"&gt;Key files and directories&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Initially you want to divide, but not yet package. So your projects need to know about each other. Higher level packages, that in future will depend on base packages need to know about them and each package needs to know about the &lt;code&gt;HappySoup&lt;/code&gt;. To get there I adjust my &lt;code&gt;sfdx-project.json&lt;/code&gt;:&lt;/p&gt; 
&lt;pre class="brush: js"&gt;{
"packageDirectories" : [
    { "path": "force-app", "default": true},
    { "path" : "../ObjectBase/force-app" },
    { "path" : "../HappySoup/force-app" }
  ],
"namespace": "",
"sfdcLoginUrl" : "https://login.salesforce.com",
"sourceApiVersion": "45.0"
}
&lt;/pre&gt; 
&lt;p&gt;The key here are the relative path entries like &lt;code&gt;../HappySoup/force-app&lt;/code&gt;. When you use &lt;code&gt;sfdx force:source:push&lt;/code&gt; the content gets pushed to your scratch org, so it is complete. When you use &lt;code&gt;sfdx force:source:pull&lt;/code&gt; changes you made are copied down to the default path, so the adjacent projects remain as is.&lt;/p&gt; 
&lt;p&gt;When using &lt;code&gt;pull&lt;/code&gt; and &lt;code&gt;push&lt;/code&gt; from &lt;a href="https://developer.salesforce.com/tools/extension_vscode"&gt;VSCode&lt;/a&gt; it will use the default user name configured for SFDX. To ensure that you don't push to or pull from the wrong place, you need to create one scratch org each using &lt;code&gt;sfdx force:org:create --f config/project-scratch-def.json -a [ScratchOrgAlias]&lt;/code&gt; and then execute &lt;code&gt;sfdx force:config:set defaultusername=[ScratchOrgAlias]&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;The command will create a &lt;code&gt;.sfdx&lt;/code&gt; directory and config files inside in your project. Unless all developers checking out that repository use the same aliases (unlikely), you want to add &lt;code&gt;.sfdx&lt;/code&gt; to your &lt;a href="https://github.com/forcedotcom/sfdx-simple/blob/master/.gitignore"&gt;.gitignore&lt;/a&gt; file.&lt;/p&gt; 
&lt;p&gt;Now you are all set to move files from the happy soup to future package directories. With the relative path in your &lt;code&gt;sfdx-project.json&lt;/code&gt; no packaging is required now and you still can get a fully functioning scratch org.&lt;/p&gt; 
&lt;p&gt;One pro tip: instead of relying on individual scratch definition files, you might opt to use the one in the happy soup, so all your scratches have the same shape.&lt;/p&gt; 
&lt;p&gt;Next stop: building the solution before you package. As usual YMMV.&lt;/p&gt;</description>
	<link>2019/02/draining-the-happy-soup-part-3.html</link>
	<author>Stephan H. Wissel</author>
	<guid>fa70b9a0-363c-11e9-bcba-578350efc416</guid>
	<pubDate>22 February 2019</pubDate>

</item>
<item>
	<title>Draining the happy soup - Part 2</title>
	<description>&lt;p&gt;We stormed ahead in &lt;a href="/blog/2019/02/draining-the-happy-soup-part-1.html"&gt;Part 1&lt;/a&gt; and downloaded all the meta data in SFDX format. Now it's time to stop for a moment and ask: what's the plan?&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#you-need-a-plan" id="you-need-a-plan"&gt;You need a plan&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;When embarking on the SFDX package journey, the start is Phase 0. You have an org that contains all your meta data and zero or more (managed) packages from &lt;a href="https://appexchange.salesforce.com/"&gt;AppExchange&lt;/a&gt;. That's the &lt;a href="https://vignette.wikia.nocookie.net/shrek/images/5/58/Fc19d7db9cbcb7659aae3dce7bf6b3c1.jpg/revision/latest?cb=20170129025042"&gt;swamp&lt;/a&gt; you want to drain.&lt;/p&gt; 
&lt;p&gt;&lt;img src="/blog/images/2019/Phase0.jpg" alt="Phase 0 - happy soup"&gt;&lt;/p&gt; 
&lt;p&gt;Before you move to phase 1, you need to be clear how you want to structure your packages. High level could look like this:&lt;/p&gt; 
&lt;p&gt;&lt;img src="/blog/images/2019/Structure.jpg" alt="Structure - happy soup"&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;You have an unpackaged base, that over time will shrink. The interesting challenge is to deal with dependencies there&lt;/li&gt; 
 &lt;li&gt;Some of the components will be used across all system - most likely extensions to standard objects or triggers and utility classes. Core LWC components are good candidates for base packages too. There can be more than one base package&lt;/li&gt; 
 &lt;li&gt;Your business components. Slice them by business function, country specifics or business unit. Most likely will resemble some of your organization structure&lt;/li&gt; 
 &lt;li&gt;A package from AppExchange or a legacy package will not depend on anything. In my current project we moved all VisualForce stuff (pages and controllers) there, since these won't be needed after the lightning migration is concluded and then can be uninstalled easily.&lt;/li&gt; 
&lt;/ol&gt;</description>
	<link>2019/02/draining-the-happy-soup-part-2.html</link>
	<author>Stephan H. Wissel</author>
	<guid>37ce0350-334c-11e9-8f2c-e9611f89e0a8</guid>
	<pubDate>18 February 2019</pubDate>

</item>
<item>
	<title>The Efficiency Paradox</title>
	<description>&lt;p&gt;A common setup in many organizations is to outsource development and/or operation to a system integrator. For agile organizations that can post &lt;a href="https://www.targetprocess.com/blog/agile-outsourcing-get-it-or-forget-it/"&gt;a challenge&lt;/a&gt;. A key is &lt;a href="https://twitter.com/notessensei/status/1096669398574587904"&gt;skillfulness&lt;/a&gt; - how &lt;a href="https://fastgood.cheap/"&gt;fast and good&lt;/a&gt; can it be implemented?&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#does-your-system-integrator-invest-in-efficiency" id="does-your-system-integrator-invest-in-efficiency"&gt;Does your System Integrator invest in efficiency?&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Competition is supposed to keep cost at bay, however customer relation and familiarity with the environment (In Dreamland everything is documented) pose a substantial barrier to entry. A barrier to entry will enable an incumbent vendor to charge more.&lt;/p&gt; 
&lt;p&gt;So an engagement manager might see him/herself confronted with an interesting dynamic.&lt;/p&gt; 
&lt;p&gt;&lt;img src="/blog/images/2019/TheEfficiencyParadox.png" alt="Feedback loop for efficiency"&gt;&lt;/p&gt; 
&lt;p&gt;There are a slow and a fast loop running concurrently. Depending on the planning horizon, the engagement manager might not see the outer loop to the detriment of all participants. Let me walk you through:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Investment in better tools or skills leads to improved efficiency. Work is delivered faster, closer to actual requirements and with less defects&lt;/li&gt; 
 &lt;li&gt;In the short run this leads to a reduction in hours sold (bad for time and material contracts)&lt;/li&gt; 
 &lt;li&gt;A reduction in hours sold leads to reduced profitability since you have more resources sitting on the bench &lt;br&gt;&lt;br&gt;&lt;strong&gt;In conclusion&lt;/strong&gt;: As long as the barrier to entry protects you, investing in efficiency is bad for the bottom line. So investment in efficiency should only be made to keep the barrier to entry high enough (Add you own sarcasm tag here). However there's a longer running loop in motion:&lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Improved efficiency leads to better quality and shorter delivery time. Work is done fast and good (which might justify higher charges per hour)&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt;Getting good quality soon leads to an increase in customer satisfaction. Who doesn't like &lt;a href="https://www.supplyroom.com/us-military/product/46439/"&gt;swift and sure&lt;/a&gt; delivery&lt;/li&gt; 
 &lt;li&gt;Happy customers, especially when delivery times are short, will find an endless stream (only throttled by budget) of additional requirement to implement&lt;/li&gt; 
 &lt;li&gt;Having more and more new requirements coming in, keeps people off the bench and keeps utilization high. High utilization is the base of service profitability&lt;/li&gt; 
 &lt;li&gt;Investment in efficiency is justified&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;This is a nice example of a &lt;a href="https://blog.deming.org/2016/04/systems-thinking-feedback-loops/"&gt;Systems Thinking Feedback Loop&lt;/a&gt;. Conclusions vary on observed time frames.&lt;/p&gt;</description>
	<link>2019/02/the-efficiency-paradox.html</link>
	<author>Stephan H. Wissel</author>
	<guid>76241660-3344-11e9-837e-e390b698660e</guid>
	<pubDate>18 February 2019</pubDate>

</item>
<item>
	<title>Draining the happy soup - Part 1</title>
	<description>&lt;p&gt;Unleashing &lt;a href="https://developer.salesforce.com/docs/atlas.en-us.sfdx_dev.meta/sfdx_dev/sfdx_dev_dev2gp.htm"&gt;unlocked packages&lt;/a&gt; promises to reduce risk, improve agility and drive home the full benefits of &lt;a href="https://developer.salesforce.com/docs/atlas.en-us.sfdx_dev.meta/sfdx_dev/sfdx_dev_intro.htm"&gt;SFDX&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#some-planning-required" id="some-planning-required"&gt;Some planning required&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;I'm following the approach "Throw and see what sticks to the wall". The rough idea: retrieve all meta data, convert it into SFDX format, distribute it over a number of packages and put it back together.&lt;/p&gt; 
&lt;p&gt;To make it more fun I picked an heavily &lt;del&gt;abused&lt;/del&gt; customized and used org with more than 20,000 meta data artifacts (and a few surprises). Follow along.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#learning" id="learning"&gt;Learning&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Trailhead has &lt;a href="https://trailhead.salesforce.com/en/content/learn/modules/unlocked-packages-for-customers"&gt;a module&lt;/a&gt; on unlocked packages on its trail &lt;a href="https://trailhead.salesforce.com/content/learn/trails/sfdx_get_startedhttps://trailhead.salesforce.com/content/learn/trails/sfdx_get_started"&gt;Get Started with Salesforce DX&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;While you are there, check out the (at time of writing the 15) modules on &lt;a href="https://trailhead.salesforce.com/modules#tag=tag-alm"&gt;Application Lifecycle Management&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#downloading" id="downloading"&gt;Downloading&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;The &lt;a href="https://developer.salesforce.com/docs/atlas.en-us.salesforce_app_limits_cheatsheet.meta/salesforce_app_limits_cheatsheet/salesforce_app_limits_platform_metadata.htm"&gt;limits&lt;/a&gt; for retrieving packages (10,000 elements, 39MB zip or about 400 MB raw) posed an issue for my XL org. So I used, growing fond of it, &lt;a href="https://github.com/kgalant/PackageBuilder"&gt;PackageBuilder&lt;/a&gt; to download all sources. It automatically creates multiple package.xml files when you exceed the limits.&lt;/p&gt;</description>
	<link>2019/02/draining-the-happy-soup-part-1.html</link>
	<author>Stephan H. Wissel</author>
	<guid>c6b680f0-305a-11e9-bc80-c5b58f9cd89a</guid>
	<pubDate>14 February 2019</pubDate>

</item>
<item>
	<title>Reporting your validation formulas</title>
	<description>&lt;p&gt;Validation formula are a convenient way to ensure your data integrity. With great powers? comes the risk of alienating users by preventing them entering data.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#why-look-at-them" id="why-look-at-them"&gt;Why look at them?&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;You can easily look at all formula in the Object Manager, but it is tedious to look at every formula one by one. You might ask yourself:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Do all my formula exclude the integration profile?&lt;/li&gt; 
 &lt;li&gt;Are context (e.g. the country) specific formulas set correctly?&lt;/li&gt; 
 &lt;li&gt;Do validation rules follow the naming conventions?&lt;/li&gt; 
 &lt;li&gt;Are messages helpful or intimidating?&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;a href="#extract-and-report" id="extract-and-report"&gt;Extract and report&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;You already use &lt;a href="https://github.com/kgalant/PackageBuilder"&gt;PackageBuilder&lt;/a&gt; to extract objects (and other stuff) as &lt;a href="http://www.xml.org/"&gt;XML&lt;/a&gt;, so it is just a small step: slap all &lt;code&gt;*.object&lt;/code&gt; files into one big file and run an &lt;a href="https://en.wikipedia.org/wiki/XSLT"&gt;XSLT&lt;/a&gt; report over it.&lt;/p&gt; 
&lt;p&gt;Not so fast! If you concatenate XML files using OS copy you end up with three problems:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;You don't have an XML root element. Like the &lt;a href="https://en.wikipedia.org/wiki/Highlander_(film)"&gt;Highlander&lt;/a&gt; - there can be only one. You could sandwich the files in opening and closing tags, but then you have the next problem&lt;/li&gt; 
 &lt;li&gt;XML files start &lt;code&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;&lt;/code&gt; and copying that file will sprinkle that statement multiple times into your result. The XSLT processor will barf&lt;/li&gt; 
 &lt;li&gt;The result will get very big and any report will take a long time or even run out of memory&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;a href="#a-bit-of-tooling" id="a-bit-of-tooling"&gt;A bit of tooling&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;I solved, for my needs, using a small &lt;a href="https://gist.github.com/Stwissel/aeff1c523983ad7a89b33a7d2d67de43"&gt;Java class&lt;/a&gt; and &lt;a href="https://gist.github.com/Stwissel/cc2289fc319f468deacee7ba7649a4e6"&gt;one XSLT stylesheet&lt;/a&gt;. Java because: I'm familiar with it and NodeJS still sucks with XML. XSLT, because: I'm familiar with it (heard that before?) and the styling of the output is independent from the processing step. I presume you know how to initiate an &lt;a href="https://sourceforge.net/projects/saxon/files/Saxon-HE/9.9/"&gt;XSLT 2.0 transformation&lt;/a&gt;.&lt;/p&gt;</description>
	<link>2019/02/reporting-your-validation-formulas.html</link>
	<author>Stephan H. Wissel</author>
	<guid>83a24c00-2af0-11e9-aa3f-a1b759d59560</guid>
	<pubDate>07 February 2019</pubDate>

</item>
<item>
	<title>Avoid the "Clean Code Shock" with PMD</title>
	<description>&lt;p&gt;Your new year resolution includes "&lt;em&gt;Write clean Apex code&lt;/em&gt;". So you run &lt;a href="https://pmd.github.io/"&gt;PMD&lt;/a&gt; with a full ruleset and &lt;a href="/blog/2018/11/cleaning-up-an-apex-codebase-with-pmd.html"&gt;get shocked&lt;/a&gt; by the number of violations. You drop the resolution in a blink.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#dont-boil-the-ocean" id="dont-boil-the-ocean"&gt;Don't boil the Ocean&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Even a journey of a thousand miles &lt;a href="https://despair.com/collections/demotivators/products/ambition?variant=2457295747"&gt;starts with a single step&lt;/a&gt;, so let's break down the task into manageable chunks to &lt;a href="https://en.wikipedia.org/wiki/Divide_and_rule"&gt;divide and rule&lt;/a&gt;.&lt;br&gt; There are 2 dimensions you can use: &lt;strong&gt;Type of code&lt;/strong&gt; and &lt;strong&gt;priority levels&lt;/strong&gt;. Using them you can turn your &lt;a href="https://amzn.to/2RmMXvp"&gt;Clean Code&lt;/a&gt; journey into manageable stages.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#code-types" id="code-types"&gt;Code Types&lt;/a&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Legacy code: all code that doesn't fall in any of the two other categories&lt;/li&gt; 
 &lt;li&gt;Changed code: code that needs change due to business requirements&lt;/li&gt; 
 &lt;li&gt;New code: new code written for new or changed functionality (applies to copy &amp;amp; paste too)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;a href="#priority-levels" id="priority-levels"&gt;Priority Levels&lt;/a&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;1 = security and performance, will fail build&lt;/li&gt; 
 &lt;li&gt;2 = bad code, will fail build&lt;/li&gt; 
 &lt;li&gt;3 &amp;amp; 4 = hard to maintain code, will generate warning&lt;/li&gt; 
 &lt;li&gt;5 = ugly code, will generate hint&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;PMD rules for code types should have different priorities. A different number of tests will fail a build:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;11 for legacy code (all around performance and security)&lt;/li&gt; 
 &lt;li&gt;33 for changed code&lt;/li&gt; 
 &lt;li&gt;44 for new code&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;This will require to run PMD with different rulesets on &lt;a href="/blog/2018/11/cleaning-up-an-apex-codebase-with-pmd.html"&gt;subsets of your code base&lt;/a&gt;&lt;/p&gt;</description>
	<link>2019/01/avoid-the-clean-code-shock-with-pmd.html</link>
	<author>Stephan H. Wissel</author>
	<guid>5f197330-0e40-11e9-aa45-01ee17350376</guid>
	<pubDate>02 January 2019</pubDate>

</item>
<item>
	<title>Pattern in your Apex Controller</title>
	<description>&lt;p&gt;A (software) &lt;a href="https://en.wikipedia.org/wiki/Software_design_pattern"&gt;design pattern&lt;/a&gt; is a general, reusable solution to a commonly occurring problem withing a given context. &lt;a href="https://en.wikipedia.org/wiki/Christopher_Alexander"&gt;Christoper Alexander&lt;/a&gt; inspired the &lt;a href="https://en.wikipedia.org/wiki/Design_Patterns"&gt;Gang of four&lt;/a&gt; to apply pattern to software and enumerate 23 classic software pattern.&lt;/p&gt; 
&lt;p&gt;This article discusses how to use some of them in the context of &lt;a href="https://en.wikipedia.org/wiki/Salesforce.com#Apex"&gt;Apex&lt;/a&gt; controllers.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#the-context-same-same-but-different" id="the-context-same-same-but-different"&gt;The context: Same same, but different&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;You are creating an application to support construction on force.com that will serve multiple countries. Part of the requirements is to compute a risk score for any given project. While &lt;a href="https://www.iso.org/news/2012/12/Ref1685.html"&gt;ISO standards&lt;/a&gt; form the foundation of the assessment, each jurisdiction has some specialties that alter the logic eventually.&lt;/p&gt; 
&lt;p&gt;This is just one of the requirements, you have many more that follow the &lt;code&gt;pattern&lt;/code&gt; &lt;a href="https://www.samesamebutdifferent.site/2017/08/same-same-but-different-origin/"&gt;Same Same - But different&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#patterns-used" id="patterns-used"&gt;Patterns used&lt;/a&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Interface-based_programming"&gt;Interface based programming&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://msdn.microsoft.com/en-us/library/aa480019.aspx"&gt;Metadata driven application design&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Facade_pattern"&gt;Facade pattern&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Factory_method_pattern"&gt;Factory pattern&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Besides those, you want to know &lt;a href="https://trailhead.salesforce.com/en/search?keywords=%22Apex%20Enterprise%20Patterns%22"&gt;Apex Enterprise Patterns&lt;/a&gt;. Go Trailhead and learn.&lt;/p&gt;</description>
	<link>2018/12/pattern-in-your-apex-controller.html</link>
	<author>Stephan H. Wissel</author>
	<guid>01f2e0e0-0b04-11e9-8f1f-178be3bffe51</guid>
	<pubDate>29 December 2018</pubDate>

</item>
<item>
	<title>Lightning Web Components (LWC) quick overview</title>
	<description>&lt;p&gt;On December 13 Salesforce announced &lt;a href="https://www.salesforce.com/blog/2018/12/introducing-lightning-web-components-with-javascript"&gt;Lightning Web Components&lt;/a&gt; (LWC) a new way to build components on the Salesforce platform. Here is my take.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#expanding-lightning-family" id="expanding-lightning-family"&gt;Expanding Lightning Family&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;"Lightning" serves now as a family name for modern Salesforce development. LWC are the latest family members. We now have:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Lightning Platform: the runtime environment&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.lightningdesignsystem.com/"&gt;Lightning Design System&lt;/a&gt;: providing the visuals&lt;/li&gt; 
 &lt;li&gt;The &lt;a href="https://github.com/forcedotcom/aura"&gt;Aura Framework&lt;/a&gt;: Implementing components for lightning&lt;/li&gt; 
 &lt;li&gt;&lt;a href="http://ng-lightning.github.io/ng-lightning/"&gt;ng-lightning&lt;/a&gt;: Angular components using the Lightning Design System - a open source contribution, not affiliated with commercial Salesforce&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://react.lightningdesignsystem.com/"&gt;Lightning React&lt;/a&gt;: React components using the Lightning Design system&lt;/li&gt; 
 &lt;li&gt;Last not least: &lt;a href="https://developer.salesforce.com/blogs/2018/12/introducing-lightning-web-components.html"&gt;Lightning Web Components&lt;/a&gt; (LWC)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The linked blog entries explain the rationale, so check them out.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#same-but-different" id="same-but-different"&gt;Same but different&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;The look and feel doesn't change, the way you code them does. For now &lt;a href="https://developer.salesforce.com/tools/sfdxcli"&gt;SFDX&lt;/a&gt;, &lt;a href="https://code.visualstudio.com/"&gt;Visual Studio Code&lt;/a&gt; and the &lt;a href="https://marketplace.visualstudio.com/items?itemName=salesforce.salesforcedx-vscode"&gt;Salesforce Extension Pack&lt;/a&gt; are to goto tools for the Spring 2019 release.&lt;/p&gt; 
&lt;p&gt;&lt;img src="/blog/images/2018/ComponentMigration.png" alt="The new file structure 4 instead of 8 files"&gt;&lt;/p&gt; 
&lt;p&gt;Instead of up to 8 files you only need 4. For one: all JavaScript (3 files) now lives in one &lt;a href="http://es6-features.org/"&gt;ES6&lt;/a&gt; JS file and we don't have an auradoc or svg file for now&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#co-existence" id="co-existence"&gt;Co-existence&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Existing &lt;a href="http://www.auraframework.org/"&gt;Aura based&lt;/a&gt; components will continue to work and will even allow to contain LWC components.&lt;/p&gt; 
&lt;p&gt;&lt;img src="/blog/images/2018/ComponentContainment.png" alt="LWC in Aura, but not Aura in LWC"&gt;&lt;/p&gt; 
&lt;p&gt;What you can't do is putting Aura components inside LWC. So your transition to LWC is bottom-up, not top-down&lt;/p&gt;</description>
	<link>2018/12/lwc-quick-overview.html</link>
	<author>Stephan H. Wissel</author>
	<guid>e5f504f0-ff40-11e8-8efb-9b9b4e567902</guid>
	<pubDate>14 December 2018</pubDate>

</item>
<item>
	<title>Salesforce login statistics aggregation</title>
	<description>&lt;p&gt;A recent requirement from a customer was "I'd like to analyze logins by users in Excel", despite a &lt;a href="https://success.salesforce.com/answers?id=90630000000gsJjAAI"&gt;dashboard&lt;/a&gt; approach would be sufficient. With a few million records aggregating in Excel wasn't particularly appealing&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#download-the-log" id="download-the-log"&gt;Download the log&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Salesforce setup allows to download the log as &lt;code&gt;csv&lt;/code&gt; or &lt;code&gt;csv.gz&lt;/code&gt; file. In any case you should use the later. I learned the hard way: the &lt;a href="https://en.wikipedia.org/wiki/Chunked_transfer_encoding"&gt;chunked transfer encoding&lt;/a&gt; might leave you with less data be processed than you expect.&lt;/p&gt; 
&lt;p&gt;The &lt;a href="https://docs.oracle.com/javase/7/docs/api/java/util/Scanner.html"&gt;Scanner&lt;/a&gt; simply stopped after a few thousand entries, while the &lt;a href="https://commons.apache.org/proper/commons-csv/"&gt;csv parser&lt;/a&gt; barfed with an error.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#processing" id="processing"&gt;Processing&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;After downloading and extracting the csv I used a small Java routine (yep, I'm that old) to aggregate logins per user, capturing the count and the first/last login date as well as the country of login (with the disclaimer caveats) and the eventual community.&lt;/p&gt; 
&lt;p&gt;For reliably and robustly reading csv in Java, usually I would use a &lt;a href="https://commons.apache.org/proper/commons-csv/"&gt;robust library&lt;/a&gt;, however in this case having no dependencies and using the scanner did just nicely.&lt;/p&gt;</description>
	<link>2018/12/salesforce-login-statistics-aggregation.html</link>
	<author>Stephan H. Wissel</author>
	<guid>3ef8b2e0-f848-11e8-a160-81c62127bae4</guid>
	<pubDate>05 December 2018</pubDate>

</item>

</channel>
</rss>
