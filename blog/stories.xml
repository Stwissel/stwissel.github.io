<?xml version="1.0"?>
<rss version="2.0">
<channel>
	<title>wissel.net Usability - Productivity - Business - The web - Singapore and Twins</title>
	<link>https://wissel.net/blog/stories.rss</link>
	<description>Thoughts, Insights and Opinions of Stephan H. Wissel. Topics included: IBM Lotus Notes and Domino, IBM Websphere, other IBM Lotus stuff,  J2EE, .Net, Software Archtecture, Personcentric Development, Agile Software, SDLC, Singapore and my Twins</description>
	<language>en,de</language>
	<copyright>(C) 2003 - 2018 Stephan H. Wissel, All rights reserved</copyright>
	<pubdate>Sat, 28 Jul 2018 06:09:09 +0000</pubdate>
<item>
	<title>Designing Lightning Components for Reuse</title>
	<description>&lt;p&gt;This is a living document about a common sense approach to developing reusable Lightning components. It might change over time.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#salesforce-documentation" id="salesforce-documentation"&gt;Salesforce documentation&lt;/a&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://developer.salesforce.com/docs/atlas.en-us.lightning.meta/lightning/intro_framework.htm"&gt;Lightning Developer Guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://developer.salesforce.com/docs/component-library/overview/components"&gt;Lightning Component Library&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;As well as the instance specific component library&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#principles" id="principles"&gt;Principles&lt;/a&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Components shall serve a single purpose, designed for reusability&lt;/li&gt; 
 &lt;li&gt;Components shall use the most feasible least code approach&lt;/li&gt; 
 &lt;li&gt;Components shall not contain country specific logic in the front-end&lt;/li&gt; 
 &lt;li&gt;Components shall be documented and tested&lt;/li&gt; 
 &lt;li&gt;Components shall use composition over inheritance. Inheritance is NOT forbidden, use it wisely&lt;/li&gt; 
 &lt;li&gt;Components shall observe case sensitivity even for non case sensitive item (e.g. field names)&lt;/li&gt; 
 &lt;li&gt;Components shall prefer component markup over html markup (e.g. &lt;code&gt;lightning:card&lt;/code&gt; over &lt;code&gt;div class="slds-..."&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Components shall use component navigation (if navigation is needed)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;a href="#naming" id="naming"&gt;Naming&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Related files and components need to be named so they appear close to each other. E.g. a component ?VehicleInfoList? that depends on inner components. Those would also start with ?VehicleInfo? e.g. ?VehicleInfoCard? ?VehicleInfoLineItem?, ?VehicleInfoInterested? etc.&lt;br&gt; Files should be named like this:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;SalesProcess.cmp&lt;/li&gt; 
 &lt;li&gt;SalesProcessController.js&lt;/li&gt; 
 &lt;li&gt;SalesProcessHelper.js&lt;/li&gt; 
 &lt;li&gt;SalesProcess[WhatEvent].evt&lt;/li&gt; 
 &lt;li&gt;SalesProcess.SVG&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;a href="#interfaces" id="interfaces"&gt;Interfaces&lt;/a&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;A component shall only implement the interfaces that it actually uses.&lt;/li&gt; 
 &lt;li&gt;A component that relies on a current record, shall not use ?availableForAllPageTypes? and must implement ?hasRecordId? and the attribute ?recordId?.&lt;/li&gt; 
 &lt;li&gt;Components that are not used on a page layout, but rather inside other components shall not implement interfaces (?availableFor??) that make them appear in the page editor&lt;/li&gt; 
 &lt;li&gt;Components shall only implement the interfaces they actually use. Avoid interfaces the component ?might use in future?&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;a href="#data-access" id="data-access"&gt;Data access&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Components shall use the ?least code? principles for data access. To be checked in this sequence:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Does the component need data access or can the attributes of it provide all the input it requires?&lt;/li&gt; 
 &lt;li&gt;Can lightning:recordForm be used?&lt;/li&gt; 
 &lt;li&gt;Can lightning:recordEditForm and lightning:recordReadForm be used?&lt;/li&gt; 
 &lt;li&gt;Can force:recordData be used?&lt;/li&gt; 
 &lt;li&gt;Is a custom @AuraEnabled method in the controller needed for data provision?&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;This doesn't preclude fetching Meta data or configuration. Ensure to use storable actions where feasible. More principles:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Use data change handlers where appropriate&lt;/li&gt; 
 &lt;li&gt;Use component events&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;a href="#code-principles" id="code-principles"&gt;Code principles&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;This section probably will expand over time&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Code needs to be readable&lt;/li&gt; 
 &lt;li&gt;The controllers (both client and server side) shall be light modules that marshall actual work to helper classes and helper functions&lt;/li&gt; 
 &lt;li&gt;In Apex helper classes shall be instantiated using factory classes - this allows intoducing country specific behavior&lt;/li&gt; 
 &lt;li&gt;All Apex helper classes shall be based on Interfaces&lt;/li&gt; 
 &lt;li&gt;Methods and functions shall be single purpose and not exceed a page size. Break them down (makes them more testable anyway) if to big&lt;/li&gt; 
 &lt;li&gt;Don't copy/paste&lt;/li&gt; 
 &lt;li&gt;Run PMD (free download) on all Apex (eventually on JavaScript too)&lt;/li&gt; 
 &lt;li&gt;Operations that can fail need to be handled with try/catch or its equivalent&lt;/li&gt; 
 &lt;li&gt;Use @ApexDoc and @JSDoc style comments&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;a href="#testing" id="testing"&gt;Testing&lt;/a&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;All components need test code: both for Apex (natural) and the client side component.&lt;/li&gt; 
 &lt;li&gt;A component is incomplete without a ?Lightning testing service? test.&lt;/li&gt; 
 &lt;li&gt;Use assertions generously!&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;a href="#documentation" id="documentation"&gt;Documentation&lt;/a&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Lightning components have a description&lt;/li&gt; 
 &lt;li&gt;Each lightning component comes with a documentation section - don't waste time documenting them outside Salesforce.&lt;/li&gt; 
 &lt;li&gt;Use the documentation to briefly explain what it does (no Pulitzer price for this writing!).&lt;/li&gt; 
 &lt;li&gt;Include at least one example in the documentation&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;a href="#parameter" id="parameter"&gt;Parameter&lt;/a&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Components that can be dragged onto a page can benefit from having parameters the page maintainer can use to configure the component, thus increasing reusability and limit the number of components that need to show up in the palette.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://developer.salesforce.com/docs/atlas.en-us.lightning.meta/lightning/components_config_for_app_builder_design_files.htm"&gt;Parameter documentation&lt;/a&gt; - Check the documentation for details.&lt;/li&gt; 
 &lt;li&gt;If a component is usable only for a specific object page, add that to the Design Resource.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;As usual YMMV&lt;/p&gt;</description>
	<link>2018/07/designing-lightning-components-for-reuse.html</link>
	<author>Stephan H. Wissel</author>
	<guid>f8870080-9084-11e8-9829-0f2fefca6bce</guid>
	<pubDate>26 July 2018</pubDate>

</item>
<item>
	<title>Postman and the Salesforce REST API</title>
	<description>&lt;p&gt;The Salesforce API is a great way to access Salesforce data and can be used with tools like &lt;a href="http://www.pocketsoap.com/osx/soqlx/"&gt;SoqlXplore&lt;/a&gt; or the &lt;a href="https://workbench.developerforce.com/"&gt;Salesforce Workbench&lt;/a&gt;. The API uses OAuth and a Bearer Authentication, so some steps are required to make that work in Postman&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#prepare-salesforce" id="prepare-salesforce"&gt;Prepare Salesforce&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;You will need a &lt;a href="https://help.salesforce.com/articleView?id=connected_app_overview.htm&amp;amp;type=5"&gt;connected APP&lt;/a&gt;. I usually create one that is pre-approved for my user profile(s), so I don't need to bother with the approval steps in Postman. However you could opt for self-approval and access the app once to approve its use, before you continue with the command line. Note down the &lt;code&gt;ClientId&lt;/code&gt; and &lt;code&gt;ClientSecret&lt;/code&gt; values.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#prepare-postman" id="prepare-postman"&gt;Prepare Postman&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Postman has great build in support for &lt;a href="https://www.getpostman.com/docs/v6/postman/sending_api_requests/authorization"&gt;all sorts of authorization&lt;/a&gt; interactively. However my goal here is to fully automate it, so you can run a &lt;a href="http://blog.getpostman.com/2014/03/07/writing-automated-tests-for-apis-using-postman/"&gt;test suite&lt;/a&gt; without manual intervention. First stop is the creation of one environment. You can have multiple environments to cater to different Salesforce instances.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt; Never ever ever store the environment into version control. It would contain credentials -&amp;gt; &lt;strong&gt;bad bad&lt;/strong&gt; idea!&lt;/p&gt; 
&lt;p&gt;My environment variables look like this:&lt;/p&gt; 
&lt;pre class="brush: javascript"&gt;{
	"CLIENT_ID" : "the ClientId from Salesforce",
	"CLIENT_SECRET" : "The ClientSecret from Salesforce",
    "USER_ID" : "some@email.com",
    "PASSWORD" : "DontTell",
    "LOGIN_URL" : "https://login.salesforce.com/"
}
&lt;/pre&gt; 
&lt;p&gt;Providing the Login URL allows to reuse postman collections between Sandboxes, Developer Orgs or Production Orgs without the need to actually edit the postman entries. Next on the menu: getting a token&lt;/p&gt;</description>
	<link>2018/07/postman-and-the-salesforce-rest-api.html</link>
	<author>Stephan H. Wissel</author>
	<guid>c92b6b70-8038-11e8-a388-63a342b09cf1</guid>
	<pubDate>06 July 2018</pubDate>

</item>
<item>
	<title>Mime is where Legacy Systems go to die</title>
	<description>&lt;p&gt;Your new system went live. Migration of current, active data went well. A decision was made not to move historic data and keep the old system around in ?read-only? mode, just in case some information needs to be looked up. Over time your zoo of legacy systems grows. I'll outline a way to put them to rest.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#the-challenges" id="the-challenges"&gt;The challenges&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;All recent systems (that's younger than 30 years) data is stored more or less normalized. A business document, like a contract, is split over multiple tables like customer, address, header, line items, item details, product etc.&lt;/p&gt; 
&lt;p&gt;Dumping this data as is (&lt;a href="https://en.wikipedia.org/wiki/Comma-separated_values"&gt;csv&lt;/a&gt; rules supreme here) only creates a &lt;a href="https://www.geotab.com/blog/big-data-graveyard/"&gt;data graveyard&lt;/a&gt; instead of the much coveted &lt;a href="https://en.wikipedia.org/wiki/Data_lake"&gt;data lake&lt;/a&gt; or &lt;a href="https://en.wikipedia.org/wiki/Data_warehouse"&gt;data warehouse&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The issue gets aggravated by the prevalence of &lt;a href="https://en.wikipedia.org/wiki/Magic_number_(programming)"&gt;magic numbers&lt;/a&gt; and abbreviations that are only resolved inside the legacy system. So looking at one piece of data tells you squid. Only an &lt;a href="https://en.wikipedia.org/wiki/Old_Hands"&gt;old hand&lt;/a&gt; would be able to make sense of &lt;code&gt;Status 82&lt;/code&gt; or &lt;code&gt;Flags x7D3z&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Access to meaningful information is confined to the user interface of the legacy application. It provides search and assembly of business relevant context&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#the-solution-approach" id="the-solution-approach"&gt;The solution approach&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Solving this puzzle requires a three step approach:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;denormalize&lt;/li&gt; 
 &lt;li&gt;transform&lt;/li&gt; 
 &lt;li&gt;make accessible&lt;/li&gt; 
&lt;/ul&gt;</description>
	<link>2018/06/mime-is-where-legacy-systems-go-to-die.html</link>
	<author>Stephan H. Wissel</author>
	<guid>3c2f6850-7383-11e8-b9df-3334377ac3ef</guid>
	<pubDate>22 June 2018</pubDate>

</item>
<item>
	<title>Adventures in TDD</title>
	<description>&lt;p&gt;There are two challenges getting into &lt;a href="https://en.wikipedia.org/wiki/Test-driven_development"&gt;TDD&lt;/a&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Why should I test upfront when I know it fails (there's this &lt;strong&gt;massive&lt;/strong&gt; aversion of failure in my part of the world)?&lt;/li&gt; 
 &lt;li&gt;Setting up the whole thing.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;I made peace with the first requirement using a very large monitor and a split screen, writing code and test on parallel, deviating from the ?pure teachings' for the comfort of my workflow.&lt;/p&gt; 
&lt;p&gt;The second part is trickier, There are so many moving parts. This post documents some of the insights.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#testing-in-the-ide" id="testing-in-the-ide"&gt;Testing in the IDE&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;a href="http://agiledata.org/essays/tdd.html"&gt;TDD&lt;/a&gt; has the idea that you create your test first and only write code until your test passes. Then you write another failing test and start over writing code.&lt;/p&gt; 
&lt;p&gt;As a consequence you need to test in your &lt;a href="https://en.wikipedia.org/wiki/Integrated_development_environment"&gt;IDE&lt;/a&gt;. For JavaScript or Java that's easy (the languages I use most):&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;In JavaScript you define a script &lt;code&gt;test&lt;/code&gt; in your &lt;a href="https://docs.npmjs.com/misc/scripts"&gt;package.json&lt;/a&gt; you can run any time. For a &lt;a href="https://dictionary.cambridge.org/dictionary/english/connoisseur"&gt;connoisseur&lt;/a&gt; there are tools like &lt;a href="https://wallabyjs.com/"&gt;WallabyJS&lt;/a&gt; or &lt;a href="https://marketplace.visualstudio.com/items?itemName=maty.vscode-mocha-sidebar"&gt;VSCode Mocha Sidebar&lt;/a&gt; that run your tests as you type and/or save. The tricky part is: what testing libraries (more on that below) to use?&lt;/li&gt; 
 &lt;li&gt;In Java &lt;a href="https://maven.apache.org/"&gt;Maven&lt;/a&gt; has a default goal &lt;code&gt;validate&lt;/code&gt; and &lt;a href="https://junit.org/"&gt;junit&lt;/a&gt; is the gold standard for tests. For automated continuous IDE testing there is &lt;a href="http://infinitest.github.io/"&gt;Infinitest&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;For Salesforce you have a combination of JavaScript and Apex (and clicks-not-code), testing is a little trickier. The commercials IDE &lt;a href="https://welkinsuite.com/"&gt;TheWelkingSuite&lt;/a&gt; and &lt;a href="https://plugins.jetbrains.com/plugin/7831-illuminated-cloud"&gt;Illuminated Cloud&lt;/a&gt; make that a lot easier. How easy is in they eye of the beholder. (Honorable mention: &lt;a href="https://jetforcer.com/"&gt;JetForcer&lt;/a&gt; - I simply haven't tested that one yet)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;a href="#testing-in-your-continuous-integration" id="testing-in-your-continuous-integration"&gt;Testing in your Continuous Integration&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Automated testing, after a commit to &lt;a href="https://github.com"&gt;Github&lt;/a&gt;, &lt;a href="https://gitlab.com"&gt;GitLab&lt;/a&gt; or &lt;a href="https://bitbucket.org"&gt;BitBucket&lt;/a&gt; happens once you configure a pipeline as a hook into the repository and have tests specified the pipeline can pick up. Luckily your maven and npm scripts will most likely work as a starting point.&lt;/p&gt; 
&lt;p&gt;The bigger challenge is the orchestration of various services like static testing, dependency management and reporting (and good luck if your infra guys claim, they could setup and run everything inhouse).&lt;/p&gt; 
&lt;p&gt;Some of the selections available:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Repository 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com"&gt;Github&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://gitlab.com"&gt;GitLab&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://bitbucket.org"&gt;BitBucket&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Pipelines 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://www.heroku.com/flow"&gt;Heroku Flow&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://bitbucket.org"&gt;BitBucket&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://travis-ci.org/"&gt;Travis&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://www.cloudbees.com/"&gt;Jenkins&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://www.codeship.io/"&gt;CodeShip&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://circleci.com/"&gt;CircleCI&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;and &lt;a href="https://github.com/ligurio/awesome-ci"&gt;more of them&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Testing and Reporting service 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://codeclimate.com/"&gt;CodeClimate&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://saucelabs.com/"&gt;SauceLab&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://codacy.com/"&gt;Codacy&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://coveralls.io/"&gt;Coveralls&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://snyk.io"&gt;Snyk&lt;/a&gt; (for vulnerabilities)&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://greenkeeper.io"&gt;GreenKeeper&lt;/a&gt; (for dependency management)&lt;/li&gt; 
   &lt;li&gt;and &lt;a href="https://google.com/search?q=cloud+based+testing+service"&gt;many more&lt;/a&gt;&lt;br&gt; some run extra tests, some report on tests that ran in your pipeline&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt;</description>
	<link>2018/06/adventures-in-tdd.html</link>
	<author>Stephan H. Wissel</author>
	<guid>7e579790-6c60-11e8-b1dc-1329f863fc15</guid>
	<pubDate>10 June 2018</pubDate>

</item>
<item>
	<title>What really happens in OAuth</title>
	<description>&lt;p&gt;OAuth in its various versions is the gold standard for Authorization (and using&lt;a href="http://openid.net/connect/"&gt;OpenID Connect&lt;/a&gt; for Authentication as well). There are &lt;a href="https://www.digitalocean.com/community/tutorials/an-introduction-to-oauth-2"&gt;plenty&lt;/a&gt; &lt;a href="http://openid.net/specs/oauth-v2-form-post-response-mode-1_0.html"&gt;of&lt;/a&gt; &lt;a href="https://medium.com/@technospace/an-introduction-to-oauth-2-0-4c71b5fb19ff"&gt;introductions&lt;/a&gt; &lt;a href="https://www.slideshare.net/aaronpk/an-introduction-to-oauth2"&gt;around&lt;/a&gt; &lt;a href="https://www.slideshare.net/aaronpk/an-introduction-to-oauth2"&gt;explaining&lt;/a&gt; &lt;a href="https://aaronparecki.com/oauth-2-simplified/"&gt;OAuth&lt;/a&gt;. My favorite HTTP tool &lt;a href="https://www.getpostman.com/"&gt;Postman&lt;/a&gt; makes it really simple to obtain access via OAuth.&lt;/p&gt; 
&lt;p&gt;Nevertheless all those explanations are quite high level, so I wondered what happens on the wire for the getToken part so I started digging. This is what I found. &lt;em&gt;Nota bene&lt;/em&gt;: There is no inherit security in OAuth if you don't use &lt;strong&gt;https&lt;/strong&gt;.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#the-components" id="the-components"&gt;The components&lt;/a&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Authorization server: server to interact with to get an authorization&lt;/li&gt; 
 &lt;li&gt;Client identifier (ClientID): ?userid? of the application&lt;/li&gt; 
 &lt;li&gt;Client Secret: ?password? of the application&lt;/li&gt; 
 &lt;li&gt;A user&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;I'm not looking at the Resource Server here - it only comes into play before or after the actual token process.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#the-form-post-flow" id="the-form-post-flow"&gt;The Form-Post Flow&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;There are &lt;a href="https://auth0.com/docs/api-auth/which-oauth-flow-to-use"&gt;several flows&lt;/a&gt; available to pick from. I'm looking at the Form-Post flow where user credentials are passed to the authentication server to obtain access and refresh tokens.&lt;/p&gt; 
&lt;p&gt;For this flow we need to post a HTTP form to the authorization server. The post has 2 parts: Header and body. A request looks like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;POST /yourOAuthEndPoint HTTP/1.1
Host: authserver.acme.com
Accept-Encoding: gzip, deflate
Accept: *.*
Authorization: Basic Y2xpZW50aWQ6Y2xpZW50c2VjcmV0
Content-Type: application/x-www-form-urlencoded
Cache-Control: no-cache

grant_type=password
  &amp;amp;username=user%40email.com
  &amp;amp;password=password
  &amp;amp;scope=openid+email+profile
  &amp;amp;client_id=clientid
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Some remarks:&lt;br&gt; - The &lt;code&gt;Authorization&lt;/code&gt; header is just as &lt;a href="https://www.base64encode.org/"&gt;Base64&lt;/a&gt;version of &lt;code&gt;clientid:clientsecret&lt;/code&gt; - you have t replace it with your actual info&lt;br&gt; - Content-Type must be &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt;&lt;br&gt; - The body is just one line with no spaces, I split it only for readability&lt;br&gt; - scope is a encoded list the + signs are actually spaces. Keeping that in mind you want to keep the server side scope names simple&lt;br&gt; - You need to repeat the clientid as header value&lt;/p&gt; 
&lt;p&gt;As a result you get back a JSON structure with authorization information. It can look like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;{
    "access_token": "wildStringForAccess",
    "refresh_token": "wildStringForRefreshingAccess",
    "token_type": "Bearer",
    "expires_in": 300
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The result is easy to understand:&lt;br&gt; - &lt;code&gt;expires_in&lt;/code&gt;: Duration for the access token in seconds&lt;br&gt; - &lt;code&gt;token_type&lt;/code&gt;: &lt;code&gt;Bearer&lt;/code&gt; denotes that you call your resource server with a header value of &lt;code&gt;Authorization: Bearer wildStringForAccess&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;As usual YMMV&lt;/p&gt;</description>
	<link>2018/06/what-really-happens-in-oauth.html</link>
	<author>Stephan H. Wissel</author>
	<guid>78e56b10-67b6-11e8-9406-054f86671783</guid>
	<pubDate>04 June 2018</pubDate>

</item>
<item>
	<title>Reuse a 3rd Party Json Web Token (JWT) for Salesforce authentication</title>
	<description>&lt;h3&gt;&lt;a href="#the-scenario" id="the-scenario"&gt;The scenario&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;You run an app, could be a mobile native, a &lt;a href="https://en.wikipedia.org/wiki/Single-page_application"&gt;SPA&lt;/a&gt;, a &lt;a href="https://en.wikipedia.org/wiki/Progressive_Web_Apps"&gt;PWA&lt;/a&gt; or just an application with JavaScript logic, in your domain that needs to incorporate data from your Salesforce instance or one of your Salesforce communities.&lt;/p&gt; 
&lt;p&gt;Users have authenticated with your website and the app is using a &lt;a href="https://www.jsonwebtoken.io/"&gt;JWT&lt;/a&gt; Bearer Token to establish identity. You don't want to bother users with an additional authentication.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#what-you-need" id="what-you-need"&gt;What you need&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Salesforce has &lt;a href="https://help.salesforce.com/articleView?id=remoteaccess_oauth_jwt_flow.htm&amp;amp;type=5"&gt;very specific&lt;/a&gt; requirements how a JWT must be formed to qualify for authentication. For example the token can be valid only for 5 minutes. It is very unlikely that your token matches the requirements.&lt;/p&gt; 
&lt;p&gt;Therefore you will need to extract the user identity from existing token, while checking that it isn't spoofed and create a new token that you present to Salesforce to obtain the session token. So you need:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;The key that can be used to verify the existing token. This could be a simple String, used for symmetrical signature or an X509 Public Key&lt;/li&gt; 
 &lt;li&gt;A private key for Salesforce to sign a new JWT (See below)&lt;/li&gt; 
 &lt;li&gt;A configured &lt;a href="https://help.salesforce.com/articleView?id=connected_app_overview.htm&amp;amp;type=5"&gt;Connected App&lt;/a&gt; in Salesforce where you upload they full certificate and obtain the Consumer Key&lt;/li&gt; 
 &lt;li&gt;Some place to run the code, like &lt;a href="https://wwww.heroku.com/"&gt;Heroku&lt;/a&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;img src="/blog/images/2018/jwtFlow.png" alt="Authentication Flow for 3rd party JWT"&gt;&lt;/p&gt;</description>
	<link>2018/05/reuse-a-3rd-party-jwt.html</link>
	<author>Stephan H. Wissel</author>
	<guid>7c4b8140-4ecf-11e8-80e2-bfca30024cb4</guid>
	<pubDate>03 May 2018</pubDate>

</item>
<item>
	<title>Function length and double byte languages</title>
	<description>&lt;p&gt;Complexity is a prime enemy of maintainability. &lt;a href="https://softwareengineering.stackexchange.com/questions/133404/what-is-the-ideal-length-of-a-method-for-you"&gt;So the conventional wisdom&lt;/a&gt; suggests methods should be around 20 lines, with some evidence suggesting up to 100+ lines.&lt;/p&gt; 
&lt;p&gt;When I review code written by non-native English speakers, especially when their primary language is double byte based, I find methods in the 500-1000 lines range, with some special champions up to 5000 lines. So I wondered what might contribute to these function/method worms.&lt;/p&gt;</description>
	<link>2018/04/function-length-and-double-byte-languages.html</link>
	<author>Stephan H. Wissel</author>
	<guid>5c6fd510-3b9c-11e8-90bb-13b34de998f8</guid>
	<pubDate>09 April 2018</pubDate>

</item>
<item>
	<title>Creative logging with $A.log()</title>
	<description>&lt;p&gt;In Lightning applications there are two ways to log: &lt;code&gt;console.log(..)&lt;/code&gt; and &lt;code&gt;$A.log(...)&lt;/code&gt;. This has led to some confusion what to use.&lt;/p&gt; 
&lt;p&gt;The official statement: &lt;code&gt;$A.log()&lt;/code&gt; will eventually go away, use &lt;code&gt;console.log()&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;This is a real pity, since &lt;code&gt;$A.log()&lt;/code&gt; is quite powerful and closer to what a developer would expect from logging. One reason for its demise: in a production setting &lt;code&gt;$A.log()&lt;/code&gt; would output - nothing. There's no official documentation how to change that and the &lt;code&gt;$A.logger.subscribe(...)&lt;/code&gt; method is neither documented nor guaranteed, only &lt;a href="https://salesforce.stackexchange.com/questions/86322/how-to-use-aura-log-and-where-does-it-print-it-output"&gt;mentioned on Stack Exchange&lt;/a&gt;. So?&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#enjoy-it-while-it-lasts" id="enjoy-it-while-it-lasts"&gt;Enjoy it while it lasts&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;The simple case to activate console output in production is to add a helper function that can be triggered by a button or whatever you find necessary:&lt;/p&gt; 
&lt;pre class="brush: javascript"&gt;$A.logger.subscribe( "INFO", function( level, message, error ) {
                                console.log( message );
                                console.log( error );
                             });
&lt;/pre&gt; 
&lt;p&gt;Instead of sending output to the console, which could confuse users seeing all that ?tech' stuff, you could redirect it into a custom component (the following snippet fits into an onInit script):&lt;/p&gt; 
&lt;pre class="brush: javascript"&gt;var target = component.find("loggerlist").getElement();
$A.logger.subscribe( "INFO", function( level, message, error ) {
                               target.innerHTML += "&amp;lt;li&amp;gt;"+message+"&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;"+error+"&amp;lt;/li&amp;gt;";
                             });
&lt;/pre&gt; 
&lt;p&gt;The target element would be &lt;code&gt;&amp;lt;ol auraid="loggerlist"&amp;gt;&lt;/code&gt; so you get a running list.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#across-the-network" id="across-the-network"&gt;Across the network&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;One is not limited to staying on the same machine. With a few lines of code logging can happen on a remote location as well. The following shows logging using websockets. For a production run (e.g. permanent instrumentation) I would make it a little more robust, like keeping the connection open and check if it is still there or send JSON, but for the occasional support this is good enough:&lt;/p&gt; 
&lt;pre class="brush: javascript"&gt;$A.logger.subscribe( "INFO", function( level, message, error ) {
    var wsEndPoint = 'wss://somewebsocket.url/ws/log';
    var connection = new WebSocket(wsEndPoint);
     connection.onopen = function(event) {
        connection.send(message);
        connection.send(error);
        connection.close();
    };
});

&lt;/pre&gt; 
&lt;p&gt;I'll show a potential receiving end implementation in a future post.&lt;br&gt; As I said: enjoy it while it lasts, it might go away soon. YMMV&lt;/p&gt;</description>
	<link>2018/04/lightning-creative-logging.html</link>
	<author>Stephan H. Wissel</author>
	<guid>b1ad71c0-36fd-11e8-8924-2159462a0d7c</guid>
	<pubDate>03 April 2018</pubDate>

</item>
<item>
	<title>Salesforce one year on</title>
	<description>&lt;p&gt;A year ago I said &lt;a href="2017/04/goodbye-ibm-hello-salesforce.html"&gt;Good by IBM, Hello Salesforce&lt;/a&gt;. A lot has happened in the last 12 month. Salesforce is only my second salaried job, I've been running my own companies and been freelance before.&lt;/p&gt; 
&lt;p&gt;Coming from IBM, where &lt;em&gt;Resource Actions&lt;/em&gt; had efficiently killed employee engagement, Salesforce's Ohana culture was a refreshing different. It makes such a difference to work with people who are genuinely interested in your success, without exception. In summary:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;I became a &lt;a href="https://trailhead.salesforce.com/en/me/stwissel"&gt;Trailblazer Ranger&lt;/a&gt;, completing 30 trails, 206 badges and collecting 169625 points&lt;/li&gt; 
 &lt;li&gt;Passed five Salesforce certifications&lt;/li&gt; 
 &lt;li&gt;Contributed to customer success in Singapore, Australia and Korea&lt;/li&gt; 
 &lt;li&gt;Wrote 25 blog entries (Way to little, more are coming)&lt;/li&gt; 
 &lt;li&gt;Moved my blog from Domino to git (more on that below)&lt;/li&gt; 
 &lt;li&gt;Contributed to OpenSource on github: 
  &lt;ul&gt; 
   &lt;li&gt;Maintainer for &lt;a href="https://github.com/Stwissel/node-red-contrib-salesforce"&gt;node-red-contrib-salesforce&lt;/a&gt;. The nodes that connect &lt;a href="https://nodered.org"&gt;NodeRED&lt;/a&gt; to Salesforce, including the support for platform events&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/Stwissel/Excel2XML"&gt;Excel2XML&lt;/a&gt;: Tool that converts XLSX tables into XML, so data can be extracted in command line applications. Main purpose is to make Excel data accessible in build pipelines (e.g. sample values for tests)&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/Stwissel/SpringCanvasSample"&gt;Spring Boot and Salesforce Canvas&lt;/a&gt;: Sample application that turns a Canvas POST into a JWT authentication, so classic multi pages applications can be integrated into Salesforce Canvas&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/Stwissel/SampleProxy"&gt;Vert.x proxy&lt;/a&gt; Filtering proxy implemented in &lt;a href="https://vertx.io"&gt;Apache vert.x&lt;/a&gt;. It allows to front a web application and filter HTML, JSON etc. based on content and URL&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/Stwissel/vertx-sfdc-platformevents"&gt;SFDC Platform Events&lt;/a&gt;: Modules for &lt;a href="https://vertx.io"&gt;Apache vert.x&lt;/a&gt; to connect to Salesforce. It includes authentication and processing of platform events. This allows for high performance multi-threaded interaction with Salesforce APIs, not limited to platform events&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/Stwissel/blog-comments-public"&gt;Blog Comments&lt;/a&gt; Tool that accepts a JSON formated comment structure and creates a Bitbucket file, a commit and a pull request. Allows for a database free comment engine&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/Stwissel/blogengine"&gt;BlogEngine&lt;/a&gt;: The application that powers this blog. It generates static files when commits/merges happen to my master branch on Bitbucket&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;What a ride, onto year two!&lt;/p&gt;</description>
	<link>2018/04/salesforce-one-year-on.html</link>
	<author>Stephan H. Wissel</author>
	<guid>39d80750-3568-11e8-876d-71d5cc4499a1</guid>
	<pubDate>01 April 2018</pubDate>

</item>
<item>
	<title>Boolean to get major overhaul</title>
	<description>&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/George_Boole"&gt;George Boole&lt;/a&gt; didn't seem to understand his five teenage daughters, (he didn't have sons, so this is about teenagers, not daughters) otherwise his boolean logic would encompass not only &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt;, but also &lt;code&gt;maybe&lt;/code&gt; or &lt;code&gt;don't know&lt;/code&gt;. Luckily that omission will be addressed now.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#boolean-to-merge-with-ternary" id="boolean-to-merge-with-ternary"&gt;Boolean to merge with Ternary&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Quick recap&lt;/strong&gt;: a boolean value has the values &lt;code&gt;true&lt;/code&gt; (usually 1), &lt;code&gt;false&lt;/code&gt; (usually 0). Ternary has 3 states, typically denoted -1, 0, 1. Not to confuse ternary with QBits which are true and false at the same time.&lt;/p&gt; 
&lt;p&gt;To reflect the real world, where nothing is certain, and cater to teenage level developers, the ternary and boolean data types will be merged into a new type: &lt;strong&gt;RealBoolean&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;Proposals are under way to incorporate RealBoolean into all major programming languages ASAP. RealBoolean will have the values &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;undecided&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt;. While it is up to the programming languages how these values are represented, consensus is, that the most likely candidates are -1, 0 and 1.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#new-hardware" id="new-hardware"&gt;New hardware&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Like specialized mining hardware for Crypto, RealBoolean will benefit from purpose build ternary computers. &lt;a href="https://en.wikipedia.org/wiki/Setun"&gt;Early models&lt;/a&gt; had been running since 1958. Ternary computing also has arrived in &lt;a href="https://hackaday.com/2016/12/16/building-the-first-ternary-microprocessor/"&gt;micro processor architectures&lt;/a&gt;. Of course there are &lt;a href="https://www.techopedia.com/why-not-ternary-computers/2/32427"&gt;doubters&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#transition-period" id="transition-period"&gt;Transition period&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Having multiple data types to express the truth might fit the political desire for &lt;em&gt;alternate facts&lt;/em&gt;, but is an unsustainable confusion in programming. Therefore the classic boolean values will become illegal April 01, 2042.&lt;br&gt; In the transition period classic booleans will be &lt;a href="https://en.wikipedia.org/wiki/Duck_typing"&gt;ducktyped&lt;/a&gt; into RealBoolean whenever the values &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; or &lt;code&gt;1&lt;/code&gt; are used. For boolean &lt;code&gt;0&lt;/code&gt; or &lt;code&gt;-1&lt;/code&gt; (as some unfortunate languages use) compilers and runtimes are mandated to issue a &lt;strong&gt;warning&lt;/strong&gt; for the first 5 years, thereafter a &lt;strong&gt;stern warning&lt;/strong&gt; before they finally become illegal&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#enforcement" id="enforcement"&gt;Enforcement&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;All version control repositories will be scanned (the NSA does that anyway) and offending code flagged with new issues. Binary code, not compiled from a repository, will be treated as virus, blocked and deleted. After the deadline all remaining offending code will be transpiled into COBOL - good luck with finding developers to make sense of that code thereafter&lt;/p&gt;</description>
	<link>2018/04/boolean-to-get-major-overhaul.html</link>
	<author>Stephan H. Wissel</author>
	<guid>2efe5190-3568-11e8-9f7b-dd4d46818a1f</guid>
	<pubDate>01 April 2018</pubDate>

</item>

</channel>
</rss>
