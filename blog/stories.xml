<?xml version="1.0"?>
<rss version="2.0">
<channel>
	<title>wissel.net Usability - Productivity - Business - The web - Singapore and Twins</title>
	<link>https://wissel.net/blog/stories.rss</link>
	<description>Thoughts, Insights and Opinions of Stephan H. Wissel. Topics included: IBM Lotus Notes and Domino, IBM Websphere, other IBM Lotus stuff,  J2EE, .Net, Software Archtecture, Personcentric Development, Agile Software, SDLC, Singapore and my Twins</description>
	<language>en,de</language>
	<copyright>(C) 2003 - 2018 Stephan H. Wissel, All rights reserved</copyright>
	<pubdate>Sun, 04 Mar 2018 03:21:14 +0000</pubdate>
<item>
	<title>Query a JSON object like XPath in Java</title>
	<description>&lt;p&gt;I'm fond of &lt;a href="/blog/categories/xml.html"&gt;XML&lt;/a&gt; especially &lt;a href="https://www.w3.org/TR/xslt/"&gt;XSLT&lt;/a&gt; and the related &lt;a href="https://en.wikipedia.org/wiki/XPath"&gt;XPath&lt;/a&gt; query possibilities.&lt;br&gt; Moving into the wonderworld of &lt;a href="http://www.json.org/"&gt;JSON&lt;/a&gt; I'm missing those platform independent query and rendering options.&lt;br&gt; For templating &lt;a href="https://mustache.github.io/"&gt;Mustache&lt;/a&gt; comes close, especially in regards of platform support, but XPath still has to find its match in the JSON world.&lt;/p&gt; 
&lt;p&gt;The closest equivalent is &lt;a href="https://www.npmjs.com/package/jsonpath"&gt;JSONPath&lt;/a&gt; (also available &lt;a href="https://github.com/json-path/JsonPath"&gt;for Java&lt;/a&gt; ) with a nice &lt;a href="http://jsonpath.com/"&gt;interactive playground&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;I was looking at adopting it for one of &lt;a href="https://github.com/Stwissel/SampleProxy"&gt;my projects&lt;/a&gt; written in &lt;a href="https://vertx.io"&gt;vert.x&lt;/a&gt;.&lt;br&gt; JSON isn't native to Java and there are several competing implementations around JSON: &lt;a href="https://github.com/google/gson"&gt;Google's GSON&lt;/a&gt;, &lt;a href="https://github.com/FasterXML/jackson-docs"&gt;Jackson&lt;/a&gt;&lt;br&gt; and &lt;a href="http://vertx.io/docs/apidocs/io/vertx/core/json/JsonObject.html"&gt;vert.x core JsonObject&lt;/a&gt; (there are probably more).&lt;/p&gt; 
&lt;p&gt;So I was wondering: What if I could use XPath and by extension XSLT directly on JSON? The first step there would be a save way to transform JSON to XML and back.&lt;br&gt; Using vert.x &lt;a href="http://vertx.io/docs/apidocs/io/vertx/core/json/JsonObject.html"&gt;JsonObject&lt;/a&gt; and &lt;a href="http://vertx.io/docs/apidocs/io/vertx/core/json/JsonArray.html"&gt;JsonArray&lt;/a&gt; as starting point,&lt;br&gt; I had the following considerations:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;I can't use XML tags to map to JSON labels, since labels can contain any character, XML tags are restricted&lt;/li&gt; 
 &lt;li&gt;The resulting XML only needs 2 elements: Element and Array&lt;/li&gt; 
 &lt;li&gt;An element can have a scalar value, my first test deals with strings only, or can contain another element or array&lt;/li&gt; 
 &lt;li&gt;An array does not have a value. It can contain zero or more scalar values and/or zero or more arrays or elements&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;So I build a small prototype. A simple class that reads a json file from the command line, prints it to the console, transforms it to XML, prints it to the console, transforms it back and prints it again.&lt;br&gt; The prototype depends on vert.x core.&lt;/p&gt; 
&lt;p&gt;The result can be found &lt;a href="https://gist.github.com/Stwissel/900acc8ed6a46131530ab89bb70b9f9d"&gt;in this gist&lt;/a&gt;.&lt;/p&gt; 
&lt;script src="https://gist.github.com/Stwissel/900acc8ed6a46131530ab89bb70b9f9d.js"&gt;&lt;/script&gt; 
&lt;p&gt;Give it a spin and let me know how it works for you. It's just the beginning.&lt;br&gt; Next stop: apply XPath operations on the resulting XML before transforming it back.&lt;/p&gt; 
&lt;p&gt;As usual: YMMV&lt;/p&gt;</description>
	<link>2018/02/query-a-json-object-like-xpath.html</link>
	<author>Stephan H. Wissel</author>
	<guid>26d44c30-1c32-11e8-975d-b5df85697815</guid>
	<pubDate>2018-02-28 11:50</pubDate>

</item>
<item>
	<title>Spring Boot and Salesforce Canvas</title>
	<description>&lt;h3&gt;&lt;a href="#the-challenge" id="the-challenge"&gt;The challenge&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Salesforce canvas offers a capable integration point between Salesforce and external applications to surface them inside the Salesforce UI. One of the aspects is establishing identity. There are two options: OAuth and a signed request. I?m looking at the later. A signed request posts (as in HTTP POST) a digitally signed JSON request to the external application.&lt;/p&gt; 
&lt;p&gt;When all you need is a single page, validating the request and returning the result is all that needs to be done. It becomes trickier when you want to navigate in the application and when that application runs in the cloud with multiple load balanced instances, so you might end up on a different instance mid-flight.&lt;/p&gt; 
&lt;p&gt;Most of the sample code available uses the sophisticated &lt;a href="https://github.com/forcedotcom/SalesforceCanvasJavascriptSDK"&gt;Canvas JavaScript SDK&lt;/a&gt;, so I decided to focus on backend code here.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#the-project" id="the-project"&gt;The project&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;All the code can be found &lt;a href="https://stwissel.github.io/SpringCanvasSample/"&gt;on Github&lt;/a&gt; including &lt;a href="https://github.com/Stwissel/SpringCanvasSample"&gt;sources&lt;/a&gt;. Feel free to &lt;a href="https://github.com/Stwissel/SpringCanvasSample/issues"&gt;open issues&lt;/a&gt;. To try it out you can deploy it to Heroku (button in the Readme on Github) and &lt;a href="https://developer.salesforce.com/docs/atlas.en-us.platform_connect.meta/platform_connect/quick_start_create_canvas_app.htm"&gt;configure a Canvas app&lt;/a&gt; in Salesforce. Use &lt;code&gt;https://yourappname.herokuapp.com/sfdcauth/hw&lt;/code&gt; as Canvas URL&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#the-approach" id="the-approach"&gt;The approach&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Build a &lt;a href="https://projects.spring.io/spring-boot/"&gt;Spring Boot&lt;/a&gt; application that provides an authentication endpoint suitable for a Canvas POST and other endpoints that only allow authenticated access. The security will be provided by &lt;a href="https://jwt.io/"&gt;Json Web Tokens&lt;/a&gt; a.k.a JWT or &lt;a href="https://tools.ietf.org/html/rfc7519"&gt;RFC 7519&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;As added challenge: The application will require standard link and form based navigation, so we can't rely on AJAX to provide additional ?stuff? into the requests from/to the server. And yes - needs to be able to run on &lt;a href="https://www.heroku.com/"&gt;Heroku&lt;/a&gt; on multiple instances (Dynos in Heroku language) without the sticky session feature switched on.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#lessons-learned" id="lessons-learned"&gt;Lessons learned&lt;/a&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://projects.spring.io/spring-boot/"&gt;Spring Boot&lt;/a&gt; performs magic. Sometimes a little too much magic&lt;/li&gt; 
 &lt;li&gt;Base64 isn't Base64. The Java8 decoder works different from the Apache Commons, so the signed checksums don't tally. Pain in the ?proverbial? to get the validation code from the SDK running&lt;/li&gt; 
 &lt;li&gt;Spring security is well thought through. I like the approach: the very moment you add it to a project, all is closed until you specifically open it&lt;/li&gt; 
 &lt;li&gt;You can't stuff the entire JSON coming from Salesforce back into a cookie&lt;/li&gt; 
 &lt;li&gt;JSON in Java is still a pain (Bearable with &lt;a href="https://fasterxml.github.io/jackson-databind/javadoc/2.2.0/com/fasterxml/jackson/databind/JsonNode.html"&gt;JsonNode&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;The information around custom error pages in Spring is confusing. It seems to have evolved over time and conflicting information is presented&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://jwt.io/"&gt;Json Web Tokens&lt;/a&gt; (JWT) rock&lt;/li&gt; 
 &lt;li&gt;Cookies behave different in Salesforce canvas than in regular iFrames. In an iFrame http cookies are considered ?native? to their environment, in canvas they seem to run as third-party cookies (unless I miss something). Stole a few hours tracking the issue down&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.avonnicreator.com/"&gt;Avonni Creator&lt;/a&gt; is a nice tool to play with &lt;a href="https://www.lightningdesignsystem.com/"&gt;Lightning Design System&lt;/a&gt; layouts&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;As usual YMMV&lt;/p&gt;</description>
	<link>2018/02/spring-boot-and-salesforce-canvas.html</link>
	<author>Stephan H. Wissel</author>
	<guid>43366410-1621-11e8-8f58-bd9e0b89b056</guid>
	<pubDate>2018-02-20 05:34</pubDate>

</item>
<item>
	<title>Running NodeRED on Heroku with Salesforce</title>
	<description>&lt;p&gt;I am a big fan of &lt;a href="http://nodered.org/"&gt;NodeRED&lt;/a&gt;, so I was delighted to see &lt;a href="https://www.npmjs.com/package/node-red-contrib-salesforce"&gt;nodes available&lt;/a&gt; to connect to Salesforce.&lt;br&gt; Since the package was a little behind and support for platform events was still missing, I had a chat with &lt;a href="https://www.npmjs.com/~jeffdonthemic"&gt;Jeff&lt;/a&gt; and we agreed that I would maintain the package moving forward.&lt;/p&gt; 
&lt;p&gt;I updated the package dependencies to current version and made two main changes to the functionality:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;allow credentials to be read from environment variables. This allows for easy deployment to Heroku&lt;/li&gt; 
 &lt;li&gt;Support for Salesforce platform events&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Deployment to &lt;a href="https://www.heroku.com/apps"&gt;Heroku&lt;/a&gt; is a breeze, but requires a few steps that I document here.&lt;br&gt; The instructions require a basic understanding how Heroku works, so you might want to check out a &lt;a href="https://devcenter.heroku.com/start"&gt;tutorial&lt;/a&gt; first. There are some challenges to overcome:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;I want to be able to test local and on the server&lt;/li&gt; 
 &lt;li&gt;Storage on Heroku is ephemeral. Any changes written to the server's file system get reset on restart&lt;/li&gt; 
 &lt;li&gt;Deployment should happen via version control&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;a href="#prerequisites" id="prerequisites"&gt;Prerequisites&lt;/a&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Current version of &lt;a href="https://nodejs.org/"&gt;NodeJS&lt;/a&gt; installed (I usually stick to the LTS version)&lt;/li&gt; 
 &lt;li&gt;GIT client installed (or GIT as part of your favorite IDE)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://devcenter.heroku.com/articles/heroku-cli"&gt;Heroku CLI&lt;/a&gt; (a.k.a Toolbelt) installed. Install using &lt;code&gt;npm install -g heroku-cli&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;a href="#project-setup-command-line-work" id="project-setup-command-line-work"&gt;Project setup (Command line work)&lt;/a&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Create a new directory &lt;code&gt;NodeRedDemo&lt;/code&gt; and change into it&lt;/li&gt; 
 &lt;li&gt;Initialize a new project &lt;code&gt;npm init&lt;/code&gt; - fill in suitable defaults&lt;/li&gt; 
 &lt;li&gt;Create a file &lt;code&gt;.gitignore&lt;/code&gt; (content see below)&lt;/li&gt; 
 &lt;li&gt;add NodeRED and the Salesfore nodes &lt;code&gt;npm install -s node-red node-red-contrib-salesforce&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;add a line into &lt;code&gt;package.json&lt;/code&gt; (see sample below) in scripts: &lt;code&gt;"start": "node-red --settings ./.node-red/settings.js --userDir ./.node-red"&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;create the directories &lt;code&gt;scripts&lt;/code&gt; and &lt;code&gt;.node-red&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;copy the &lt;code&gt;settings.js&lt;/code&gt; file from &lt;code&gt;node_modules/node-red&lt;/code&gt; to &lt;code&gt;.node-red&lt;/code&gt; - We will edit that file later&lt;/li&gt; 
 &lt;li&gt;initialize git: &lt;code&gt;git init&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;add initial files to git: &lt;code&gt;git add --all&lt;/code&gt; and &lt;code&gt;git commit -m "initial creation"&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;login to heroku &lt;code&gt;heroku login&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;add Heroku: &lt;code&gt;heroku create&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;deploy: &lt;code&gt;git push heroku master&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Your application should be running on Heroku now. To learn how to use &lt;a href="http://nodered.org/"&gt;NodeRED&lt;/a&gt;, check out &lt;a href="https://nodered.org/docs/getting-started/first-flow"&gt;a tutorial&lt;/a&gt;. Besides running on Heroku you can start the application on local too. Just use &lt;code&gt;npm start&lt;/code&gt; and load localhost:1880.&lt;/p&gt; 
&lt;p&gt;What is missing: protect your NodeRED editor, connect to Salesforce and of course: create your flows.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Keep in mind&lt;/strong&gt;: every time you redeploy or restart the app, anything stored, including your flow definitions, gets lost.&lt;br&gt; For permanent results I create my flows in the local instance of NodeRED and commit the flow file (in the .node-red directory) to git, so it becomes part of the deployment.&lt;/p&gt;</description>
	<link>2018/02/running-nodered-on-heroku-with-salesforce.html</link>
	<author>Stephan H. Wissel</author>
	<guid>d8031330-1131-11e8-a86d-4f29536bf933</guid>
	<pubDate>2018-02-14 11:42</pubDate>

</item>
<item>
	<title>Excel in Continuous Integration</title>
	<description>&lt;p&gt;Business Users like Excel. Besides its original use case of calculating, lists are a favourite use case. They also serve as poor man's requirement and bug tracker, so they siep into software development too.&lt;/p&gt; 
&lt;p&gt;While Excel sheets are great for interaction, they are a beast for anything automation. The irony of it: Modern Excel files (the xslx flavour) are nothing less than &lt;a href="https://en.wikipedia.org/wiki/Office_Open_XML"&gt;zip files with XML content&lt;/a&gt;. However that format is, let's say, [insert expletives here].&lt;/p&gt; 
&lt;p&gt;From an XML representation I would expect something like &lt;code&gt;&amp;lt;cell row="23" col="44"&amp;gt;Some value&amp;lt;/cell&amp;gt;&lt;/code&gt;. However that's not what Excel does. Rename an xlsx to zip and see for yourself. Also (which makes sense for Excel itself) empty cells are not represented in XML.&lt;/p&gt; 
&lt;p&gt;Cutting a long story short, an Excel file or its XML representation poses some challenges:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;XML format is not very suitable for automation, like generating reports using XSLT&lt;/li&gt; 
 &lt;li&gt;Excel automation only runs on Windows (and when you run headless, you trade the head for a headache). That makes it a no-go for most automation server environments&lt;/li&gt; 
 &lt;li&gt;Empty cells are absent from the XML (a variation of "not suitable")&lt;/li&gt; 
 &lt;li&gt;Cross reports with other files (e.g. logs in XML format) is hard&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;To overcome these limitations I wrote &lt;a href="https://github.com/Stwissel/Excel2XML"&gt;Excel2XML&lt;/a&gt;. It is a little Java command line utility that converts Excel into a more digestible XML format. I used Microsoft's contribution to the &lt;a href="https://poi.apache.org/"&gt;Apache POI&lt;/a&gt; project to read the file. It has the following functions:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Extract workbooks in one or separate files per worksheet&lt;/li&gt; 
 &lt;li&gt;Ignore all formatting&lt;/li&gt; 
 &lt;li&gt;Computed cells return their last result values, unless it is a formula error, then the formula is returned&lt;/li&gt; 
 &lt;li&gt;The first line of each sheet is treated as column headers, which are extracted as columns/column elements&lt;/li&gt; 
 &lt;li&gt;Each cell has a &lt;code&gt;column&lt;/code&gt;, a &lt;code&gt;row&lt;/code&gt; and a &lt;code&gt;title&lt;/code&gt; attribute. The title reflects the value from the first row. This allows in XSLT to query the title instead of relying on the column number. Reordering, adding or removing columns won't kill your XSLT stylesheet that way&lt;/li&gt; 
 &lt;li&gt;Optional empty cells can be generated with an attribute of &lt;code&gt;empty="true"&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Runs on Java8 completely from command line&lt;/li&gt; 
 &lt;li&gt;Calling it without parameters outputs the exact syntax of options&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The full syntax: &lt;code&gt;java -jar excel2xml.jar -i somefile.xslt [-o somefile.xml [ ]-e] [-s] [-w3,4]&lt;/code&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;-i the input file in xslx format&lt;/li&gt; 
 &lt;li&gt;-o the output file. If missing same name as input, but extension xml&lt;/li&gt; 
 &lt;li&gt;-e generate empty cells. If missing: cells without data are skipped&lt;/li&gt; 
 &lt;li&gt;-s generate a single file for the whole workbook. If missing: creates one file per sheet&lt;/li&gt; 
 &lt;li&gt;-w comma separated list of sheets to export. Starts at 0. If missing: exports all sheets&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Head over to the git repository and grab &lt;a href="https://github.com/Stwissel/Excel2XML/releases"&gt;a release&lt;/a&gt;. Let me know what use you found. As usual YMMV&lt;/p&gt;</description>
	<link>2017/10/excel-in-ci.html</link>
	<author>Stephan H Wissel</author>
	<guid>8439A1CD09FAA0D2482581AD004F86B5</guid>
	<pubDate>2017-10-02 10:28</pubDate>

</item>
<item>
	<title>Static APEX code analysis with PMD</title>
	<description>&lt;p&gt;Coding standard are only as good as they are followed. One venerable tool to check source code is &lt;a href="https://pmd.github.io/"&gt;PMD&lt;/a&gt;. When you, like I did, wonder what acronym PMD represents, you will &lt;a href="https://pmd.github.io/pmd-5.8.1/overview/meaning.html"&gt;be disappointed&lt;/a&gt;. PMD supports the usual suspects like C, C++, C#, Fortran, Java, JavaScript, Go, Groovy, XML... as well as &lt;a href="https://pmd.github.io/pmd-5.8.1/pmd-apex/index.html"&gt;Apex&lt;/a&gt; and &lt;a href="https://pmd.github.io/pmd-5.8.1/pmd-visualforce/index.html"&gt;Visualforce&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The &lt;a href="http://pmd.sourceforge.net/snapshot/pmd-apex/rules/index.html"&gt;default ruleset for Apex&lt;/a&gt; contains 34 rules and are the ones also used by &lt;a href="https://codeclimate.com/"&gt;CodeClimate&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;PMD is a Java application and you have a number options to run it:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;As a command line application&lt;/li&gt; 
 &lt;li&gt;Using ANT or Maven&lt;/li&gt; 
 &lt;li&gt;In your CI platform (using command line, ANT or Maven &lt;img src="https://wissel.net/blog/emoticons/DLYH-5MZVLU/$File/wink.gif"&gt; )&lt;/li&gt; 
 &lt;li&gt;Linking your Github (or Gitlab, Bitbucket) repository to a service like &lt;a href="https://codeclimate.com/"&gt;CodeClimate&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;PMD supports a series of output formats like plain, csv, html (different flavours) and XML. When you understand XSLT, the XML format allows you to render whatever report you deem fit&lt;/p&gt;</description>
	<link>2017/07/static-apex-code-analysis-with-pmd.html</link>
	<author>Stephan H Wissel</author>
	<guid>6535CE6D841F1A0048258168005D0105</guid>
	<pubDate>2017-07-26 12:55</pubDate>

</item>
<item>
	<title>From Blogsphere to a Static Site (Part 5) - Comment front-end</title>
	<description>&lt;p&gt;In &lt;a href="/blog/2017/05/from-blogsphere-to-a-static-site-part-4-comment-backend.html"&gt;Part 4&lt;/a&gt; I described the comment backend. This installment sheds a light on the comment front-end.&lt;/p&gt; 
&lt;p&gt;Comments can be tricky. One lesson I learned early: When your comment form is standard HTML form, it attracts spam like a light bulb attracts moths. So the requirement were:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The original blog entry should not contain any HTML form. It should be loaded on a button click using JavaScript. Nota bene: this isn't hide/show, but actual manipulation of the DOM&lt;/li&gt; 
 &lt;li&gt;The dynamic form shall not contain a POST URL, but submission should be in JavaScript - keeps a lot of the scumbags out already&lt;/li&gt; 
 &lt;li&gt;Submission should be secured with a Captcha&lt;/li&gt; 
 &lt;li&gt;Some formatting should be allowed. I opted for a Markdown editor with preview capabilities&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The first component is the placeholder for the existing comments and the button showing the comment form:&lt;/p&gt; 
&lt;pre class="brush: html"&gt;
&amp;lt;a name="comments"&amp;gt;&amp;lt;/a&amp;gt;
{{^commentsclosed}}
&amp;lt;div class="well well-raised" style="text-align : center"&amp;gt;
  &amp;lt;button class="btn btn-lg btn-info" data-toggle="collapse" data-target="#commentform_{{UNID}}" type="button"&amp;gt;
    Add your comment...&amp;nbsp;&amp;nbsp;&amp;lt;span class="glyphicon glyphicon-comment"&amp;gt;&amp;lt;/span&amp;gt;
  &amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div id="commentform_{{UNID}}" class="collapse"&amp;gt;&amp;lt;/div&amp;gt;
{{/commentsclosed}}
&amp;lt;div class="well well-raised"&amp;gt;
  &amp;lt;h4&amp;gt;Comments&amp;lt;/h4&amp;gt;
  &amp;lt;ol id="commentList"&amp;gt;
    {{#comments}}
    &amp;lt;li&amp;gt;
      {{#gravatarURL}}&amp;lt;img src="{{.}}" class="gravatarimg" /&amp;gt; {{/gravatarURL}} posted by &amp;lt;b&amp;gt;{{author}}&amp;lt;/b&amp;gt; on &amp;lt;i&amp;gt;{{createdString}}&amp;lt;/i&amp;gt;:
      &amp;lt;br /&amp;gt; {{&amp;amp; comment}}
      &amp;lt;hr style="clear : both" /&amp;gt;
    &amp;lt;/li&amp;gt; {{/comments}} {{^comments}}
    &amp;lt;li id="nocomments"&amp;gt;
      &amp;lt;h5&amp;gt;No comments yet, be the first to comment&amp;lt;/h5&amp;gt;
    &amp;lt;/li&amp;gt;
    {{/comments}}
  &amp;lt;/ol&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/pre&gt; 
&lt;p&gt;The second component is the comment form, implemented as mustache template - one of the reasons I picked Mustache: runs on the server and the client in tons of languages&lt;/p&gt; 
&lt;pre class="brush: html"&gt;
&amp;lt;form title="Comment form for blog discussion" onSubmit="return addComment(this,'{{recaptchaid}}','{{parentId}}')" class="form-vertical well well-raised"&amp;gt;
  &amp;lt;fieldset&amp;gt;
    &amp;lt;legend&amp;gt;Add your comment&amp;lt;/legend&amp;gt;
    &amp;lt;p&amp;gt;Please note: &amp;lt;b&amp;gt;Comments without a valid and working eMail address will be removed.&amp;lt;/b&amp;gt;
      &amp;lt;br /&amp;gt; This is my site, so I decide what stays here and what goes.&amp;lt;/p&amp;gt;
     &amp;lt;div class="control-group" id="commentcontrol"&amp;gt;
      &amp;lt;label class="control-label" for="Commentor"&amp;gt;Name (required, published)&amp;lt;/label&amp;gt;
      &amp;lt;div class="controls"&amp;gt;
        &amp;lt;input class="input-xlarge focused" id="Commentor" size="30" accesskey="n" name="nameAuthor" /&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;label class="control-label" for="Email"&amp;gt;eMail (required, not published)&amp;lt;/label&amp;gt;
      &amp;lt;div class="controls"&amp;gt;
        &amp;lt;input type="eMail" class="input-xlarge focused" id="Email" size="30" accesskey="n" name="txtEmail" placeholder="A working eMail please!" /&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;label class="control-label" for="webSite"&amp;gt;URL (optional)&amp;lt;/label&amp;gt;
      &amp;lt;div class="controls"&amp;gt;
        &amp;lt;input type="url" class="input-xlarge" id="webSite" size="30" accesskey="n" name="txtWebSite" /&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div class="controls"&amp;gt;
        &amp;lt;div id="wmd-panel" class="wmd-panel"&amp;gt;
          &amp;lt;table style="width : 100%" border="0"&amp;gt;
            &amp;lt;tr&amp;gt;
              &amp;lt;td style="width : 50%; vertical-align : top"&amp;gt;
                &amp;lt;label class="control-label" for="wmd-input"&amp;gt;Your Comment (Use markdown like &amp;lt;a href="//stackoverflow.com/editing-help" target="_blank"&amp;gt;Stackoverflow&amp;lt;/a&amp;gt;)&amp;lt;/label&amp;gt;
                &amp;lt;div id="wmd-button-bar"&amp;gt;&amp;lt;/div&amp;gt;
                &amp;lt;textarea class="wmd-input" id="wmd-input" name="Body"&amp;gt;&amp;lt;/textarea&amp;gt;
              &amp;lt;/td&amp;gt;
              &amp;lt;td style="width : 50%; vertical-align : top"&amp;gt;
                &amp;lt;label class="control-label"&amp;gt;Preview&amp;lt;/label&amp;gt;
                &amp;lt;div id="wmd-preview" class="wmd-panel wmd-preview"&amp;gt;&amp;lt;/div&amp;gt;
              &amp;lt;/td&amp;gt;
            &amp;lt;/tr&amp;gt;
          &amp;lt;/table&amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div class="controls" id="captchadiv"&amp;gt;Captcha here&amp;lt;/div&amp;gt;
      &amp;lt;div class="form-actions"&amp;gt;
        &amp;lt;button id="commentsubmit" type="submit" class="btn btn-primary btn-large"&amp;gt;Post your comment&amp;lt;/button&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class="alert alert-block" id="alertContainer" style="display : none"&amp;gt;One moment please, submitting comment...&amp;lt;/div&amp;gt;
  &amp;lt;/fieldset&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/pre&gt; 
&lt;p&gt;The whole mechanism gets to work with just a few jQuery JavaScript functions (Vanilla JS would work too, but I had JQuery already for the social buttons, so I reused that) and the respective JS files:&lt;/p&gt;</description>
	<link>2017/07/from-blogsphere-to-a-static-site-part-5-comment-front-end.html</link>
	<author>Stephan H Wissel</author>
	<guid>7380F00B6085195048258163005240F6</guid>
	<pubDate>2017-07-20 10:58</pubDate>

</item>
<item>
	<title>Ownership flow of customer community created cases</title>
	<description>&lt;p&gt;In a previous entry I &lt;a href="/blog/d6plinks/SHWL-APBH4Q"&gt;mapped out&lt;/a&gt; sharing abilities the Salesforce platform is capable of.&lt;/p&gt; 
&lt;p&gt;In this entry I will put these capabilities to practial use. The scenario starts with a customer logging into the customer community and raising a ticket. Client representative, the partner and support staff need/want access to the case. The case needs to flow along the same processing as cases created by other means (call, email, IoT). The following diagram explains the flow (click for a &lt;a href="/blog/images/2017/CustomerCreatedCases.png"&gt;larger version&lt;/a&gt;):&lt;/p&gt; 
&lt;a href="/blog/images/2017/CustomerCreatedCases.png" alt="Click to get a bigger version"&gt;&lt;img src="/blog/images/2017/CustomerCreatedCases640.jpg" border="0" alt="Customer Portal Created Cases Ownership flow"&gt;&lt;/a&gt; 
&lt;p&gt;The diagram has been rendered using &lt;a href="https://www.websequencediagrams.com/"&gt;Websequencediagrams&lt;/a&gt; based on a plain text file:&lt;/p&gt;</description>
	<link>2017/07/ownership-flow-of-customer-community-created-cases.html</link>
	<author>Stephan H Wissel</author>
	<guid>83FFC90480FAC1EB4825815F004C494B</guid>
	<pubDate>2017-07-16 09:53</pubDate>

</item>
<item>
	<title>Using FontAwesome in your VisualForce pages</title>
	<description>&lt;p&gt;I'm a big fan of &lt;a href="http://fontawesome.io/"&gt;Font Awesome&lt;/a&gt; (including backing &lt;a href="https://fontawesome.com/"&gt;Version 5&lt;/a&gt;). It allows to add icons without the overhead of loading tons of small graphic files. In a recent internal project I had to integrate FontAwesome into a Salesforce VisualForce page&lt;/p&gt; 
&lt;h2 id="installing-fontawesome"&gt;Installing FontAwesome&lt;/h2&gt; 
&lt;p&gt;In theory you could load the font from a CDN. However based on security settings this might or might not work. So I decided to add FontAwesome as resource to my project:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;a href="http://fontawesome.io/assets/font-awesome-4.7.0.zip"&gt;Download FontAwesome 4&lt;/a&gt;. Or support the team and use &lt;a href="https://fontawesome.com/"&gt;Version 5&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Add the zip file as static resource to your setup:&lt;br&gt; &lt;img src="/blog/images/2017/SFFAStatic.png" alt="Static Resource for FontAwesome"&gt;&lt;/li&gt; 
 &lt;li&gt;Make sure you have set the cache control to &lt;code&gt;public&lt;/code&gt;, so the font doesn't need download after first use.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2 id="adding-to-the-visualforce-page"&gt;Adding to the VisualForce Page&lt;/h2&gt; 
&lt;p&gt;The font gets added using a stylesheet that is included in the zip file added as a resource in the previous step. the &lt;code&gt;apex:stylesheet&lt;/code&gt; element takes care of that. The only catch: the zip file is internally "expanded" OS/X style with the file name (sans extension) as directory name. So the tag needs to look like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;  &amp;lt;apex:stylesheet value="{!URLFOR($Resource.fontawesome,'/font-awesome-4.7.0/css/font-awesome.css')}"/&amp;gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;h2 id="using-icons"&gt;Using Icons&lt;/h2&gt; 
&lt;p&gt;This follows the standard approach: you create an empty &lt;code&gt;&amp;amp;lt;i&amp;amp;gt;&lt;/code&gt; element and use the class property to specify icon and options. Like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;  &amp;lt;i style="color: red" class="fa fa-user-circle fa-2x" aria-hidden="true"&amp;gt;&amp;lt;/i&amp;gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Make sure you have a look at the &lt;a href="http://fontawesome.io/icons/"&gt;full selection&lt;/a&gt; of icons available.&lt;/p&gt; 
&lt;p&gt;As usual: YMMV&lt;/p&gt;</description>
	<link>2017/07/using-fontawesome-in-your-visualforce-pages.html</link>
	<author>Stephan H Wissel</author>
	<guid>97E8ED82940D30104825815F0045EF13</guid>
	<pubDate>2017-07-14 08:43</pubDate>

</item>
<item>
	<title>Salesforce Community License Overview</title>
	<description>&lt;p&gt;To facilitate collaboration across corporate boundaries, Salesforce offers &lt;b&gt;Salesforce Communities&lt;/b&gt;. The licence for communities come in three flavours: customer community, customer community plus and partner community. There are similarities and differences between the entitlements.&lt;/p&gt; 
&lt;p&gt;The biggest difference can be seen between customer community and customer community plus. There's a simple rationale behind it: a customer community account uses simplified sharing access, so the computational load to determine access of potentially millions of users stays reasonable and easy to grasp for administrators:&lt;/p&gt; 
&lt;a href="/blog/images/2017/CommunityLicenses.jpg" alt="Click for a bigger version"&gt;&lt;img src="/blog/images/2017/CommunityLicenses640.jpg" border="0" alt="Community License Overview"&gt;&lt;/a&gt; 
&lt;p&gt;All licences, full Salesforce or one of the community licence types, access the same data, in the confines of the entitlements. So it's NOT different products, just different permissions on the Salesforce platform.&lt;/p&gt;</description>
	<link>2017/07/salesforce-community-license-overview.html</link>
	<author>Stephan H Wissel</author>
	<guid>9B77F8952FFBAA284825815F004B1D1E</guid>
	<pubDate>2017-07-10 09:40</pubDate>

</item>
<item>
	<title>Sharing is caring - Salesforce edition</title>
	<description>&lt;p&gt;I like &lt;a href="/blog/2014/02/domino-development-back-to-basics-part-6-better-safe-than-sorry-security.html"&gt;declarative security&lt;/a&gt; to give access exactly to the extend a user requires. When learning Salesforce, I discovered to my delight the portfolio of possibilities to tailor access. With great powers, as we know, come great responsibilities. Learning the Salesforce lingo can be quite daunting. So here is my little overview:&lt;/p&gt; 
&lt;a href="/blog/images/2017/SalesforceSharingTerminology.jpg"&gt;&lt;img src="/blog/images/2017/SalesforceSharingTerminology640.jpg" border="0" alt="Salesforce Sharing Terminology, click for full size"&gt;&lt;/a&gt; 
&lt;ul&gt; 
 &lt;li&gt;Access to data in Salesforce is based on two principles: everything is &lt;b&gt;owner based&lt;/b&gt; and a generally restricted access can be &lt;b&gt;extended&lt;/b&gt; for given conditions, but not limited. This single vector of access makes systems cleaner that the ability to add and remove privileges based on conditions. It avoids the need to resolve conflicts where condition 1 gives access, while condition 2 would remove it. These conflict solution rules are a security flaw in waiting (prime vector for human error). Nevertheless access in Salesforce need to be well planned (How much does any role need to see: give to little and you invite data duplicates, give too much and you increase leakage risks) - How to plan is another story for another time&lt;/li&gt; 
 &lt;li&gt;Access has 3 element: access to objects (that would be access to classes in OO), access to records (instances of a class) and fields (properties of a class instance) &lt;/li&gt; 
 &lt;li&gt;Computation starts from the organization wide settings, which are the most restrictive settings for a given organisation and then gets extended with various means (see image above)&lt;/li&gt; 
 &lt;li&gt;There's a general distinction between internal access and access via a community. This reflects the need to be able to interact with customers, suppliers and partners in a controlled fashion&lt;/li&gt; 
 &lt;li&gt;Owner based: I've seen this quite often: data exists, gets used, but nobody wants to own it, the owner has left or data gets inaccessible when the owner gets deleted. All this issues don't happen in Salesforce since no object data can exist that doesn't have an owner and owner transfer capability is baked into the platform (even rule based, but that's another story for another time)&lt;/li&gt; 
 &lt;li&gt;Hierarchical: access rules know the role and reporting hierarchy. So access can be granted to a user and her entire reporting hierarchy including subordinates etc. Quite extensive possibilities worth exploring&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;As usual YMMV&lt;/p&gt;</description>
	<link>2017/07/sharing-is-caring-salesforce-edition.html</link>
	<author>Stephan H Wissel</author>
	<guid>4DB48552876449C84825815F0046B560</guid>
	<pubDate>2017-07-07 08:52</pubDate>

</item>

</channel>
</rss>
