<?xml version="1.0"?>
<rss version="2.0"
><channel
	><title>wissel.net Usability - Productivity - Business - The web - Singapore and Twins</title>
	<link>https://wissel.net/blog/stories.rss</link>
	<description>Thoughts, Insights and Opinions of Stephan H. Wissel. Topics included: IBM Lotus Notes and Domino, IBM Websphere, other IBM Lotus stuff,  J2EE, .Net, Software Archtecture, Personcentric Development, Agile Software, SDLC, Singapore and my Twins</description>
	<language>en,de</language>
	<copyright>(C) 2003 - 2017 Stephan H. Wissel, All rights reserved</copyright>
	<pubdate>Fri, 26 Jan 2018 19:59:58 +0800</pubdate>
<item
	><title>Excel in Continuous Integration</title>
	<description>&lt;p&gt;Business Users like Excel. Besides its original use case of calculating, lists are a favourite use case. They also serve as poor man's requirement and bug tracker, so they siep into software development too.&lt;/p&gt; 
&lt;p&gt;While Excel sheets are great for interaction, they are a beast for anything automation. The irony of it: Modern Excel files (the xslx flavour) are nothing less than &lt;a href="https://en.wikipedia.org/wiki/Office_Open_XML"&gt;zip files with XML content&lt;/a&gt;. However that format is, let's say, [insert expletives here].&lt;/p&gt; 
&lt;p&gt;From an XML representation I would expect something like &lt;code&gt;&amp;lt;cell row=&amp;quot;23&amp;quot; col=&amp;quot;44&amp;quot;&amp;gt;Some value&amp;lt;/cell&amp;gt;&lt;/code&gt;. However that's not what Excel does. Rename an xlsx to zip and see for yourself. Also (which makes sense for Excel itself) empty cells are not represented in XML.&lt;/p&gt; 
&lt;p&gt;Cutting a long story short, an Excel file or its XML representation poses some challenges:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;XML format is not very suitable for automation, like generating reports using XSLT&lt;/li&gt; 
 &lt;li&gt;Excel automation only runs on Windows (and when you run headless, you trade the head for a headache). That makes it a no-go for most automation server environments&lt;/li&gt; 
 &lt;li&gt;Empty cells are absent from the XML (a variation of &amp;quot;not suitable&amp;quot;)&lt;/li&gt; 
 &lt;li&gt;Cross reports with other files (e.g. logs in XML format) is hard&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;To overcome these limitations I wrote &lt;a href="https://github.com/Stwissel/Excel2XML"&gt;Excel2XML&lt;/a&gt;. It is a little Java command line utility that converts Excel into a more digestible XML format. I used Microsoft's contribution to the &lt;a href="https://poi.apache.org/"&gt;Apache POI&lt;/a&gt; project to read the file. It has the following functions:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Extract workbooks in one or separate files per worksheet&lt;/li&gt; 
 &lt;li&gt;Ignore all formatting&lt;/li&gt; 
 &lt;li&gt;Computed cells return their last result values, unless it is a formula error, then the formula is returned&lt;/li&gt; 
 &lt;li&gt;The first line of each sheet is treated as column headers, which are extracted as columns/column elements&lt;/li&gt; 
 &lt;li&gt;Each cell has a &lt;code&gt;column&lt;/code&gt;, a &lt;code&gt;row&lt;/code&gt; and a &lt;code&gt;title&lt;/code&gt; attribute. The title reflects the value from the first row. This allows in XSLT to query the title instead of relying on the column number. Reordering, adding or removing columns won't kill your XSLT stylesheet that way&lt;/li&gt; 
 &lt;li&gt;Optional empty cells can be generated with an attribute of &lt;code&gt;empty=&amp;quot;true&amp;quot;&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Runs on Java8 completely from command line&lt;/li&gt; 
 &lt;li&gt;Calling it without parameters outputs the exact syntax of options&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The full syntax: &lt;code&gt;java -jar excel2xml.jar -i somefile.xslt [-o somefile.xml [ ]-e] [-s] [-w3,4]&lt;/code&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;-i the input file in xslx format&lt;/li&gt; 
 &lt;li&gt;-o the output file. If missing same name as input, but extension xml&lt;/li&gt; 
 &lt;li&gt;-e generate empty cells. If missing: cells without data are skipped&lt;/li&gt; 
 &lt;li&gt;-s generate a single file for the whole workbook. If missing: creates one file per sheet&lt;/li&gt; 
 &lt;li&gt;-w comma separated list of sheets to export. Starts at 0. If missing: exports all sheets&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Head over to the git repository and grab &lt;a href="https://github.com/Stwissel/Excel2XML/releases"&gt;a release&lt;/a&gt;. Let me know what use you found. As usual YMMV&lt;/p&gt;</description>
	<link>2017/10/excel-in-ci.html</link>
	<author>Stephan H Wissel</author>
	<guid>8439A1CD09FAA0D2482581AD004F86B5</guid>
	<pubDate>2017-10-02 10:28</pubDate>

</item>
<item
	><title>Static APEX code analysis with PMD</title>
	<description>&lt;p&gt;Coding standard are only as good as they are followed. One venerable tool to check source code is &lt;a href="https://pmd.github.io/"&gt;PMD&lt;/a&gt;. When you, like I did, wonder what acronym PMD represents, you will &lt;a href="https://pmd.github.io/pmd-5.8.1/overview/meaning.html"&gt;be disappointed&lt;/a&gt;. PMD supports the usual suspects like C, C++, C#, Fortran, Java, JavaScript, Go, Groovy, XML... as well as &lt;a href="https://pmd.github.io/pmd-5.8.1/pmd-apex/index.html"&gt;Apex&lt;/a&gt; and &lt;a href="https://pmd.github.io/pmd-5.8.1/pmd-visualforce/index.html"&gt;Visualforce&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The &lt;a href="http://pmd.sourceforge.net/snapshot/pmd-apex/rules/index.html"&gt;default ruleset for Apex&lt;/a&gt; contains 34 rules and are the ones also used by &lt;a href="https://codeclimate.com/"&gt;CodeClimate&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;PMD is a Java application and you have a number options to run it:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;As a command line application&lt;/li&gt; 
 &lt;li&gt;Using ANT or Maven&lt;/li&gt; 
 &lt;li&gt;In your CI platform (using command line, ANT or Maven &lt;img src="https://wissel.net/blog/emoticons/DLYH-5MZVLU/$File/wink.gif" /&gt; )&lt;/li&gt; 
 &lt;li&gt;Linking your Github (or Gitlab, Bitbucket) repository to a service like &lt;a href="https://codeclimate.com/"&gt;CodeClimate&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;PMD supports a series of output formats like plain, csv, html (different flavours) and XML. When you understand XSLT, the XML format allows you to render whatever report you deem fit&lt;/p&gt;</description>
	<link>2017/07/static-apex-code-analysis-with-pmd.html</link>
	<author>Stephan H Wissel</author>
	<guid>6535CE6D841F1A0048258168005D0105</guid>
	<pubDate>2017-07-26 12:55</pubDate>

</item>
<item
	><title>From Blogsphere to a Static Site (Part 5) - Comment front-end</title>
	<description>&lt;p&gt;In &lt;a href="/blog/2017/05/from-blogsphere-to-a-static-site-part-4-comment-backend.html"&gt;Part 4&lt;/a&gt; I described the comment backend. This installment sheds a light on the comment front-end.&lt;/p&gt; 
&lt;p&gt;Comments can be tricky. One lesson I learned early: When your comment form is standard HTML form, it attracts spam like a light bulb attracts moths. So the requirement were:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The original blog entry should not contain any HTML form. It should be loaded on a button click using JavaScript. Nota bene: this isn't hide/show, but actual manipulation of the DOM&lt;/li&gt; 
 &lt;li&gt;The dynamic form shall not contain a POST URL, but submission should be in JavaScript - keeps a lot of the scumbags out already&lt;/li&gt; 
 &lt;li&gt;Submission should be secured with a Captcha&lt;/li&gt; 
 &lt;li&gt;Some formatting should be allowed. I opted for a Markdown editor with preview capabilities&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The first component is the placeholder for the existing comments and the button showing the comment form:&lt;/p&gt; 
&lt;pre class="brush: html"&gt;
&amp;lt;a name=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;
{{^commentsclosed}}
&amp;lt;div class=&amp;quot;well well-raised&amp;quot; style=&amp;quot;text-align : center&amp;quot;&amp;gt;
  &amp;lt;button class=&amp;quot;btn btn-lg btn-info&amp;quot; data-toggle=&amp;quot;collapse&amp;quot; data-target=&amp;quot;#commentform_{{UNID}}&amp;quot; type=&amp;quot;button&amp;quot;&amp;gt;
    Add your comment...&amp;nbsp;&amp;nbsp;&amp;lt;span class=&amp;quot;glyphicon glyphicon-comment&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;
  &amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div id=&amp;quot;commentform_{{UNID}}&amp;quot; class=&amp;quot;collapse&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
{{/commentsclosed}}
&amp;lt;div class=&amp;quot;well well-raised&amp;quot;&amp;gt;
  &amp;lt;h4&amp;gt;Comments&amp;lt;/h4&amp;gt;
  &amp;lt;ol id=&amp;quot;commentList&amp;quot;&amp;gt;
    {{#comments}}
    &amp;lt;li&amp;gt;
      {{#gravatarURL}}&amp;lt;img src=&amp;quot;{{.}}&amp;quot; class=&amp;quot;gravatarimg&amp;quot; /&amp;gt; {{/gravatarURL}} posted by &amp;lt;b&amp;gt;{{author}}&amp;lt;/b&amp;gt; on &amp;lt;i&amp;gt;{{createdString}}&amp;lt;/i&amp;gt;:
      &amp;lt;br /&amp;gt; {{&amp;amp; comment}}
      &amp;lt;hr style=&amp;quot;clear : both&amp;quot; /&amp;gt;
    &amp;lt;/li&amp;gt; {{/comments}} {{^comments}}
    &amp;lt;li id=&amp;quot;nocomments&amp;quot;&amp;gt;
      &amp;lt;h5&amp;gt;No comments yet, be the first to comment&amp;lt;/h5&amp;gt;
    &amp;lt;/li&amp;gt;
    {{/comments}}
  &amp;lt;/ol&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/pre&gt; 
&lt;p&gt;The second component is the comment form, implemented as mustache template - one of the reasons I picked Mustache: runs on the server and the client in tons of languages&lt;/p&gt; 
&lt;pre class="brush: html"&gt;
&amp;lt;form title=&amp;quot;Comment form for blog discussion&amp;quot; onSubmit=&amp;quot;return addComment(this,'{{recaptchaid}}','{{parentId}}')&amp;quot; class=&amp;quot;form-vertical well well-raised&amp;quot;&amp;gt;
  &amp;lt;fieldset&amp;gt;
    &amp;lt;legend&amp;gt;Add your comment&amp;lt;/legend&amp;gt;
    &amp;lt;p&amp;gt;Please note: &amp;lt;b&amp;gt;Comments without a valid and working eMail address will be removed.&amp;lt;/b&amp;gt;
      &amp;lt;br /&amp;gt; This is my site, so I decide what stays here and what goes.&amp;lt;/p&amp;gt;
     &amp;lt;div class=&amp;quot;control-group&amp;quot; id=&amp;quot;commentcontrol&amp;quot;&amp;gt;
      &amp;lt;label class=&amp;quot;control-label&amp;quot; for=&amp;quot;Commentor&amp;quot;&amp;gt;Name (required, published)&amp;lt;/label&amp;gt;
      &amp;lt;div class=&amp;quot;controls&amp;quot;&amp;gt;
        &amp;lt;input class=&amp;quot;input-xlarge focused&amp;quot; id=&amp;quot;Commentor&amp;quot; size=&amp;quot;30&amp;quot; accesskey=&amp;quot;n&amp;quot; name=&amp;quot;nameAuthor&amp;quot; /&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;label class=&amp;quot;control-label&amp;quot; for=&amp;quot;Email&amp;quot;&amp;gt;eMail (required, not published)&amp;lt;/label&amp;gt;
      &amp;lt;div class=&amp;quot;controls&amp;quot;&amp;gt;
        &amp;lt;input type=&amp;quot;eMail&amp;quot; class=&amp;quot;input-xlarge focused&amp;quot; id=&amp;quot;Email&amp;quot; size=&amp;quot;30&amp;quot; accesskey=&amp;quot;n&amp;quot; name=&amp;quot;txtEmail&amp;quot; placeholder=&amp;quot;A working eMail please!&amp;quot; /&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;label class=&amp;quot;control-label&amp;quot; for=&amp;quot;webSite&amp;quot;&amp;gt;URL (optional)&amp;lt;/label&amp;gt;
      &amp;lt;div class=&amp;quot;controls&amp;quot;&amp;gt;
        &amp;lt;input type=&amp;quot;url&amp;quot; class=&amp;quot;input-xlarge&amp;quot; id=&amp;quot;webSite&amp;quot; size=&amp;quot;30&amp;quot; accesskey=&amp;quot;n&amp;quot; name=&amp;quot;txtWebSite&amp;quot; /&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div class=&amp;quot;controls&amp;quot;&amp;gt;
        &amp;lt;div id=&amp;quot;wmd-panel&amp;quot; class=&amp;quot;wmd-panel&amp;quot;&amp;gt;
          &amp;lt;table style=&amp;quot;width : 100%&amp;quot; border=&amp;quot;0&amp;quot;&amp;gt;
            &amp;lt;tr&amp;gt;
              &amp;lt;td style=&amp;quot;width : 50%; vertical-align : top&amp;quot;&amp;gt;
                &amp;lt;label class=&amp;quot;control-label&amp;quot; for=&amp;quot;wmd-input&amp;quot;&amp;gt;Your Comment (Use markdown like &amp;lt;a href=&amp;quot;//stackoverflow.com/editing-help&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Stackoverflow&amp;lt;/a&amp;gt;)&amp;lt;/label&amp;gt;
                &amp;lt;div id=&amp;quot;wmd-button-bar&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
                &amp;lt;textarea class=&amp;quot;wmd-input&amp;quot; id=&amp;quot;wmd-input&amp;quot; name=&amp;quot;Body&amp;quot;&amp;gt;&amp;lt;/textarea&amp;gt;
              &amp;lt;/td&amp;gt;
              &amp;lt;td style=&amp;quot;width : 50%; vertical-align : top&amp;quot;&amp;gt;
                &amp;lt;label class=&amp;quot;control-label&amp;quot;&amp;gt;Preview&amp;lt;/label&amp;gt;
                &amp;lt;div id=&amp;quot;wmd-preview&amp;quot; class=&amp;quot;wmd-panel wmd-preview&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
              &amp;lt;/td&amp;gt;
            &amp;lt;/tr&amp;gt;
          &amp;lt;/table&amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div class=&amp;quot;controls&amp;quot; id=&amp;quot;captchadiv&amp;quot;&amp;gt;Captcha here&amp;lt;/div&amp;gt;
      &amp;lt;div class=&amp;quot;form-actions&amp;quot;&amp;gt;
        &amp;lt;button id=&amp;quot;commentsubmit&amp;quot; type=&amp;quot;submit&amp;quot; class=&amp;quot;btn btn-primary btn-large&amp;quot;&amp;gt;Post your comment&amp;lt;/button&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;alert alert-block&amp;quot; id=&amp;quot;alertContainer&amp;quot; style=&amp;quot;display : none&amp;quot;&amp;gt;One moment please, submitting comment...&amp;lt;/div&amp;gt;
  &amp;lt;/fieldset&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/pre&gt; 
&lt;p&gt;The whole mechanism gets to work with just a few jQuery JavaScript functions (Vanilla JS would work too, but I had JQuery already for the social buttons, so I reused that) and the respective JS files:&lt;/p&gt;</description>
	<link>2017/07/from-blogsphere-to-a-static-site-part-5-comment-front-end.html</link>
	<author>Stephan H Wissel</author>
	<guid>7380F00B6085195048258163005240F6</guid>
	<pubDate>2017-07-20 10:58</pubDate>

</item>
<item
	><title>Ownership flow of customer community created cases</title>
	<description>&lt;p&gt;In a previous entry I &lt;a href="/blog/d6plinks/SHWL-APBH4Q"&gt;mapped out&lt;/a&gt; sharing abilities the Salesforce platform is capable of.&lt;/p&gt; 
&lt;p&gt;In this entry I will put these capabilities to practial use. The scenario starts with a customer logging into the customer community and raising a ticket. Client representative, the partner and support staff need/want access to the case. The case needs to flow along the same processing as cases created by other means (call, email, IoT). The following diagram explains the flow (click for a &lt;a href="/blog/images/2017/CustomerCreatedCases.png"&gt;larger version&lt;/a&gt;):&lt;/p&gt; 
&lt;a href="/blog/images/2017/CustomerCreatedCases.png" alt="Click to get a bigger version"&gt;&lt;img src="/blog/images/2017/CustomerCreatedCases640.jpg" border="0" alt="Customer Portal Created Cases Ownership flow" /&gt;&lt;/a&gt; 
&lt;p&gt;The diagram has been rendered using &lt;a href="https://www.websequencediagrams.com/"&gt;Websequencediagrams&lt;/a&gt; based on a plain text file:&lt;/p&gt;</description>
	<link>2017/07/ownership-flow-of-customer-community-created-cases.html</link>
	<author>Stephan H Wissel</author>
	<guid>83FFC90480FAC1EB4825815F004C494B</guid>
	<pubDate>2017-07-16 09:53</pubDate>

</item>
<item
	><title>Using FontAwesome in your VisualForce pages</title>
	<description>&lt;p&gt;I'm a big fan of &lt;a href="http://fontawesome.io/"&gt;Font Awesome&lt;/a&gt; (including backing &lt;a href="https://fontawesome.com/"&gt;Version 5&lt;/a&gt;). It allows to add icons without the overhead of loading tons of small graphic files. In a recent internal project I had to integrate FontAwesome into a Salesforce VisualForce page&lt;/p&gt; 
&lt;h2 id="installing-fontawesome"&gt;Installing FontAwesome&lt;/h2&gt; 
&lt;p&gt;In theory you could load the font from a CDN. However based on security settings this might or might not work. So I decided to add FontAwesome as resource to my project:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;a href="http://fontawesome.io/assets/font-awesome-4.7.0.zip"&gt;Download FontAwesome 4&lt;/a&gt;. Or support the team and use &lt;a href="https://fontawesome.com/"&gt;Version 5&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Add the zip file as static resource to your setup:&lt;br /&gt; &lt;img src="/blog/images/2017/SFFAStatic.png" alt="Static Resource for FontAwesome" /&gt;&lt;/li&gt; 
 &lt;li&gt;Make sure you have set the cache control to &lt;code&gt;public&lt;/code&gt;, so the font doesn't need download after first use.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2 id="adding-to-the-visualforce-page"&gt;Adding to the VisualForce Page&lt;/h2&gt; 
&lt;p&gt;The font gets added using a stylesheet that is included in the zip file added as a resource in the previous step. the &lt;code&gt;apex:stylesheet&lt;/code&gt; element takes care of that. The only catch: the zip file is internally &amp;quot;expanded&amp;quot; OS/X style with the file name (sans extension) as directory name. So the tag needs to look like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;  &amp;lt;apex:stylesheet value=&amp;quot;{!URLFOR($Resource.fontawesome,'/font-awesome-4.7.0/css/font-awesome.css')}&amp;quot;/&amp;gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;h2 id="using-icons"&gt;Using Icons&lt;/h2&gt; 
&lt;p&gt;This follows the standard approach: you create an empty &lt;code&gt;&amp;amp;lt;i&amp;amp;gt;&lt;/code&gt; element and use the class property to specify icon and options. Like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;  &amp;lt;i style=&amp;quot;color: red&amp;quot; class=&amp;quot;fa fa-user-circle fa-2x&amp;quot; aria-hidden=&amp;quot;true&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Make sure you have a look at the &lt;a href="http://fontawesome.io/icons/"&gt;full selection&lt;/a&gt; of icons available.&lt;/p&gt; 
&lt;p&gt;As usual: YMMV&lt;/p&gt;</description>
	<link>2017/07/using-fontawesome-in-your-visualforce-pages.html</link>
	<author>Stephan H Wissel</author>
	<guid>97E8ED82940D30104825815F0045EF13</guid>
	<pubDate>2017-07-14 08:43</pubDate>

</item>
<item
	><title>Salesforce Community License Overview</title>
	<description>&lt;p&gt;To facilitate collaboration across corporate boundaries, Salesforce offers &lt;b&gt;Salesforce Communities&lt;/b&gt;. The licence for communities come in three flavours: customer community, customer community plus and partner community. There are similarities and differences between the entitlements.&lt;/p&gt; 
&lt;p&gt;The biggest difference can be seen between customer community and customer community plus. There's a simple rationale behind it: a customer community account uses simplified sharing access, so the computational load to determine access of potentially millions of users stays reasonable and easy to grasp for administrators:&lt;/p&gt; 
&lt;a href="/blog/images/2017/CommunityLicenses.jpg" alt="Click for a bigger version"&gt;&lt;img src="/blog/images/2017/CommunityLicenses640.jpg" border="0" alt="Community License Overview" /&gt;&lt;/a&gt; 
&lt;p&gt;All licences, full Salesforce or one of the community licence types, access the same data, in the confines of the entitlements. So it's NOT different products, just different permissions on the Salesforce platform.&lt;/p&gt;</description>
	<link>2017/07/salesforce-community-license-overview.html</link>
	<author>Stephan H Wissel</author>
	<guid>9B77F8952FFBAA284825815F004B1D1E</guid>
	<pubDate>2017-07-10 09:40</pubDate>

</item>
<item
	><title>Sharing is caring - Salesforce edition</title>
	<description>&lt;p&gt;I like &lt;a href="/blog/2014/02/domino-development-back-to-basics-part-6-better-safe-than-sorry-security.html"&gt;declarative security&lt;/a&gt; to give access exactly to the extend a user requires. When learning Salesforce, I discovered to my delight the portfolio of possibilities to tailor access. With great powers, as we know, come great responsibilities. Learning the Salesforce lingo can be quite daunting. So here is my little overview:&lt;/p&gt; 
&lt;a href="/blog/images/2017/SalesforceSharingTerminology.jpg"&gt;&lt;img src="/blog/images/2017/SalesforceSharingTerminology640.jpg" border="0" alt="Salesforce Sharing Terminology, click for full size" /&gt;&lt;/a&gt; 
&lt;ul&gt; 
 &lt;li&gt;Access to data in Salesforce is based on two principles: everything is &lt;b&gt;owner based&lt;/b&gt; and a generally restricted access can be &lt;b&gt;extended&lt;/b&gt; for given conditions, but not limited. This single vector of access makes systems cleaner that the ability to add and remove privileges based on conditions. It avoids the need to resolve conflicts where condition 1 gives access, while condition 2 would remove it. These conflict solution rules are a security flaw in waiting (prime vector for human error). Nevertheless access in Salesforce need to be well planned (How much does any role need to see: give to little and you invite data duplicates, give too much and you increase leakage risks) - How to plan is another story for another time&lt;/li&gt; 
 &lt;li&gt;Access has 3 element: access to objects (that would be access to classes in OO), access to records (instances of a class) and fields (properties of a class instance) &lt;/li&gt; 
 &lt;li&gt;Computation starts from the organization wide settings, which are the most restrictive settings for a given organisation and then gets extended with various means (see image above)&lt;/li&gt; 
 &lt;li&gt;There's a general distinction between internal access and access via a community. This reflects the need to be able to interact with customers, suppliers and partners in a controlled fashion&lt;/li&gt; 
 &lt;li&gt;Owner based: I've seen this quite often: data exists, gets used, but nobody wants to own it, the owner has left or data gets inaccessible when the owner gets deleted. All this issues don't happen in Salesforce since no object data can exist that doesn't have an owner and owner transfer capability is baked into the platform (even rule based, but that's another story for another time)&lt;/li&gt; 
 &lt;li&gt;Hierarchical: access rules know the role and reporting hierarchy. So access can be granted to a user and her entire reporting hierarchy including subordinates etc. Quite extensive possibilities worth exploring&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;As usual YMMV&lt;/p&gt;</description>
	<link>2017/07/sharing-is-caring-salesforce-edition.html</link>
	<author>Stephan H Wissel</author>
	<guid>4DB48552876449C84825815F0046B560</guid>
	<pubDate>2017-07-07 08:52</pubDate>

</item>
<item
	><title>Meeting a CxO</title>
	<description>&lt;img src="/blog/images/2017/MeetingaCxO.jpg" border="0" alt="Meeting a CxO" /&gt; 
&lt;br /&gt; These are my notes on a role play we did in Salesforce to better cater to successful CxO meetings. Most of the topics do apply to 
&lt;b&gt;any&lt;/b&gt; meeting, so no surprises here. We had actual CxO as participants. They shared that the most common item wanting is clear meeting agendas with outcomes, including them being time managed during the meeting. Second in line were unclear outcomes and not asking for a follow-up meeting.</description>
	<link>2017/06/meeting-a-cxo.html</link>
	<author>Stephan H Wissel</author>
	<guid>AF131F1CDCDDE8324825813900082175</guid>
	<pubDate>2017-06-08 09:28</pubDate>

</item>
<item
	><title>From Blogsphere to a Static Site (Part 4) - Comment backend</title>
	<description>&lt;p&gt;The blog needed a comment function. While there are social options around (Facebook, &lt;a href="https://disqus.com/"&gt;Disqus&lt;/a&gt; etc), I decided I want to roll my own. Partly because I want tighter control and partly, well, because I could. My comment backend would:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Provide a REST API to create comments in a JSON structure. The comment body will be &lt;a href="https://daringfireball.net/projects/markdown/syntax"&gt;Markdown&lt;/a&gt;. Reading would provide comments in ready to use HTML (I hear howling from the API crowd). No delete or update functionality&lt;/li&gt; 
 &lt;li&gt;Cleanup content considered harmful (code injection) and optional sport Captcha&lt;/li&gt; 
 &lt;li&gt;Store all content in a NoSQL database, in my case CouchDB (or Cloudant with its 20G free plan)&lt;/li&gt; 
 &lt;li&gt;Cache all queries for comment in an online cache to limit calls to the database&lt;/li&gt; 
 &lt;li&gt;Initially run on Domino, later on liberty or the raw JVM&lt;/li&gt; 
 &lt;li&gt;Initially also update Domino using a web service - so during transition no comments would get lost&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;In its initial incarnation the Comment servlet is a OSGi plugin that listens to the &lt;code&gt;/comments&lt;/code&gt; URL implemented as Wink servlet. So the class of interest is the one defining the service. We have one method for post, one for get and a helper function&lt;/p&gt; 
&lt;pre class="brush: java"&gt;
/**
 * Wink implementation of Comment service
 */
@Workspace(workspaceTitle = &amp;quot;Blog Comments&amp;quot;, collectionTitle = &amp;quot;Create or display comments&amp;quot;)
@Path(value = &amp;quot;/comments&amp;quot;)
@Produces(MediaType.TEXT_HTML)
@Consumes(MediaType.APPLICATION_JSON)
public class CommentService extends CommentResponse {

    private final Logger logger = Logger.getLogger(this.getClass().getName());

    @POST
    public Response createComment(@Context HttpServletRequest request) {
        final Monitor mon = MonitorFactory.start(&amp;quot;CommentService#createComment&amp;quot;);
        String result = &amp;quot;Sorry I can't process your comment at this time&amp;quot;;
        ResponseBuilder builder = Response.ok();

        try {
            InputStream in = request.getInputStream();
            BlogComment comment = BlogComment.load(in);
            in.close();

            if (comment != null) {
                this.captureSubmissionDetails(request, comment);
                result = CommentManager.INSTANCE.saveComment(comment, true);
            } else {
                builder.status(Status.NOT_ACCEPTABLE);
            }
            builder.entity(result).type(MediaType.TEXT_HTML_TYPE);

        } catch (Exception e) {
            String errorMessage = e.getMessage();
            builder.entity((((errorMessage == null) || errorMessage.equals(&amp;quot;&amp;quot;)) ? &amp;quot;Undefined error&amp;quot; : errorMessage)).type(
                    MediaType.TEXT_HTML_TYPE);
            Utils.logError(this.logger, e);
        }

        mon.stop();
        return builder.build();
    }

    @GET
    public Response getComments(@QueryParam(&amp;quot;parentid&amp;quot;) final String parentid) {
        Response response = null;
        final Monitor mon = MonitorFactory.start(&amp;quot;CommentService#getComments&amp;quot;);
        final ResponseBuilder builder = Response.ok();
        final Collection&amp;lt;BlogComment&amp;gt; bc = CommentManager.INSTANCE.loadComments(parentid);

        if ((bc == null) || bc.isEmpty()) {
            builder.status(Status.NO_CONTENT);
        } else {
            response = this.renderOutput(bc, &amp;quot;comment.mustache&amp;quot;);
        }
        mon.stop();
        return (response == null) ? builder.build() : response;
    }

    private void captureSubmissionDetails(HttpServletRequest request, BlogComment comment) {
        final Monitor mon = MonitorFactory.start(&amp;quot;CommentService#captureSubmissionDetails&amp;quot;);
        try {
            @SuppressWarnings(&amp;quot;rawtypes&amp;quot;)
            Enumeration hn = request.getHeaderNames();
            if (hn != null) {
                while (hn.hasMoreElements()) {
                    String key = hn.nextElement().toString();
                    comment.addParameter(key, request.getHeader(key));
                }
            }
            @SuppressWarnings(&amp;quot;rawtypes&amp;quot;)
            Enumeration pn = request.getParameterNames();
            if (pn != null) {
                while (pn.hasMoreElements()) {
                    String key = pn.nextElement().toString();
                    String[] values = request.getParameterValues(key);
                    comment.addParameters(key, values);

                    if (key.equals(&amp;quot;referer&amp;quot;)) {
                        comment.setReferer(values[0]);
                    } else if (key.equals(&amp;quot;user-agent&amp;quot;)) {
                        comment.setUserAgent(values[0]);
                    }

                }
            }
            @SuppressWarnings(&amp;quot;rawtypes&amp;quot;)
            Enumeration an = request.getAttributeNames();
            if (an != null) {
                while (an.hasMoreElements()) {
                    try {
                        String key = an.nextElement().toString();
                        comment.addAttribute(key, String.valueOf(request.getAttribute(key)));
                    } catch (Exception e) {
                        // No action here
                    }
                }
            }
            comment.addParameter(&amp;quot;REMOTE_HOST&amp;quot;, request.getRemoteHost());
            comment.addParameter(&amp;quot;REMOTE_ADDR&amp;quot;, request.getRemoteAddr());
            comment.addParameter(&amp;quot;REMOTE_USER&amp;quot;, request.getRemoteUser());

            // Needed for Captcha
            comment.setRemoteAddress(request.getRemoteAddr());
        } catch (Exception e) {
            Utils.logError(this.logger, e);
            // But no further action here!
        }
        mon.stop();
    }
}
&lt;/pre&gt;</description>
	<link>2017/05/from-blogsphere-to-a-static-site-part-4-comment-backend.html</link>
	<author>Stephan H Wissel</author>
	<guid>5CD6877EE6BFF61948258116003F5BF6</guid>
	<pubDate>2017-05-04 07:32</pubDate>

</item>
<item
	><title>The Decline and Fall of IBM</title>
	<description>&lt;p&gt;I wrote this quite a while ago, never finished the article until now. Enjoy. &lt;br /&gt;&lt;br /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;Yeah right!&lt;/b&gt;&lt;/p&gt; 
&lt;p&gt;With this words &lt;a href="http://www.cringely.com/"&gt;Robert X Cringley&lt;/a&gt; a.k.a Mark Stephens celebrates himself when he asserts something clever. His book &lt;a href="http://amzn.to/2qnDi7j"&gt;The Decline and Fall of IBM&lt;/a&gt; created quite some stir and was a hot topic of discussion especially among IBMers and alumni.&lt;br /&gt; So I got myself a copy and had a look. Clearly he has an axe to grind with IBM and everybody is invited. Many came. Half of the book consists of mostly grieving comments ranging from 2007 until 2014. With all this contributions, the content remains light on substance. After all it costs you less than a late.&lt;/p&gt; 
&lt;p&gt;Some of the stated observations are spot on, like &amp;quot;&lt;i&gt;IBM is a sales organisation&lt;/i&gt;&amp;quot;, others while looking like observations, but rather are opinions (e.g. &amp;quot;&lt;i&gt;IBM lost its way&lt;/i&gt;&amp;quot;) and statements that made me feel: &amp;quot;&lt;i&gt;why didn't the IBM board ask him to run IBM? He seems to know so much better!&lt;/i&gt;&amp;quot;, exactly like an arbitrary spectator of the world cup in a pub can tell you what a team did wrong.&lt;/p&gt; 
&lt;p&gt;I'm not saying, that all is well in IBM, that would be &lt;a href="https://www.fool.com/quote/nyse/ibm/ibm" title="They don't share that view either"&gt;a fools view&lt;/a&gt;. An organisation with a size and workforce exceeding several countries does live in challenging times. An economic system, that values growth over everything is problematic (In biology an organism that grows indefinitely is called cancer) at least and transiting to a global workforce on this scale is unparalleled. I share his view that the dance around the &lt;a href="https://en.wikipedia.org/wiki/Golden_calf"&gt;golden calf&lt;/a&gt; known as &lt;a href="https://www.forbes.com/sites/stevedenning/2011/11/28/maximizing-shareholder-value-the-dumbest-idea-in-the-world/"&gt;shareholder value&lt;/a&gt; might be praying to a false good.&lt;br /&gt;Here are some comments to Cringley's statements, that crossed my mind (paraphrasing):&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Cringley: &lt;i&gt;&amp;quot;In IBM management is royalty, the sales force the nobility and technical people are the peasants. No peasant can dream to become royalty&amp;quot;&lt;/i&gt;.&lt;br /&gt; &lt;b&gt;Yeah right!&lt;/b&gt; IBM fellows, IBM Distinguished Engineers or members of the IBM Academy of Technology will disagree. The irony here: in the &amp;quot;good old IBM (of Watson)&amp;quot; there was no career path for technical experts. In the IBM of today there is&lt;/li&gt; 
 &lt;li&gt;I worked a lot with our engineers in India and China. They are hard working, ready to learn and, by now, quite experienced. Asserting that they are less capable that their American counterparts, seems quite arrogant to me. Yes, they were unexperienced a decade ago, but that's a long time in IT years. Also: there are capable and incapable engineers everywhere. Pinning it on a specific country or region is (insert your own statement of backwards here). A real issue however are IBM's processes, that had been designed to cater to get less experienced people on board. They need an overhaul.&lt;/li&gt; 
 &lt;li&gt;Cringley: &lt;i&gt;&amp;quot;IBM should not sell the Intel servers to Lenovo&amp;quot;&lt;/i&gt;.&lt;br /&gt; &lt;b&gt;Yeah right!&lt;/b&gt; Cringley portrays it as the complete exit out of a server growth market. However IBM still has Intel based technology in their PureSystems and acquired skills and know how through the Softlayer acquisition how to build the special segment of Intel based machines that run in cloud size data centres. So instead of exiting a segment, it looks to me like eliminating duplicate product lines&lt;/li&gt; 
 &lt;li&gt;Cringley: &lt;i&gt;&amp;quot;IBM should port AIX to Intel&amp;quot;&lt;/i&gt;.&lt;br /&gt; &lt;b&gt;Yeah right!&lt;/b&gt; AIX runs on one class of IBM machines (System P), while Linux runs on everything from 
  &lt;strike&gt;
    Softlayer 
  &lt;/strike&gt;Bluemix to Mainframe. Linux outperforms AIX on System P in quite some workloads. So what makes a better investment? Port AIX or infuse the security know how of AIX into Linux? (the file system options are there already)&lt;/li&gt; 
 &lt;li&gt;Cringley: &lt;i&gt;&amp;quot;IBM should ditch the Power architecture and switch to Intel&amp;quot;&lt;/i&gt;&lt;br /&gt; &lt;b&gt;Yeah right!&lt;/b&gt; IBM has vast know how in building processors that will get lost when stopping to develop them. Asset utilisation isn't ditching assets, but making them more competitive. Intel and ARM aren't the only shops who can design processors, just have a look at &lt;a href="http://openpowerfoundation.org/"&gt;OpenPOWER&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Cringley: &lt;i&gt;Hadoop will make mainframes obsolete&lt;/i&gt;.&lt;br /&gt; &lt;b&gt;Yeah right!&lt;/b&gt; The technology is around for a decade, Google, its inventor, already moved on. Asserting a single technology will kill the I/O beasts known as Big Iron, looks like an inflight magazine statement. Besides the fact, that IBM offers a robust Hadoop implementation for a while already, which you can run on zLinux, if you choose so.&lt;/li&gt; 
 &lt;li&gt;The book contains quite some areas, like current staff morale, the process culture or the layers of management that highlight pain. However where he is wrong: IBM isn't blind to the issues and there are forces inside working for the betterment (even if there is a case of a &lt;a href="http://amzn.to/2pwgjab"&gt;Knowing-Doing-Gap&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; Of course, YMMY, so 
&lt;a href="http://amzn.to/2qnDi7j"&gt;read it for yourself&lt;/a&gt;</description>
	<link>2017/05/the-decline-and-fall-of-ibm.html</link>
	<author>Stephan H Wissel</author>
	<guid>FAD76A0F746D9A3748257D04003A257E</guid>
	<pubDate>2017-05-01 12:35</pubDate>

</item>

</channel>
</rss>
