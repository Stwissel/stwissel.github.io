<?xml version="1.0"?>
<rss version="2.0"
><channel
	><title>wissel.net Usability - Productivity - Business - The web - Singapore and Twins</title>
	<link>https://wissel.net/blog/stories.rss</link>
	<description>Thoughts, Insights and Opinions of Stephan H. Wissel. Topics included: IBM Lotus Notes and Domino, IBM Websphere, other IBM Lotus stuff,  J2EE, .Net, Software Archtecture, Personcentric Development, Agile Software, SDLC, Singapore and my Twins</description>
	<language>en,de</language>
	<copyright>(C) 2003 - 2017 Stephan H. Wissel, All rights reserved</copyright>
	<pubdate>Mon, 01 May 2017 13:14:44 +0800</pubdate>
<item
	><title>The Decline and Fall of IBM</title>
	<description>&lt;p&gt;I wrote this quite a while ago, never finished the article until now. Enjoy. &lt;br /&gt;&lt;br /&gt;&lt;/p&gt; 
&lt;p&gt;Yeah right!&lt;br /&gt;&lt;/p&gt; 
&lt;p&gt;With this words &lt;a href="http://www.cringely.com/"&gt;Robert X Cringley&lt;/a&gt; a.k.a Mark Stephens celebrates himself when he asserts something clever. His book &lt;a href="http://amzn.to/2qnDi7j"&gt;The Decline and Fall of IBM&lt;/a&gt; created quite some stir and was a hot topic of discussion especially among IBMers and alumni.&lt;br /&gt; So I got myself a copy and had a look. Clearly he has an axe to grind with IBM and everybody is invited. Many came. Half of the book consists of mostly grieving comments ranging from 2007 until 2014. With all this contributions, the content remains light on substance. After all it costs you less than a late.&lt;/p&gt; 
&lt;p&gt;Some of the stated observations are spot on, like &amp;quot;&lt;i&gt;IBM is a sales organisation&lt;/i&gt;&amp;quot;, others while looking like observations, but rather are opinions (e.g. &amp;quot;&lt;i&gt;IBM lost its way&lt;/i&gt;&amp;quot;) and statements that made me feel: &amp;quot;&lt;i&gt;why didn't the IBM board ask him to run IBM? He seems to know so much better!&lt;/i&gt;&amp;quot;, exactly like an arbitrary spectator of the world cup in a pub can tell you what a team did wrong.&lt;/p&gt; 
&lt;p&gt;I'm not saying, that all is well in IBM, that would be &lt;a href="https://www.fool.com/quote/nyse/ibm/ibm" title="They don't share that view either"&gt;a fools view&lt;/a&gt;. An organisation with a size and workforce exceeding several countries does live in challenging times. An economic system, that values growth over everything is problematic (In biology an organism that grows indefinitely is called cancer) at least and transiting to a global workforce on this scale is unparalleled. I share his view that the dance around the &lt;a href="https://en.wikipedia.org/wiki/Golden_calf"&gt;golden calf&lt;/a&gt; known as &lt;a href="https://www.forbes.com/sites/stevedenning/2011/11/28/maximizing-shareholder-value-the-dumbest-idea-in-the-world/"&gt;shareholder value&lt;/a&gt; might be praying to a false good.&lt;br /&gt;Here are some comments that crossed my mind (paraphrasing statements):&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;i&gt;&amp;quot;In IBM management is royalty, the sales force the nobility and technical people are the peasants. No peasant can dream to become royalty&amp;quot;&lt;/i&gt;. Yeah right! IBM fellows, IBM Distinguished Engineers or members of the IBM Academy of Technology will disagree. The irony here: in the &amp;quot;good old IBM (of Watson)&amp;quot; there was no career path for technical experts. In the IBM of today there is&lt;/li&gt; 
 &lt;li&gt;I work a lot with our engineers in India and China. They are hard working, ready to learn and by now quite experienced. Asserting that they are less capable that their American counterparts, seems quite arrogant to me. Yes, they were unexperienced a decade ago, but that's a long time in IT years. Also: there are capable and incapable engineers everywhere. Pinning it on a country or region is (insert your own statement of backwards here). A real issue however are IBM's processes, that had been designed to cater to get less experienced people on board. They need an overhaul to cater to that reality.&lt;/li&gt; 
 &lt;li&gt;&lt;i&gt;&amp;quot;IBM should not sell the Intel servers to Lenovo&amp;quot;&lt;/i&gt;. Cringley portrays it as the complete exit out of a server growth market. However IBM still has Intel based technology in their PureSystems and acquired skills and know how through the Softlayer acquisition how to build the special segment of Intel based machines that run in cloud size data centres. So instead of exiting a segment, it looks to me like eliminating duplicate product lines&lt;/li&gt; 
 &lt;li&gt;&lt;i&gt;&amp;quot;IBM should port AIX to Intel&amp;quot;&lt;/i&gt;. Yeah right! AIX runs on one class of IBM machines (System P), while Linux runs on everything from 
  &lt;strike&gt;
    Softlayer 
  &lt;/strike&gt;Bluemix to Mainframe. Linux outperforms AIX on System P in quite some workloads. So what makes a better investment? Port AIX or infuse the security know how of AIX into Linux? (the file system options are there already)&lt;/li&gt; 
 &lt;li&gt;&lt;i&gt;&amp;quot;IBM should ditch the Power architecture and switch to Intel&amp;quot;&lt;/i&gt; Yeah right! IBM has vast know how in building processors that will get lost when stopping to develop them. Asset utilisation isn't ditching assets, but making them more competitive. Intel and Arm aren't the only shops who can design processors, just have a look at &lt;a href="http://openpowerfoundation.org/"&gt;OpenPOWER&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;i&gt;Hadoop will make mainframes obsolete&lt;/i&gt;. The technology is around for a decade, Google, its inventor, already moved on. Asserting a single technology will kill the I/O beasts known as Big Iron, looks like an inflight magazine statement. Besides the fact, that IBM offers a robust Hadoop implementation for a while already&lt;/li&gt; 
 &lt;li&gt;The book contains quite some areas, like current staff morale, the process culture or the layers of management that highlight pain. However where he is wrong: IBM isn't blind to the issues and there are forces inside working for the betterment (even if there is a case of a &lt;a href="http://amzn.to/2pwgjab"&gt;Knowing-Doing-Gap&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; Of course, YMMY, so 
&lt;a href="http://amzn.to/2qnDi7j"&gt;read it for yourself&lt;/a&gt;</description>
	<link>2017/05/the-decline-and-fall-of-ibm.html</link>
	<author>Stephan H Wissel</author>
	<guid>FAD76A0F746D9A3748257D04003A257E</guid>
	<pubDate>2017-05-01 12:35</pubDate>

</item>
<item
	><title>From Blogsphere to a Static Site (Part 3) - Generating pages</title>
	<description>&lt;p&gt;The rendering engine I choose is &lt;a href="mustache.github.com/mustache.5.html"&gt;mustache&lt;/a&gt; which describes itself as &amp;quot;&lt;i&gt;logic-less templating engine&lt;/i&gt;&amp;quot;. My main criteria was the availability on multiple platforms including &lt;a href="https://github.com/spullara/mustache.java"&gt;Java&lt;/a&gt; and &lt;a href="https://github.com/janl/mustache.js"&gt;JavaScript&lt;/a&gt; (I might port the rendering part to NodeJS at some time in the future).&lt;br /&gt; The only logic mustache supports is conditional rendering based on the presence or absence of an element. When an element is present and is an array (or a collection in Java) the body of the template gets repeated for each element in the array. A scalar value hence is treated as an array with one value only.&lt;/p&gt; 
&lt;p&gt;Mustache is simple to use. All you need is a data bean (in Java, a JSON structure for JavaScript) and a text file containing placeholders with the property names. E.g. &lt;code&gt;&amp;lt;h1&amp;gt;{{title}}&amp;lt;/h1&amp;gt;&lt;/code&gt; will render a headline with the title property of you data object. In Java that would be either a public variable or a call to &lt;code&gt;getTitle&lt;/code&gt; according to the bean specification. The blog rendering code therefore is quite simple:&lt;/p&gt; 
&lt;pre class="brush: java"&gt;
private void renderOneEntry(BlogEntry be, Mustache mustache) throws IOException {

        String location = this.config.destinationDirectory + be.getNewURL();
        String outDirs = location.substring(0, location.lastIndexOf(&amp;quot;/&amp;quot;));
        File dirs = new File(outDirs);
        if (!dirs.exists()) {
            dirs.mkdirs();
        }
        // Set the current context
        for (LinkItem cat : be.getCategory()) {
            String c = cat.name;
            this.allCategories.get(c.toLowerCase()).active = true;
        }
        this.allDateCategories.get(be.getDateYear()).active = true;

        if (be.getSeries() != null) {
            String series = be.getSeries();
            if (this.allSeries.containsKey(series)) {
                this.allSeries.get(series).get(be.getNewURL()).active = true;
            }
        }

        // Prepare to write out
        ByteArrayOutputStream out = new ByteArrayOutputStream(102400);
        Writer pw = new PrintWriter(out);

        // This is where the magic happens
        mustache.execute(pw, be);
        pw.flush();
        pw.close();
        this.saveIfChanged(out.toByteArray(), location);

        // Cleanup
        for (LinkItem cat : be.getCategory()) {
            String c = cat.name;
            this.allCategories.get(c.toLowerCase()).active = false;
        }
        this.allDateCategories.get(be.getDateYear()).active = false;

        if (be.getSeries() != null) {
            String series = be.getSeries();
            if (this.allSeries.containsKey(series)) {
                this.allSeries.get(series).get(be.getNewURL()).active = false;
            }
        }
    }
&lt;/pre&gt; 
&lt;p&gt;The actual rendering is just the line &lt;code&gt;mustache.execute(pw, be);&lt;/code&gt; The code around it prepares and resets the collections that might render on a page like categories, series or month and year. Also of interest is &lt;code&gt;this.saveIfChanged(out.toByteArray(), location);&lt;/code&gt; which only saves results back to disk if it actually has changed. Don't be mistaken: any change in layout will lead to a newly rendered page, so this is quite important to save as needed and not more (you don't want to have tons of identical files that only differ in their time stamp)&lt;/p&gt;</description>
	<link>2017/05/from-blogsphere-to-a-static-site-part-3-generating-pages.html</link>
	<author>Stephan H Wissel</author>
	<guid>02FE470F4B650113482581130012A956</guid>
	<pubDate>2017-05-01 11:23</pubDate>

</item>
<item
	><title>From Blogsphere to a Static Site (Part 2) - Cleaning up the HTML</title>
	<description>&lt;p&gt;Blogsphere allows to create RichText and plain HTML entries. To export them I need to grab the HTML, either the manual entered or the RichText generated on, clean it up (especially for my manual entered HTML) and then replace image sources and internal links using the new URL syntax. To make this happen I created 2 functions that saved images and attachments and created a lookup list, so the HTML cleanup has a mapping table to work with&lt;/p&gt; 
&lt;pre class="brush: java"&gt;
private void saveImage(Document doc) {
        String sourceDirectory = this.config.sourceDirectory + this.config.imageDirectory;
        try {
            String subject = doc.getItemValueString(&amp;quot;ImageName&amp;quot;);
            Date created = doc.getCreated().toJavaDate();
            @SuppressWarnings(&amp;quot;rawtypes&amp;quot;)
            Vector attNames = this.s.evaluate(&amp;quot;@AttachmentNames&amp;quot;, doc);
            String description = doc.getItemValueString(&amp;quot;ImageName&amp;quot;);
            String oldURL = this.config.oldImageLocation + doc.getItemValueString(&amp;quot;ImageUNID&amp;quot;) + &amp;quot;/$File/&amp;quot;;
            SimpleDateFormat sdf = new SimpleDateFormat(&amp;quot;yyyy&amp;quot;);
            String year = sdf.format(created);
            FileEntry fe = this.imgEntries.add(subject, oldURL, description, created);

            for (Object attObj : attNames) {
                try {
                    String attName = attObj.toString();
                    String newURL = this.config.webBlogLocation + this.config.imageDirectory + year + &amp;quot;/&amp;quot; + attName;
                    fe.add(attName, newURL, description, created);
                    String outDir = sourceDirectory + year + &amp;quot;/&amp;quot;;
                    this.ensureDirectory(outDir);
                    EmbeddedObject att = doc.getAttachment(attName);
                    att.extractFile(outDir + attName);
                    Utils.shred(att);
                } catch (NotesException e) {
                    e.printStackTrace();
                } catch (Exception e2) {
                    e2.printStackTrace();
                }
            }

        } catch (NotesException e) {
            e.printStackTrace();
        }

    }

    private void saveImageFromURL(String href, String targetName) {

        String fetchFromWhere = &amp;quot;https://&amp;quot; + this.config.bloghost + href;
        try {
            byte[] curImg = Request.Get(fetchFromWhere).execute().returnContent().asBytes();
            this.saveIfChanged(curImg, targetName);
        } catch (ClientProtocolException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }

    }
&lt;/pre&gt; 
&lt;p&gt;With images saved the HTML cleanup can proceed. As mentioned before I'm using &lt;a href="https://jsoup.org/"&gt;JSoup&lt;/a&gt; to process crappy HTML. It allows for easy extraction of elements and attributes, so processing of links an images is just a few lines&lt;/p&gt;</description>
	<link>2017/04/from-blogsphere-to-a-static-site-part-2-cleaning-up-the-html.html</link>
	<author>Stephan H Wissel</author>
	<guid>922F997388C85F0548258105004A17A1</guid>
	<pubDate>2017-04-17 09:29</pubDate>

</item>
<item
	><title>From Blogsphere to a Static Site (Part 1) - Objects</title>
	<description>The migration tooling revolves around data, so getting the data classes right is important. The data classes need to be designed to allow it to be populated either from the Blogsphere NSF or from a collection of JSON files (so the blog generation can continue when the NSF is gone). For the blog we need 3 objects: 
&lt;ul&gt; 
 &lt;li&gt;&lt;b&gt;BlogEntry&lt;/b&gt;: The main data containing a blog entry including its meta data&lt;/li&gt; 
 &lt;li&gt;&lt;b&gt;BlogComment&lt;/b&gt;: An entry with a comment for a Blog in a 1:n relation&lt;/li&gt; 
 &lt;li&gt;&lt;b&gt;FileEntry&lt;/b&gt;: information about downloadable files (needed for export)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;There will be auxiliary data classes like Config, RenderInstructions, Blogindex. Their content is derived from the data stored in the main object or, in case of Config, from disk.&lt;/p&gt; 
&lt;img src="/blog/images/2017/BlogDataClasses.png" border="0" alt="Data classes in the Blog" /&gt;</description>
	<link>2017/04/from-blogsphere-to-a-static-site-part-1-objects.html</link>
	<author>Stephan H Wissel</author>
	<guid>14A4D971F7B2205F48258103002C7F40</guid>
	<pubDate>2017-04-15 04:06</pubDate>

</item>
<item
	><title>From Blogsphere to a Static Site (Part 0) - Requirements</title>
	<description>Readers of this blog might have noticed, that blog layout and blog URLs have changed (a while ago). This blog now serves static HTML pages using a 
&lt;a href="https://www.nginx.com/"&gt;nginx&lt;/a&gt; web server (get used to nginx, it's coming in Connections Pink too). I will document the steps and code I used to get there. Step 0 is: define the requirements and evaluate the resulting constraints: 
&lt;ul&gt; 
 &lt;li&gt;Export of all Blogsphere content to HTML, including the conversion of entries written in RichText&lt;/li&gt; 
 &lt;li&gt;No export of configuration or layout required&lt;/li&gt; 
 &lt;li&gt;New site structure that shows articles in year and month folders&lt;/li&gt; 
 &lt;li&gt;Modular templating system with includes for repeated pieces (e.g. header, footer, sidebar)&lt;/li&gt; 
 &lt;li&gt;Summary pages for year, month and categories&lt;/li&gt; 
 &lt;li&gt;Summary page for article series&lt;/li&gt; 
 &lt;li&gt;Existing comments to become part of the html page&lt;/li&gt; 
 &lt;li&gt;Repeatability: export must be able to repeat, but not overwrite a page that hasn't actually changed&lt;/li&gt; 
 &lt;li&gt;Storage of exported pages in a file structure as JSON files&lt;/li&gt; 
 &lt;li&gt;Rendering of static site from Notes or from JSON directory&lt;/li&gt; 
 &lt;li&gt;Redirection file, so old links get a proper redirection to the new URL&lt;/li&gt; 
 &lt;li&gt;Have a comment database for new comments&lt;/li&gt; 
 &lt;li&gt;No pagination for any of the summary pages (I might change my mind on that one)&lt;/li&gt; 
 &lt;li&gt;Cleanup messy HTML automatically, fix syntax and URLs to posts and images&lt;/li&gt; 
 &lt;li&gt;Optimized HTML, CSS and JS for speedy delivery&lt;/li&gt; 
&lt;/ul&gt; I had a look at 
&lt;a href="https://jekyllrb.com/"&gt;Jekyll&lt;/a&gt;, which is the templating engine GitHub is using. I would have allowed me to just commit a new file and Github would render for me. Unfortunately Jekyll fell short of the article series and category overview pages.</description>
	<link>2017/04/from-blogsphere-to-a-static-site-part-0-requirements.html</link>
	<author>Stephan H Wissel</author>
	<guid>612BA839A81B273C4825810000526DC0</guid>
	<pubDate>2017-04-12 11:00</pubDate>

</item>
<item
	><title>Project Deep Purple - IBM Notes Native for iOS</title>
	<description>&lt;p&gt;We all heard the announcements around &lt;a href="https://itcblogs.currentanalysis.com/2017/02/23/at-ibm-the-future-of-collaboration-isnt-rosy-its-pink/"&gt;Project Pink&lt;/a&gt; headed by &lt;a href="https://www.linkedin.com/in/jasonroygary/"&gt;Jason R. Gary&lt;/a&gt;, the future of IBM Connections. Attending the conference we could admire him all &lt;a href="https://twitter.com/jasonroygary/status/836337112555323392"&gt;clad out in pink&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;However there is something more going on (and I'm not talking about his &amp;quot;don style&amp;quot; haircut). Besides the pink suit, Jason has been spotted in a deep purple jacket on several occasions, like his &lt;a href="https://www.youtube.com/watch?v=2gKIsWqbJIk#action=share"&gt;FossASIA talk&lt;/a&gt;. Digging deeper it seems IBM collaboration projects are now colour coded. Purple is chosen quite deliberately: &lt;a href="http://www.bourncreative.com/meaning-of-the-color-purple/"&gt;The color purple&lt;/a&gt;&amp;nbsp;is a rare occurring color in nature and as a result is often seen as having sacred meaning.&amp;nbsp;Purple&amp;nbsp;combines the calm stability of blue and the fierce energy of red. The color purple is often associated with royalty, nobility, luxury, power, and ambition. Purple also represents meanings of wealth, extravagance, creativity, wisdom, dignity, grandeur, devotion, peace, pride, mystery, independence, and magic.&lt;/p&gt; 
&lt;p&gt;You might have guessed it: it is the next generation of IBM Notes! Not one of the 
 &lt;strike&gt;
   fix 
 &lt;/strike&gt;feature packs, but an entire new generation. Under &lt;a href="http://www.monkey47.com/"&gt;the influence&lt;/a&gt; Jason admitted: &amp;quot;&lt;i&gt;We took the Notes Client source code and compiled it with XCode for iOS. Guess what: it worked. Cocoa needs some work, but it isn't rocket science&lt;/i&gt;&amp;quot;&lt;/p&gt; 
&lt;p&gt;There you have it! After banning Notes clients from your desktop, instead of relying on the &lt;a href="http://www-01.ibm.com/common/ssi/cgi-bin/ssialias?infotype=AN&amp;amp;subtype=CA&amp;amp;htmlfid=897/ENUS216-201"&gt;IBM Client Application Access&lt;/a&gt;, you just can launch &lt;i&gt;IBM Notes Native for iOS&lt;/i&gt;™ on your iPad and continue working. Any improvements and updates are automatically rolled out using the Apple app shop. Availability will be April 1st, 2018.&lt;/p&gt; 
&lt;p&gt;We live in interesting times!&lt;/p&gt;</description>
	<link>2017/04/project-deep-purple-ibm-notes-native-for-ios.html</link>
	<author>Stephan H Wissel</author>
	<guid>98749D6CB74202F7482580F5004F0EB4</guid>
	<pubDate>2017-04-01 10:23</pubDate>

</item>
<item
	><title>Goodbye IBM, hello Salesforce!</title>
	<description>&lt;p&gt;The &lt;a href="http://www.mom.gov.sg/"&gt;Ministry of Manpower&lt;/a&gt; in Singapore is running a campaign &amp;quot;&lt;a href="https://www.facebook.com/sgministryofmanpower/posts/1205144312868167"&gt;A new career at 55&lt;/a&gt;&amp;quot;. Intrigued by it, I decided to give it a shot.&lt;/p&gt; 
&lt;p&gt;I will be joining &lt;a href="https://www.salesforce.com/"&gt;Salesforce&lt;/a&gt; in Singapore as Cloud Solution Architect this Monday.&lt;/p&gt; 
&lt;p&gt;My 11 year tenure in IBM thus came to its end. With the new co-location policy sweeping though IBM, I realised, that staying in Singapore will not get me any closer to Notes than the &lt;a href="/blog/2016/12/the-totally-inofficial-guide-to-verse-on-premises.html"&gt;December delivery&lt;/a&gt; of Verse on premises. Moving with my offspring in JC wasn't an option.&lt;/p&gt; 
&lt;p&gt;Working with the &amp;quot;Yellow bubble&amp;quot; always was fun and I intend to continue to participate there. Over the years the community propelled me to one of the top &lt;a href="http://stackoverflow.com/questions/tagged/xpages"&gt;XPages&lt;/a&gt; experts on Stackoverflow, adopted my word creation &lt;a href="https://www.wissel.net/blog/2008/12/xagents-web-agents-xpages-style.html"&gt;XAgents&lt;/a&gt; and always made me feel welcome.&lt;/p&gt; 
&lt;p&gt;I had the opportunity to contribute code back to the community via OpenNTF on github. Check them out:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/OpenNTF/WebDAVForDomino"&gt;DominoDAV&lt;/a&gt;&lt;br /&gt; A webDAV implementation for Domino attachments. It allows you to fully round-trip edit office documents in a browser. It is extensible, so you could make views look like spreadsheets etc.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/OpenNTF/AFSfNC"&gt;Swiftfile Java for Notes&lt;/a&gt;&lt;br /&gt; We had to pick a different name (AFSfNC) to add to the confusion. The project is a Java plugin implementation of Swiftfile, the little tool that would predict what folder you would file a message to. In todays lingo one would call it: Cognitive tag prediction (in Notes Folders and Tags could be used interchangeable)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/OpenNTF/OOOService"&gt;Out of Office&lt;/a&gt;&lt;br /&gt; a Rest API that allows to check the OOO status of a given user&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/OpenNTF/Hackathon2017-P5"&gt;DominoRED&lt;/a&gt;&lt;br /&gt; Linking Domino and NodeRED. Very much work in progress &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;So let the adventure &amp;quot;From sensei to n00b&amp;quot; begin. See you on the other side!&lt;/p&gt;</description>
	<link>2017/04/goodbye-ibm-hello-salesforce.html</link>
	<author>Stephan H Wissel</author>
	<guid>8A203DBCB8E973A6482580F5001BBCC8</guid>
	<pubDate>2017-04-01 01:02</pubDate>

</item>
<item
	><title>@Formula on JSON</title>
	<description>&lt;p&gt;When you look at &amp;quot;&lt;i&gt;modern&lt;/i&gt;&amp;quot; programming styles, you will find novel concepts like &lt;a href="http://isomorphic.net/"&gt;isomorphic&lt;/a&gt; (runs on client or server), &lt;a href="http://www.restapitutorial.com/lessons/idempotency.html"&gt;Idempotency&lt;/a&gt; (same call, same result), &lt;a href="https://www.sitepoint.com/immutability-javascript/"&gt;Immutable&lt;/a&gt; (functions never mess with the parameters or global state) or &lt;a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/map"&gt;map operations&lt;/a&gt; (working on a set of data without looping).&lt;/p&gt; 
&lt;p&gt;I put &amp;quot;&lt;i&gt;modern&lt;/i&gt;&amp;quot; deliberately in quotes, since these ideas have been around since &lt;a href="https://en.wikipedia.org/wiki/Lisp_(programming_language)"&gt;Lisp&lt;/a&gt; (or for the younger of you: since you sorted all blocks by colour and size in kindergarden). In the Lotus world we got our share of this with the venerable &lt;a href="https://www.ibm.com/support/knowledgecenter/en/SSVRGU_9.0.1/basic/H_7_FORMULAS_FUNCTION_REFERENCE.html"&gt;@Formula&lt;/a&gt; language (the functions, not the commands), IBM Notes inherited from &lt;a href="https://en.wikipedia.org/wiki/Lotus_1-2-3"&gt;Lotus 1-2-3&lt;/a&gt;. While it has served us well, so far it has been confined to the realm of the &lt;a href="https://fileinfo.com/extension/nsf"&gt;NSF&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;Not any more!&lt;/b&gt; Thanks to &lt;a href="https://www.ibm.com/blogs/social-business/2017/01/31/not-miss-ibm-connect-2017/"&gt;Connections Pink&lt;/a&gt; and the ever ingenious &lt;a href="https://www.linkedin.com/in/maureenlelandhttps://www.linkedin.com/in/maureenleland"&gt;Maureen Leland&lt;/a&gt;, @Formula will come to a JSON structure near you soon. As far as I understood the plan: each @Function will serve as an endpoint to a (serverless) microservice that executes on values provided, returning a new value object that can be chained to the next call stream style. I'm very excited about this new development. Watch out for news about Connections Livegrid™.&lt;/p&gt; 
&lt;p&gt;Time for Maureen to undust &lt;a href="http://www.mvgirl.net/"&gt;her blog&lt;/a&gt;!&lt;/p&gt;</description>
	<link>2017/04/formula-on-json.html</link>
	<author>Stephan H Wissel</author>
	<guid>358AA1D8A95E9CF6482580F50017BAB1</guid>
	<pubDate>2017-04-01 12:19</pubDate>

</item>
<item
	><title>Agile Outsourcing</title>
	<description>&lt;h2&gt;The problem&lt;/h2&gt; 
&lt;a href="http://www.investopedia.com/terms/o/outsourcing.asp"&gt;Outsourcing&lt;/a&gt; is a &amp;quot;special&amp;quot; animal. Typically the idea is to save cost by letting a service provider execute work. The saving cost happens because the service provider is supposed to be able to perform this actions at scale. Increasingly outsourcing deals are motivated by a skill squeeze. So instead of maintaining in-house expertise, rely on the vendors to keep the light on. 
&lt;br /&gt; This is where the trouble starts. Negotiations on outsourcing contracts revolves around price (drive it down) and the 
&lt;a href="https://en.wikipedia.org/wiki/Service-level_agreement"&gt;SLA&lt;/a&gt; (add as many 9 behind the comma as possible). The single outcome of such contracts is extreme risk aversion. For illustration here is the impact of SLA levels : 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;SLA&lt;/th&gt; 
   &lt;th&gt;Total annual Downtime&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;98%&lt;/td&gt; 
   &lt;td&gt;7 days, 6h, 12min&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;99%&lt;/td&gt; 
   &lt;td&gt;3 days, 15h, 36min&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;99.9%&lt;/td&gt; 
   &lt;td&gt;8h, 45min, 36sec&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;99.99%&lt;/td&gt; 
   &lt;td&gt;52min, 34sec&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;99.999%&lt;/td&gt; 
   &lt;td&gt;5min, 16sec&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;99.9999%&lt;/td&gt; 
   &lt;td&gt;32 sec&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; The fixation on SLA has a clinical term: 
&lt;a href="https://en.wikipedia.org/wiki/Obsessive%E2%80%93compulsive_disorder"&gt;OCD&lt;/a&gt;. Any change is considered as dangerous as someone holding a knife at your throat and asked you to dance. 
&lt;br /&gt; Looking at some of the figures (I can't share) I would claim that short of highly parallel (and expensive) transaction system anything above 99.9% is wishful thinking. That doesn't deter negotiators to aim for a &amp;quot;look how many 9th I got&amp;quot; trophy. (While the Buddha reminds us: one cause of suffering is to close your eyes to reality). Expensive SLA violation clauses let outsourcers freeze all system, since any change (read: patches, upgrades, enhancements) is 
&lt;a href="http://www.statuscast.com/application-downtime-according-to-idc-gartner-and-others/"&gt;rightly identified&lt;/a&gt; as grave risk (to the profits). 
&lt;br /&gt; So all sorts of processes and checks get implemented to vet any change request and in practise avoid them. 
&lt;br /&gt; This usually leads to a lot of bureaucracy and glacial progress. As a result discontent, especially on the use of non-transactional system grows: Stuff like outdated eMail clients, lack of mobile support etc. etc. 
&lt;br /&gt; The relation between oursourcer and oursourcee grows, inevitably, challenging over time. Does it have to be that way? 
&lt;h2&gt;Some fresh thinking&lt;/h2&gt; Just move to cloud might not be the answer (or everybody would be there, it's 
&lt;a href="http://www.networkworld.com/article/3020235/cloud-computing/and-the-cloud-provider-with-the-best-uptime-in-2015-is.html"&gt;such a nice place&lt;/a&gt;). So what could be done? Here are some thoughts: 
&lt;ul&gt; 
 &lt;li&gt;Kiss goodby the wholesale SLA agreement. Classify systems based on business impact. A booking system for an airline surly deserves three nines (I doubt that four would make sense), while a website can live with one nine (as long as it distributed over the year)&lt;/li&gt; 
 &lt;li&gt;Take a page from the PaaS offerings: each element of the environment has a measurement and a price. So the outsourcing provider can offer ala card services instead of freezing the environment. A catalogue entry could be &amp;quot;Running a current and patched DB/2&amp;quot;, another entry could be &amp;quot;Run a legacy IIS, version xx&amp;quot;&lt;/li&gt; 
 &lt;li&gt;Customer and provider would agree on an annual catalogue value, based on the starting environment and any known plan at the time&lt;/li&gt; 
 &lt;li&gt;The catalogue would allow to decommission unneeded system and replace them with successors without much hassle (out with PHP, in with node.js)&lt;/li&gt; 
 &lt;li&gt;Automate, Automate, Automate - An outsourcer without DevOps (Puppet, Chef and tight monitoring) didn't get the 2017 message&lt;/li&gt; 
 &lt;li&gt;Transparency: Running systems over processes, Customer satisfaction over unrealistic SLA, Automation over documentation (I hear the howling), Repeatable procedures over locked down environments&lt;/li&gt; 
&lt;/ul&gt; What do you think?</description>
	<link>2017/02/agile-outsourcing.html</link>
	<author>Stephan H Wissel</author>
	<guid>28D047097AAD822D482580C1003C6EF8</guid>
	<pubDate>2017-02-08 07:00</pubDate>

</item>
<item
	><title>SAML and the Command Line</title>
	<description>One of the best kept secrets of Connections Cloud S1 is the 
&lt;a href="https://www-10.lotus.com/ldd/dominowiki.nsf/dx/IBM_Notes_Traveler_Administration_API"&gt;Traveler API&lt;/a&gt;. The API allows interactions that are missing from the Admin UI, like deleting a specific device or implementing an approval workflow. 
&lt;br /&gt; Unfortunately the API only offers authentication via SAML, OAuth or BasicAuth are missing. So any application interacting with the API needs to do 
&lt;a href="https://www.google.com.sg/search?q=SAML+Dance+Connections+Cloud"&gt;The SAML Dance&lt;/a&gt;. That's annoying when you have an UI to use, and a formidable challenge when you have a command line application, like a cron Job running unsupervised at interval. 
&lt;br /&gt; One lovely step in the process: the IBM IdP returns a HTML page with a hidden form containing the SAML assertion result to be posted back to the application provider. Quite interesting, when your application provider is a command line app. Let's get to work. 
&lt;br /&gt; The script is written in 
&lt;a href="https://nodejs.org"&gt;node.js&lt;/a&gt; and uses 
&lt;a href="https://www.npmjs.com/package/request"&gt;request&lt;/a&gt; and 
&lt;a href="https://www.npmjs.com/package/fast-html-parser"&gt;fast-html-parser&lt;/a&gt; npm package. The first step is to load the login form (which comes with a first set of cookies) 
&lt;br /&gt; 
&lt;pre class="brush: js"&gt;
var requestOptionsTemplate = {
    headers: {
        'Origin': 'https://api.notes.ap.collabserv.com/api/traveler/',
        'User-Agent': 'ancy CommandLine Script',
        'Connection': 'keep-alive',
        'Cache-Control': 'max-age=0',
        'Upgrade-Insecure-Requests': 1
    },
    'method': 'GET'
};

function scLoginPart1() {
    console.log('Authenticating to SmartCloud ...');
    var requestOptions = Object.assign({}, requestOptionsTemplate);
    requestOptions.url = 'https://apps.na.collabserv.com/manage/account/dashboardHandler/input';
    request(requestOptions, scLoginPart2);
}
&lt;/pre&gt; 
&lt;br /&gt; The function calls the URL where the login form can be found. The result gets delivered to the function 
&lt;code&gt;scLoginPart2&lt;/code&gt;. That function makes use of a global configuration variable 
&lt;code&gt;config&lt;/code&gt; that was created through 
&lt;code&gt;const config = require(&amp;quot;./config.json&amp;quot;)&lt;/code&gt; and contains all the credentials we need. Step2 submits the form and hands over to Step3. 
&lt;br /&gt; 
&lt;pre class="brush: js"&gt;
function scLoginPart2(err, httpResponse, body) {
    if (err) {
        return console.error(err);
    }
    // Capture cookies
    var outgoingCookies = captureCookies(httpResponse);
    var requestOptions = Object.assign({}, requestOptionsTemplate);
    requestOptions.headers.Cookie = outgoingCookies.join('; ');
    requestOptions.headers['Content-Type'] = 'application/x-www-form-urlencoded';
    requestOptions.method = 'POST';
    requestOptions.url = 'https://apps.ap.collabserv.com/pkmslogin.form';
    requestOptions.form = {
        'login-form-type': 'pwd',
        'error-code': '',
        'username': config.smartcloud.user,
        'password': config.smartcloud.password,
        'show_login': 'showLoginAgain'
    }
    request(requestOptions, scLoginPart3);
}

function captureCookies(response) {
    var incomingCookies = response.headers['set-cookie'];
    var outgoingCookies = [];
    if (incomingCookies) {
        incomingCookies.forEach(function(cookie) {
            outgoingCookies.push(cookie.split(';')[0]);
        });
    }
    // Array, allows for duplicate coolie names
    return outgoingCookies;
}
&lt;/pre&gt; 
&lt;br /&gt; Part 3 / 4 finally collect all the cookies we need, so to turn attention to getting the API token in step 5 
&lt;br /&gt; 
&lt;pre class="brush: js"&gt;
function scLoginPart3(err, httpResponse, body) {
    if (err) {
        console.error('Login failed miserably');
        return console.error(err);
    }
    // Login returns not 200 but 302
    // see https://developer.ibm.com/social/2015/06/23/slight-changes-to-the-form-based-login/
    if (httpResponse.statusCode !== 302) {
        return console.error('Wrong status code received: ' + httpResponse.statusCode);
    }

    var outgoingCookies = captureCookies(httpResponse);
    var redirect = httpResponse.headers.location;

    // This is the 3rd request we need to make to get finally all cookies for app.na
    var requestOptions = Object.assign({}, requestOptionsTemplate);
    requestOptions.headers.Cookie = outgoingCookies.join('; ');
    requestOptions.url = redirect;
    request(requestOptions, scLoginPart4);
}

function scLoginPart4(err, httpResponse, body) {
    if (err) {
        console.error('Login redirect failed miserably');
        return console.error(err);
    }
    var cookieHarvest = captureCookies(httpResponse);
    // Now we have some cookies in app, we need the SAML dance for api.notes
    scLoginPart5(cookieHarvest)
}
&lt;/pre&gt; 
&lt;br /&gt; In Part 5 we first request the URL with actual data (devices in our case), but get another SAML dance step, since we have 
&lt;code&gt;apps.na&lt;/code&gt; vs 
&lt;code&gt;api.notes&lt;/code&gt; in the URL</description>
	<link>2017/01/saml-and-the-command-line.html</link>
	<author>Stephan H Wissel</author>
	<guid>134DE77E2F5D7C55482580B8004B2B1E</guid>
	<pubDate>2017-01-30 09:41</pubDate>

</item>

</channel>
</rss>
