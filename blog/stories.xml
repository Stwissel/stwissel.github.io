<?xml version="1.0"?>
<rss version="2.0">
<channel>
	<title>wissel.net Usability - Productivity - Business - The web - Singapore and Twins</title>
	<link>https://wissel.net/blog/stories.rss</link>
	<description>Thoughts, Insights and Opinions of Stephan H. Wissel. Topics included: Salesforce, Lotus Notes and Domino, IBM Websphere, NodeJS, JavaScript,  J2EE, .Net, Software Archtecture, Personcentric Development, Agile Software, SDLC, Singapore and my Twins</description>
	<language>en,de</language>
	<copyright>(C) 2003 - 2019 Stephan H. Wissel, All rights reserved</copyright>
	<pubdate>Mon, 30 Dec 2019 11:48:36 +0000</pubdate>
<item>
	<title>http(s) debugging cheat sheet</title>
	<description>&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Martin_Luther"&gt;Martin Luther&lt;/a&gt; is &lt;a href="hhttps://www.redensarten-index.de/suche.php?suchbegriff=~~dem%20Volk%20aufs%20Maul%20schauen"&gt;attributed&lt;/a&gt; with the utterance "You have to watch how people talk". What works for the famous &lt;a href="https://en.wikipedia.org/wiki/Luther_Bible"&gt;bible translation&lt;/a&gt; applies to APIs as well. Despite &lt;a href="https://www.openapis.org/"&gt;Open Standards&lt;/a&gt; and &lt;a href="https://www.ietf.org/"&gt;a standard body&lt;/a&gt;, APIs do their own thing, not necessarily documented as they are.&lt;/p&gt; 
&lt;p&gt;While it is reasonable easy to watch them inside a browser using &lt;a href="https://developer.mozilla.org/en-US/docs/Tools"&gt;Developer Tools&lt;/a&gt; (also &lt;a href="https://developers.google.com/web/tools/chrome-devtools"&gt;here&lt;/a&gt;) it gets tricky when you want to watch an application like &lt;a href="https://support.apple.com/en-sg/guide/calendar/welcome/mac"&gt;macOS Calendar&lt;/a&gt;, &lt;a href="https://www.thunderbird.net/en-US/"&gt;Thunderbird&lt;/a&gt;, &lt;a href="https://slackhq.com/"&gt;Slack&lt;/a&gt;, &lt;a href="https://getbodo.com/"&gt;Bodo&lt;/a&gt; (for Jira).&lt;/p&gt; 
&lt;p&gt;This is your cheat-sheet.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#setup-your-https-forensics" id="setup-your-https-forensics"&gt;Setup your HTTP(s) Forensics&lt;/a&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Install the application you want to investigate (Yeah, a no brainer)&lt;/li&gt; 
 &lt;li&gt;Install a HTTP debugger, one of them (I use &lt;a href="https://wwww.charlesproxy.com"&gt;Charles Proxy&lt;/a&gt;) 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://proxyman.io"&gt;Proxyman&lt;/a&gt; (Mac)&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://wwww.charlesproxy.com"&gt;Charles Proxy&lt;/a&gt; (Mac, Win, Linux)&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://www.telerik.com/fiddler"&gt;Fiddler&lt;/a&gt; (Win)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Configure your HTTP debugger to be able to analyse &lt;strong&gt;https&lt;/strong&gt; traffic to your choosen calendar server&lt;/li&gt; 
 &lt;li&gt;Install &lt;a href="https://www.getpostman.com/"&gt;PostMan&lt;/a&gt; and &lt;a href="https://curl.haxx.se/"&gt;curl&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Have a place where you save your investigation results in &lt;a href="https://daringfireball.net/projects/markdown/"&gt;Markdown&lt;/a&gt;, &lt;code&gt;/docs&lt;/code&gt; in a GitHub repo is a good place&lt;/li&gt; 
 &lt;li&gt;Configure your HTTP debugger to intercept the http traffic on your target domain. This works different for each OS and debugger, so read the manual! 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://www.charlesproxy.com/documentation/proxying/ssl-proxying/"&gt;SSL Proxying&lt;/a&gt; for Charles Proxy&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://docs.telerik.com/fiddler/Configure-Fiddler/Tasks/DecryptHTTPS"&gt;Decrypt HTTPS&lt;/a&gt; for Fiddler&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://docs.proxyman.io/basic-features/ssl-proxying"&gt;SSL Proxying&lt;/a&gt; with Proxyman&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Fetch a cup of your favorite beverage, we are good to go&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;a href="#investigate" id="investigate"&gt;Investigate&lt;/a&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Switch on your HTTP debugger (this line is sponsored by &lt;a href="https://en.wiktionary.org/wiki/Captain_Obvious"&gt;Captain Obvious&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Execute &lt;strong&gt;one&lt;/strong&gt; command in your custom app. Typically something like "&lt;em&gt;login&lt;/em&gt;" or "&lt;em&gt;add account&lt;/em&gt;" or "&lt;em&gt;File Open&lt;/em&gt;" (that's my favorite in Office apps, fires 4 or more HTTP request when done against a http endpoint that understands &lt;em&gt;webDAV&lt;/em&gt;)&lt;/li&gt; 
 &lt;li&gt;Look at the &lt;strong&gt;raw&lt;/strong&gt; results. Each debugger has a nice &lt;a href="https://en.wikipedia.org/wiki/Graphical_user_interface"&gt;gui&lt;/a&gt; that separates headers, cookies and body payload, but you want to look at raw data: 
  &lt;ul&gt; 
   &lt;li&gt;Your request starts with &lt;em&gt;METHOD /route HTTP_Version&lt;/em&gt;, e.g. &lt;code&gt;POST /login HTTP/1.1&lt;/code&gt; Everything until the first empty line is header, followed eventually with a body. Knowing &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods"&gt;methods&lt;/a&gt; helps to set expectations. See also &lt;a href="https://tools.ietf.org/html/rfc7231#section-4"&gt;RFC 7231&lt;/a&gt;, &lt;a href="https://tools.ietf.org/html/rfc5789#section-2"&gt;RFC 5789&lt;/a&gt;, &lt;a href="https://tools.ietf.org/html/rfc2518"&gt;RFC 2518&lt;/a&gt;, &lt;a href="https://tools.ietf.org/html/rfc4918"&gt;RFC 4918&lt;/a&gt;, &lt;a href="https://tools.ietf.org/html/rfc3744"&gt;RFC 3744&lt;/a&gt; and &lt;a href="https://tools.ietf.org/html/rfc4791"&gt;RFC 4791&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;Your response starts with a status line &lt;em&gt;HTTP/1.1 StatusCode StatusMessage&lt;/em&gt; e.g. &lt;code&gt;HTTP/1.1 200 OK&lt;/code&gt; Again: everything until the first empty line is header, followed by the optional response body&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;It can get trickier when you app is already using &lt;em&gt;HTTP/2.0&lt;/em&gt; or later since it allows streaming or non-text payloads like &lt;a href="https://grpc.io/"&gt;gRPC&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Document that in markdown, bracket the http with three backticks, so it renders as source&lt;/li&gt; 
 &lt;li&gt;Repeat for other commands in your app&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;a href="#re-enactment" id="re-enactment"&gt;Re-enactment&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;What fun is &lt;a href="https://en.wikipedia.org/wiki/Detective"&gt;detective work&lt;/a&gt; without verifying results. This is where you turn to &lt;a href="https://www.getpostman.com/"&gt;Postman&lt;/a&gt; or if &lt;a href="https://www.urbandictionary.com/define.php?term=Tough%20As%20Nails"&gt;you have it&lt;/a&gt; - curl.&lt;/p&gt; 
&lt;p&gt;You want to use parameters for your hostname and the user specific parts (username, passwords) and you need to have a clear idea what are variable return values. Good candidtes to watch out for are cookies or header values. You need to &lt;a href="https://blog.getpostman.com/2014/01/27/extracting-data-from-responses-and-chaining-requests/"&gt;extract these values for chaining to the next request&lt;/a&gt;. With a little practise you should be able to make Postman behave like the original app&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#parting-words" id="parting-words"&gt;Parting words&lt;/a&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Check the terms of service of the application you are investigating. While public end-point are, well, public, you might have agreed in your &lt;a href="https://www.termsandconditionsgenerator.com/"&gt;T&amp;amp;C&lt;/a&gt; not to touch them&lt;/li&gt; 
 &lt;li&gt;This isn't an instuction for hacking, you still need to be you - with your credentials. Nevertheless you might stumble over "security by obscurity" or other annoyances&lt;/li&gt; 
 &lt;li&gt;Any app that uses http instead of https needs to die a horrible death&lt;/li&gt; 
 &lt;li&gt;Reading the API spec is potentially faster&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;As usual YMMV&lt;/p&gt;</description>
	<link>2019/12/http-debugging-cheat-sheet.html</link>
	<author>Stephan H. Wissel</author>
	<guid>851d62a0-2aee-11ea-a3eb-4b8263345d92</guid>
	<pubDate>30 December 2019</pubDate>

</item>
<item>
	<title>A Streaming Pattern for the vert.x EventBus (Part 1)</title>
	<description>&lt;p&gt;When dealing with large amounts of data, using &lt;a href="https://www.baeldung.com/java-8-streams"&gt;Streams&lt;/a&gt; allows processing happen the moment data arrives, not just when data is complete. Streaming is core to &lt;a href="http://reactivex.io/"&gt;reactive programming&lt;/a&gt;. This blog entry describes an approach where the &lt;a href="https://vertx.io"&gt;vert.x&lt;/a&gt; EventBus sits between requester and resource&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#the-scenario" id="the-scenario"&gt;The scenario&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;img src="/blog/images/2019/EventBus1.png" alt="Classic Eventbus Request Response"&gt;&lt;/p&gt; 
&lt;p&gt;Image created using &lt;a href="http://www.websequencediagrams.com/"&gt;WebSequenceDiagramms&lt;/a&gt;&lt;/p&gt; 
&lt;pre class="brush: bash"&gt;title Vert.x EventBus

participant Requester
participant EventBus
participant DataSource

Requester-&amp;gt;EventBus: request DataSet
EventBus-&amp;gt;DataSource: forward request
DataSource-&amp;gt;EventBus: reply with data
EventBus-&amp;gt;Requester: forward reply
&lt;/pre&gt; 
&lt;p&gt;A requester (e.g. the handler of a HTTP Listener) sends a request via the &lt;a href="https://vertx.io/docs/apidocs/io/vertx/core/eventbus/EventBus.html"&gt;EventBus&lt;/a&gt; using a &lt;strong&gt;request-response&lt;/strong&gt; pattern with &lt;a href="https://vertx.io/docs/apidocs/io/vertx/core/eventbus/EventBus.html#request-java.lang.String-java.lang.Object-io.vertx.core.eventbus.DeliveryOptions-io.vertx.core.Handler-"&gt;&lt;code&gt;EventBus.request(...)&lt;/code&gt;&lt;/a&gt;. Simple and easy. The problem with this: one request has one response. That doesn't work for streaming data.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#taking-a-page-from-the-military" id="taking-a-page-from-the-military"&gt;Taking a page from the military&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;The standard pattern for military commands is:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Utter the command&lt;/li&gt; 
 &lt;li&gt;Accnowledge the command&lt;/li&gt; 
 &lt;li&gt;Execute the command (&lt;a href="https://en.wikipedia.org/wiki/Risk_(game)"&gt;Conquer 14 countries&lt;/a&gt;, might take time. For Germans: &lt;a href="https://de.wikipedia.org/wiki/Risiko_(Spiel)"&gt;Liberate 14 countries&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Report completion of command&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;&lt;a href="#applying-to-the-eventbus" id="applying-to-the-eventbus"&gt;Applying to the EventBus&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Following the pattern above the first request/response only will establish the Intent (btw. &lt;a href="https://www.davidmarquet.com/turn-the-ship-around-a-true-story-of-turning-followers-into-leaders-by-david-marquet/"&gt;Intent Based Leadership&lt;/a&gt; is a smoking hot topic). Item 2 and 3 will be handled by a publish and subscribe pattern.&lt;/p&gt; 
&lt;p&gt;So our scenario now looks like this:&lt;/p&gt; 
&lt;p&gt;&lt;img src="/blog/images/2019/EventBus2.png" alt="Classic Eventbus Request Response"&gt;&lt;/p&gt; 
&lt;p&gt;Image created using &lt;a href="http://www.websequencediagrams.com/"&gt;WebSequenceDiagramms&lt;/a&gt;&lt;/p&gt; 
&lt;pre class="brush: bash"&gt;title Vert.x EventBus Streaming

participant Requester
participant EventBus
participant DataSource

Requester-&amp;gt;EventBus: start listening\non temp address
note over Requester, DataSource: Start request/response
Requester-&amp;gt;EventBus: request Stream\notify on temp address
EventBus-&amp;gt;DataSource: forward request
DataSource-&amp;gt;EventBus: reply withaccnowledgement
EventBus-&amp;gt;Requester: forward response
note over Requester, DataSource: End of request/response
note over Requester, DataSource: Start publish/subscribe
DataSource-&amp;gt;EventBus: publish first data
EventBus-&amp;gt;Requester: forward response
DataSource-&amp;gt;EventBus: publish more data
EventBus-&amp;gt;Requester: forward response
DataSource-&amp;gt;EventBus: publish last data
EventBus-&amp;gt;Requester: forward response
Requester-&amp;gt;EventBus: end listening\non temp address
note over Requester, DataSource: End of publish/subscribe
&lt;/pre&gt; 
&lt;p&gt;To implement this, I'm taking advantage of EventBus' &lt;a href="https://vertx.io/docs/apidocs/io/vertx/core/eventbus/DeliveryOptions.html"&gt;DeliveryOptions&lt;/a&gt; that allow me to set header values. I define a header &lt;code&gt;StreamListenerAddress&lt;/code&gt; that my data source will use for publishing data:&lt;/p&gt; 
&lt;pre class="brush: java"&gt;// Error handling omitted
public void initiateStreamResponse(final String dataAddress, final JsonObject requestMessage, Promise&amp;lt;Void&amp;gt; didItWork) {
	final String streamListenerAddress = "tempListenerAddresses." + UUID.randomUUID().toString();
	final EventBus eventBus = this.getVertx().eventBus();
	final MessageConsumer&amp;lt;JsonObject&amp;gt; dataReceiver = eventBus.consumer(streamListenerAddress);
	dataReceiver.handler(handler -&amp;gt; {
		final boolean isFirst = Boolean.parseBoolean(headers.get("first"));
		final boolean isComplete = Boolean.parseBoolean(headers.get("complete"));
		/*
	      Here goes the code feeding into the requester's logic e.g. a chunked HTTP response
	      or a websocket publish or a gRPC push. isFirst and isComplete can be true at the
	      same time when there is only a single response
		*/
	    ditItWork.complete();  
	});
	DeliveryOptions deliveryOptions = new DeliveryOptions();
	deliveryOptions.addHeader("StreamListenerAddress",streamListenerAddress);
	eventBus.request(dataAddress, requestMessage, deliveryOptions, ar -&amp;gt; {
			if (ar.succeeded()) {
				final Message&amp;lt;Object&amp;gt; resultMessage = ar.result();
				final boolean success = Boolean.parseBoolean(resultMessage.headers().get(Constants.HEADER_SUCCESS));
				if (!success) {
					consumer.unregister();
					didItWork.fail(new Error("Request for Data unsuccessfull"));
				}

			} else {
				consumer.unregister();
				didItWork.fail(ar.cause());
			}
		});
}
&lt;/pre&gt; 
&lt;h2&gt;&lt;a href="#what-next" id="what-next"&gt;What next?&lt;/a&gt;&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;In Part 2 I will describe the data source part of this approach&lt;/li&gt; 
 &lt;li&gt;In Part 2 I will wrap that in observable and observer&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;I'm using this pattern in the &lt;a href="https://www.projectkeep/io"&gt;Keep API&lt;/a&gt;, YMMV&lt;/p&gt;</description>
	<link>2019/12/a-streaming-pattern-for-the-vert.x-eventbus.html</link>
	<author>Stephan H. Wissel</author>
	<guid>33a42fc0-1659-11ea-991f-61b456ce46f5</guid>
	<pubDate>04 December 2019</pubDate>

</item>
<item>
	<title>Deep Human Super Skills for a VUCA world</title>
	<description>&lt;p&gt;We live in a world dominated by volatility, uncertainty, complexity and ambiguity (&lt;a href="https://en.wikipedia.org/wiki/Volatility,_uncertainty,_complexity_and_ambiguity"&gt;VUCA&lt;/a&gt;). Our traditional approach to a working career, learning a specific skill and stick to it, doesn't fit anymore. What is needed instead, is the subject of the book &lt;a href="https://www.deep-human.com/"&gt;Deep Human&lt;/a&gt; writen by &lt;a href="https://www.linkedin.com/in/crystal-lim-lange/"&gt;Crystal Lim-Lange&lt;/a&gt; and &lt;a href="https://www.linkedin.com/in/wolfgreg/"&gt;Dr. Gregor Lim-Lange&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#5-skills" id="5-skills"&gt;5 skills&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;a href="/blog/images/2019/DeepHumanSuperSkills.png"&gt;&lt;img src="/blog/images/2019/DeepHumanSuperSkills640.png" alt="5 human super skills"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;The 5 skills build on each other, forming the foundation and prerequisite for the next level. Here is my take, paraphrasing what I learned, how they fit together. Full details, including experiences how to get there are in the book.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Mindfulness&lt;/strong&gt; Being rooted in reality, seeing what is, without judgment and deep filters is the foundation of any progress. The practise of precisely observing your suroundings allows you to gather evidence for any assessment and action. The mindful person is master of their thoughs and doesn't fall prey easily to illusions. Of course it takes lifelong practise. The mind is like a muscle: once you start or stop training, it changes&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Self-Awarness&lt;/strong&gt; Once the mind has been sharpened and silenced, you can turn attention to the self. What are the sensations, emotions, thoughts, fears, hopes and believes that drive you? Armed with focus and mindfulness you can wrestle the driver's seat back from the monkey mind. Clarity about yourself leads to freedom to decide who you want to be instead of running on auto-pilot&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Empathy&lt;/strong&gt; Having honed the skill of self-awareness you can apply that to other sentients. Without clarity about yourself, this would fail, so self-awareness is the foundation of empathy, as mindfulness is the foundation of self-awareness. Learning to &lt;em&gt;walk in someone elses shoes&lt;/em&gt; deepends your understanding of a complex world. Empathy isn't a woolsy-shoolsy be nice to everybody feeling, but the application of reality from a different viewpoint. As the late Lama Marut would say: "&lt;em&gt;Be nice and don't take shit&lt;/em&gt;"&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Complex communication&lt;/strong&gt; You are able to see things as they are, you recognise strength and weaknesses in yourself and others. You value reality over opinions and solutions over debate. Skilled like this, explaining the not-so-simple, cutting to the chase, getting your point across becomes your next level. You won't get there without the foundation of Empathy, Self-Awareness and Mindfulness&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Resillience and Adaptability&lt;/strong&gt; Life changes, subtle or sudden, minimal or radical. You have practised to communicate clearly, see reality from different perspectives as it is and know yourself. These skills and the resulting confidence enables you to face whatever comes your way. Not clinging to illusions makes you flexible like the bamboo in the wind. You will clearly see what is needed and where you can find purpose. You adapt.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;The whole book is an insightful and interesting read, so go &lt;a href="https://deep-human.myshopify.com/"&gt;and get your copy&lt;/a&gt;.&lt;/p&gt;</description>
	<link>2019/10/deep-human-super-skills-for-a-vuca-world.html</link>
	<author>Stephan H. Wissel</author>
	<guid>8aab8b60-f90d-11e9-976f-e1b615938bca</guid>
	<pubDate>27 October 2019</pubDate>

</item>
<item>
	<title>A certificate wants a SAN</title>
	<description>&lt;p&gt;Following my recent blog about &lt;a href="/blog/2019/10/create-your-own-ca.html"&gt;creating you own CA&lt;/a&gt; you will find out, like I did, that the certs are quite wanting.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#the-subject-alternate-name-san" id="the-subject-alternate-name-san"&gt;The Subject Alternate Name (SAN)&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Even after importing the &lt;code&gt;ca-chain.cert.pem&lt;/code&gt; into your keyring / keystore Chrome will barf at the certificate, complaining about a missing &lt;a href="https://"&gt;SAN&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The idea of a SAN is to allow additional name variations to be recognised for one given certificate, reducing the effort for multi-purpose servers. E.g.: &lt;code&gt;myawesomesite.com&lt;/code&gt;, &lt;code&gt;www.myawesomesite.com&lt;/code&gt;, &lt;code&gt;myawesomesite.io&lt;/code&gt;, &lt;code&gt;www.myawesomesite.com&lt;/code&gt;, &lt;code&gt;crazydata.com&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;I tried really hard, but at the time of writing, it seems the only way to create SAN for your certs is to provide a configuration file. I didn't find a command line option (short of various attempts on redirection and pipeing).&lt;/p&gt; 
&lt;p&gt;The hack I came up with:&lt;/p&gt; 
&lt;p&gt;Edit the &lt;code&gt;intermediate\openssl.cnf&lt;/code&gt; and add to the &lt;code&gt;[ server_cert ]&lt;/code&gt; section one line: &lt;code&gt;subjectAltName = @alt_names&lt;/code&gt;. The &lt;code&gt;@&lt;/code&gt; sign tells OpenSSL to look for a section with that name and expand its content as the parameter.&lt;/p&gt; 
&lt;p&gt;Using the following shell script generates a certificate that works for:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;www.domain (e.g. &lt;code&gt;www.awesome.io&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;domain (e.g. &lt;code&gt;awesome.io&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;domain.local (e.g. &lt;code&gt;awesome.io.local&lt;/code&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The last one is helpful when you want to try SSL on localhost and amend your &lt;code&gt;hosts&lt;/code&gt; file to contain &lt;code&gt;awesome.io.local&lt;/code&gt;&lt;/p&gt; 
&lt;pre class="brush: bash"&gt;#!/bin/bash
# Create new server certificates with the KEEP intermediate CA
if [ -z "$1" ]
  then
    echo "Usage: ./makecert.sh domain_name (without www) e.g. ./makecert.sh funsite.com"
    exit 1
fi
export SSL_DOMAIN_NAME=$1
export CONFNAME=intermediate/$1.cnf
cat intermediate/openssl.cnf &amp;gt; $CONFNAME
echo [alt_names] &amp;gt;&amp;gt; $CONFNAME
echo DNS.0 = $SSL_DOMAIN_NAME &amp;gt;&amp;gt; $CONFNAME
echo DNS.1 = www.$SSL_DOMAIN_NAME  &amp;gt;&amp;gt; $CONFNAME
echo DNS.2 = $SSL_DOMAIN_NAME.local  &amp;gt;&amp;gt; $CONFNAME
openssl ecparam -genkey -name prime256v1 -outform PEM -out intermediate/private/$SSL_DOMAIN_NAME.key.pem
chmod 400 intermediate/private/$SSL_DOMAIN_NAME.key.pem
openssl req  -config $CONFNAME  -key intermediate/private/$SSL_DOMAIN_NAME.key.pem -new -sha256 -out intermediate/csr/$SSL_DOMAIN_NAME.csr.pem
openssl ca -config $CONFNAME -extensions server_cert -days 375 -notext -md sha256 -in intermediate/csr/$SSL_DOMAIN_NAME.csr.pem -out intermediate/certs/$SSL_DOMAIN_NAME.cert.pem
chmod 444 intermediate/certs/$SSL_DOMAIN_NAME.cert.pem
openssl pkcs12 -export -in intermediate/certs/$SSL_DOMAIN_NAME.cert.pem -inkey intermediate/private/$SSL_DOMAIN_NAME.key.pem -out intermediate/private/$SSL_DOMAIN_NAME.pfx -certfile intermediate/certs/ca-chain.cert.pem
rm $CONFNAME
&lt;/pre&gt; 
&lt;p&gt;This will settle the &lt;em&gt;Subject Alternate Name&lt;/em&gt; challenge. There are a more challenges to be had. Depending on what application you use, you need to import your intermediate keychain &lt;code&gt;ca-chain.cert.pem&lt;/code&gt; in multiple places in different formats (Remember, I urged you not to do that in production!).&lt;/p&gt; 
&lt;p&gt;On Mac and Linux you have a keychain, but NodeJS and Java don't recognize them. Edge (and its older sibling) have their own key store, as has Firefox. Python, depending on version and library, has its own ideas about keys too. So manual management is a PITA.&lt;/p&gt; 
&lt;p&gt;As usual YMMV&lt;/p&gt;</description>
	<link>2019/10/a-certificate-wants-a-san.html</link>
	<author>Stephan H. Wissel</author>
	<guid>89a1ef20-f903-11e9-8942-5bf721e7f1e1</guid>
	<pubDate>26 October 2019</pubDate>

</item>
<item>
	<title>Create your own Certificate Authority (CA)</title>
	<description>&lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt; Do NOT, never, ever do that to a production system!&lt;/p&gt; 
&lt;p&gt;Promised? OK! Here's the use case: you want to test your systems that have made up addresses like &lt;code&gt;awesomeserver.local&lt;/code&gt; and don't want to deal with certificate warnings or fancy errors that arise when you just use a self signed cert. This post is a self-reference for my convenience. There are &lt;a href="https://www.google.com/search?q=crrate+your+own+CA"&gt;ample other instructions&lt;/a&gt; out there.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;: I mostly followed &lt;a href="https://jamielinux.com/docs/openssl-certificate-authority/introduction.html"&gt;this instructions&lt;/a&gt; short of updating some of the commands to use &lt;a href="https://en.wikipedia.org/wiki/Elliptic-curve_cryptography"&gt;elliptic-curve&lt;/a&gt; cyphers.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#useful-with-a-side-of-work" id="useful-with-a-side-of-work"&gt;Useful with a side of work&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;The process requires a series of steps:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Create the private key and root certificate&lt;/li&gt; 
 &lt;li&gt;Create an intermediate key and certificate&lt;/li&gt; 
 &lt;li&gt;Create certs for your servers&lt;/li&gt; 
 &lt;li&gt;Convert them if necessary (e.g. for import in Java Keystors JKS)&lt;/li&gt; 
 &lt;li&gt;Make the public key of the root and intermediate certs available&lt;/li&gt; 
 &lt;li&gt;Import these certs in all browsers and runtimes that you will use for testing&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Normal mortal users, without these imports will get scary error messages. While this doesn't deter the determined, it's good for a laugh.&lt;br&gt; We don't want old school certs, so we aim at a modern &lt;a href="https://en.wikipedia.org/wiki/Elliptic-curve_cryptography"&gt;Elliptic-curve&lt;/a&gt; cert (&lt;a href="https://www.erianna.com/ecdsa-certificate-authorities-and-certificates-with-openssl/"&gt;Details here&lt;/a&gt;). Here we go:&lt;/p&gt; 
&lt;h4&gt;&lt;a href="#setting-up-the-directory-structure" id="setting-up-the-directory-structure"&gt;Setting up the directory structure&lt;/a&gt;&lt;/h4&gt; 
&lt;pre class="brush: bash"&gt;mkdir -pv -m 600 /root/ca/intermediate
cd /root/ca
curl https://jamielinux.com/docs/openssl-certificate-authority/_downloads/root-config.txt -o openssl.cnf
curl https://jamielinux.com/docs/openssl-certificate-authority/_downloads/intermediate-config.txt -o intermediate/openssl.cnf
mkdir certs crl newcerts private
chmod 700 private
touch index.txt
echo 1000 &amp;gt; serial
cd intermediate
mkdir certs crl csr newcerts private
chmod 700 private
touch index.txt
echo 1000 &amp;gt; serial
echo 1000 &amp;gt; crlnumber
cd ..
&lt;/pre&gt; 
&lt;p&gt;You want to check the downloaded files and eventually change the path in case you have chosen to us a different one.&lt;/p&gt; 
&lt;h4&gt;&lt;a href="#the-root-ca" id="the-root-ca"&gt;The Root CA&lt;/a&gt;&lt;/h4&gt; 
&lt;pre class="brush: bash"&gt;export OPENSSL_CONF=./openssl.cnf
openssl ecparam -genkey -name prime256v1 -outform PEM | openssl ec -aes256 -out private/ca.key.pem
chmod 400 private/ca.key.pem
openssl req -config openssl.cnf -key private/ca.key.pem -new -x509 -days 7300 -SHA384 -extensions v3_ca -out certs/ca.cert.pem
&lt;/pre&gt; 
&lt;p&gt;Keep them save - remember: its on my harddrive only isn't save!!!&lt;br&gt; You want to check the file using &lt;code&gt;openssl x509 -noout -text -in certs/ca.cert.pem&lt;/code&gt; or on macOS just hit the space key in finder.&lt;/p&gt;</description>
	<link>2019/10/create-your-own-ca.html</link>
	<author>Stephan H. Wissel</author>
	<guid>38f93a70-efd9-11e9-a2e9-314ebf01b1fc</guid>
	<pubDate>16 October 2019</pubDate>

</item>
<item>
	<title>What's on your gRPC wire, Protocol Buffers or JSON?</title>
	<description>&lt;p&gt;The hot kid on the block for microservice APIs is &lt;a href="https://grpc.io/"&gt;gRPC&lt;/a&gt;, a Google developed, OpenSource &lt;strong&gt;binary&lt;/strong&gt; wire protocol.&lt;/p&gt; 
&lt;p&gt;Its native serialization format is &lt;a href="https://developers.google.com/protocol-buffers"&gt;Protocol Buffers&lt;/a&gt;, advertised as "&lt;em&gt;Protocol buffers are a language-neutral, platform-neutral extensible mechanism for serializing structured data&lt;/em&gt;". How does that fit into Domino picture?&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#same-same-but-different" id="same-same-but-different"&gt;Same same, but different&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;When old bags, like me, hear the word &lt;a href="https://en.wikipedia.org/wiki/Remote_procedure_call"&gt;&lt;em&gt;RPC&lt;/em&gt;&lt;/a&gt; a flood of memories and technologies come to mind:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Distributed_Component_Object_Model"&gt;DCOM&lt;/a&gt; Microsoft's take on: like Java, but Windows only, superceded by &lt;a href="https://en.wikipedia.org/wiki/Windows_Communication_Foundation"&gt;WCF&lt;/a&gt; for dotNet&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Common_Object_Request_Broker_Architecture"&gt;Corba&lt;/a&gt; a standard defined by a commitee, mainly Java (and &lt;strong&gt;YES&lt;/strong&gt; Domino still ships with a &lt;a href="https://en.wikipedia.org/wiki/DIIOP"&gt;Corba Server&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.w3.org/TR/soap/"&gt;SOAP&lt;/a&gt; with our beloved (or was the word: cursed?) &lt;a href="https://www.w3.org/TR/wsdl/"&gt;WSDL&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;There are a few more modern contenders like &lt;a href="https://thrift.apache.org/"&gt;Apache Thrift&lt;/a&gt;, &lt;a href="https://avro.apache.org/"&gt;Apache Avro&lt;/a&gt; or the &lt;a href="http://www.e-s-r.net/specifications/index.html"&gt;KF - TEE&lt;/a&gt;. Good to have &lt;a href="https://xkcd.com/927/"&gt;so many open standards&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#the-good" id="the-good"&gt;the good&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Especially with &lt;strong&gt;SOAP&lt;/strong&gt; the common reaction to the rise of &lt;a href="https://en.wikipedia.org/wiki/Representational_state_transfer"&gt;REST&lt;/a&gt; was: &lt;em&gt;Good riddance RPC&lt;/em&gt;. I'm using the term &lt;em&gt;REST&lt;/em&gt; fast and loose here, since a lot of the APIs are more like "&lt;em&gt;http endpoints accepting JSON payloads&lt;/em&gt;" rather than REST in the formal sense of the definition.&lt;/p&gt; 
&lt;p&gt;So what's different with &lt;em&gt;gRPC&lt;/em&gt;, so it got adopted by the &lt;a href="https://www.cncf.io/"&gt;Cloud Native Computing Foundation&lt;/a&gt;? IMHO there are several reasons:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;It is designed by really smart engineers to run up to &lt;em&gt;Google scale&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;It is ground up optimized, not bothering with legacy, but betting on &lt;a href="https://tools.ietf.org/html/rfc7540"&gt;HTTP/2&lt;/a&gt; and its wire efficiencies&lt;/li&gt; 
 &lt;li&gt;It is a compact binary protocol, making it efficient in low bandwidth and/or high volume use cases (&lt;em&gt;Google scale&lt;/em&gt; anyone)&lt;/li&gt; 
 &lt;li&gt;It transmits data only, no repeated meta data as in JSON or XML based approaches (at least when you use Protocol Buffers)&lt;/li&gt; 
 &lt;li&gt;It focused on code generation, functioning more like an &lt;a href="https://en.wikipedia.org/wiki/Software_development_kit"&gt;SDK&lt;/a&gt; than an API&lt;/li&gt; 
 &lt;li&gt;It has versioning support built in&lt;/li&gt; 
 &lt;li&gt;It uses rich structured data types (15 &lt;a href="https://developers.google.com/protocol-buffers/docs/proto3"&gt;on last count&lt;/a&gt;) including enumerations. Notably absent: date/time and currency&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;And of course: it's the current fashion. RedHat provides a &lt;a href="https://servicesblog.redhat.com/2019/01/31/comparing-openapi-with-grpc/"&gt;compehensive comparison&lt;/a&gt; to &lt;a href="https://www.openapis.org/"&gt;OpenAPI&lt;/a&gt;, as &lt;a href="https://medium.com/apis-and-digital-transformation/openapi-and-grpc-side-by-side-b6afb08f75ed"&gt;do others&lt;/a&gt;. Poking &lt;a href="https://www.youtube.com/results?search_query=grpc"&gt;around YouTube&lt;/a&gt; I gained the impression, that most comparisons are made to REST and its limitations, almost similar to sessions about &lt;a href="https://www.youtube.com/results?search_query=graphql"&gt;GraphQL&lt;/a&gt;. Mr. Sandoval tries to &lt;a href="https://nordicapis.com/when-to-use-what-rest-graphql-webhooks-grpc/"&gt;describe differentiators and use cases&lt;/a&gt;, go read it, it is quite good.&lt;/p&gt;</description>
	<link>2019/10/whats-on-your-grpc-wire-protobuffer-or-json.html</link>
	<author>Stephan H. Wissel</author>
	<guid>529f9d60-ef5d-11e9-ad93-715e4f586c95</guid>
	<pubDate>15 October 2019</pubDate>

</item>
<item>
	<title>A calDAV reference server</title>
	<description>&lt;p&gt;After having a look at the &lt;a href="/blog/2019/10/the-caldav-standard.html"&gt;many standards&lt;/a&gt; involved, it is time to check out a standard or reference implementation. Cutting a long story short: it looks to me the OpenSource &lt;a href="https://github.com/apple/ccs-calendarserver"&gt;Apple Calendar and Contacts Server (ccs)&lt;/a&gt; is my best bet. While the &lt;a href="https://www.calendarserver.org/"&gt;documentation&lt;/a&gt; is rather light, it has been battle tested with my range of targeted clients&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#to-docker-or-to-vm" id="to-docker-or-to-vm"&gt;To Docker or to VM?&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Trying to avoid the &lt;a href="https://blog.codinghorror.com/the-works-on-my-machine-certification-program/"&gt;Works on my machine&lt;/a&gt; certification, a native install was out of the question. So Docker or VM? A search yielded &lt;a href="https://hub.docker.com/r/pluies/ccs-calendarserver/"&gt;one hit&lt;/a&gt; (&lt;a href="https://www.uponmyshoulder.com/blog/2017/apple-contact-calendar-server-dockerised/"&gt;with explanation&lt;/a&gt;) and none for for a ready baked VM. On closer inspection, the docker image, being 2 years old, didn't use the current version, so we had to re-create the image. While on it, I decided to give a VM a shot:&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#apple-calendar-server-on-ubuntu-1804" id="apple-calendar-server-on-ubuntu-1804"&gt;Apple calendar server on Ubuntu 18.04&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;To keep things light, I started with the &lt;a href="https://ubuntu.com/download/desktop/thank-you?version=18.04.3&amp;amp;architecture=amd64"&gt;current LTS version 18.04&lt;/a&gt; desktop and a minimal install with 4G RAM. First order after the install is to get updates and install modules for the VirtualBox extensions:&lt;/p&gt; 
&lt;pre class="brush: bash"&gt;sudo apt update
sudo apt install gcc make perl
sudo apt dist-upgrade
&lt;/pre&gt;</description>
	<link>2019/10/caldav-reference-server.html</link>
	<author>Stephan H. Wissel</author>
	<guid>63512d10-ebf5-11e9-8763-c7987d104598</guid>
	<pubDate>11 October 2019</pubDate>

</item>
<item>
	<title>The calDAV Standard - navigating the RFC jungle</title>
	<description>&lt;p&gt;Application interoperability is key to wide spread adoption. Luckily there are &lt;a href="https://xkcd.com/927/"&gt;so many open standards&lt;/a&gt; that one can claim to be open without being interoperable. On a protocol level &lt;a href="https://tools.ietf.org/html/rfc7230"&gt;HTTP&lt;/a&gt; and &lt;a href="https://tools.ietf.org/html/rfc5321"&gt;SMTP&lt;/a&gt; were huge successes, as well as &lt;a href="https://tools.ietf.org/html/rfc2045"&gt;HTML/MIME&lt;/a&gt; for message content. Beyond that it gets murky. None of the big vendors (outside the OpenSource space) has adopted an open protocol for chat and presence.&lt;/p&gt; 
&lt;p&gt;For other standards, most notably &lt;a href="https://en.wikipedia.org/wiki/CalDAV"&gt;Calendaring&lt;/a&gt;, support is murkey. On key contributor might be the &lt;a href="https://en.wikipedia.org/wiki/Request_for_Comments"&gt;RFC&lt;/a&gt; process that produces documents that are hard to follow and lack sample implementations. They are work outcomes of a &lt;a href="https://en.wikipedia.org/wiki/Design_by_committee"&gt;committee&lt;/a&gt; after all. In this series of blog entries I will (try to) highlight the moving parts of a &lt;strong&gt;calendar server&lt;/strong&gt; implementation. The non-moving parts here are the calendar clients to target: Apple calendar on iOS and &lt;a href="https://support.apple.com/en-us/guide/calendar/welcome/mac"&gt;macOS&lt;/a&gt;, &lt;a href="https://www.thunderbird.net/"&gt;Thurnderbird&lt;/a&gt; and a few others.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#involved-standards" id="involved-standards"&gt;Involved standards&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;There is a series of RFC that cover calendar operation, with various degrees of relevance:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="http://tools.ietf.org/html/rfc4918"&gt;RFC 4918&lt;/a&gt;: webDAV. Defines additional HTTP verbs and XML formats&lt;/li&gt; 
 &lt;li&gt;&lt;a href="http://tools.ietf.org/html/rfc4791"&gt;RFC 4791&lt;/a&gt;: calDAV. Defines again additional HTTP verbs&lt;/li&gt; 
 &lt;li&gt;&lt;a href="http://tools.ietf.org/html/rfc5545"&gt;RFC 5545&lt;/a&gt;: iCalendar. Calendar data as plain text, or &lt;a href="https://tools.ietf.org/html/rfc6321"&gt;XML&lt;/a&gt; or &lt;a href="https://tools.ietf.org/html/rfc7265"&gt;JSON&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://tools.ietf.org/html/rfc7953"&gt;RFC 7953&lt;/a&gt;: vAvailability. Free/Busy lookup specification&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://tools.ietf.org/html/rfc7986"&gt;RFC 7986&lt;/a&gt;: Extended properties for iCalendar&lt;/li&gt; 
 &lt;li&gt;&lt;a href="http://tools.ietf.org/html/rfc6638"&gt;RFC 6638&lt;/a&gt;: Scheduling extensions&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://tools.ietf.org/html/rfc8607"&gt;RFC 8607&lt;/a&gt;: Managed attachments in calendar entries&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://tools.ietf.org/html/rfc8144"&gt;RFC 8144&lt;/a&gt;: Use of Prefer Header field in webDAV&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://tools.ietf.org/html/rfc5785"&gt;RFC 5785&lt;/a&gt;: Definitions for the &lt;code&gt;/.well-known/&lt;/code&gt; URL&lt;/li&gt; 
&lt;/ul&gt;</description>
	<link>2019/10/the-caldav-standard.html</link>
	<author>Stephan H. Wissel</author>
	<guid>7e298730-ea43-11e9-8305-9f51de60c8f2</guid>
	<pubDate>09 October 2019</pubDate>

</item>
<item>
	<title>Vert.x and OpenAPI</title>
	<description>&lt;p&gt;In the shiny new world of the &lt;a href="https://www.gartner.com/smarterwithgartner/welcome-to-the-api-economy/"&gt;API Economy&lt;/a&gt; your API definition and its enforcement is everything. The current &lt;a href="https://xkcd.com/927/"&gt;standard&lt;/a&gt; for REST based APIs is &lt;a href="https://www.openapis.org/"&gt;OpenAPI&lt;/a&gt;. What it gives you is a JSON or YAML file that describes how your API looks like. There is a whole zoo of tools around that allow to visualize, edit, run Mock servers or generate client and server code.&lt;/p&gt; 
&lt;p&gt;My favorite editor for OpenAPI specs is &lt;a href="https://www.apicur.io/"&gt;Apicurio&lt;/a&gt;, a project driven by &lt;a href="https://www.redhat.com"&gt;RedHat&lt;/a&gt;. It strikes a nice balance between being UI driven and leaving you access to the full source code of your specification.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#what-to-do-with-it" id="what-to-do-with-it"&gt;What to do with it&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Your API specification defines:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;the endpoints (a.k.a the URLS that you can use)&lt;/li&gt; 
 &lt;li&gt;the mime types that can be sent or will received&lt;/li&gt; 
 &lt;li&gt;the parameters in the path (the URL)&lt;/li&gt; 
 &lt;li&gt;the parameters in the query (the part that looks like &lt;code&gt;?color=red&amp;amp;shape=circle&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;the body to send and receive&lt;/li&gt; 
 &lt;li&gt;the authentication / authorization requirements&lt;/li&gt; 
 &lt;li&gt;the potential &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status"&gt;status codes&lt;/a&gt; (we love 2xx)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;To handle all this, it smells like boilerplate or, if you are lucky, ready library. &lt;a href="http://vertx.io/"&gt;vert.x&lt;/a&gt; has the later. It provides the &lt;a href="https://vertx.io/docs/vertx-web-api-contract/java/"&gt;API Contract&lt;/a&gt; module that is designed to handle all this for you. You simply add the module to your &lt;code&gt;pom.xml&lt;/code&gt; and load your json or yaml OpenApi specification file:&lt;/p&gt; 
&lt;pre class="brush: xml"&gt;&amp;lt;dependency&amp;gt;
 &amp;lt;groupId&amp;gt;io.vertx&amp;lt;/groupId&amp;gt;
 &amp;lt;artifactId&amp;gt;vertx-web-api-contract&amp;lt;/artifactId&amp;gt;
 &amp;lt;version&amp;gt;3.8.1&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/pre&gt; 
&lt;p&gt;The &lt;a href="https://vertx.io/docs/vertx-web-api-contract/java/#_openapi_3"&gt;documentation&lt;/a&gt; shows the code to turn the OpenApi speccification into a Router factory:&lt;/p&gt; 
&lt;pre class="brush: java"&gt;OpenAPI3RouterFactory.create(
  vertx,
  "https://raw.githubusercontent.com/OAI/OpenAPI-Specification/master/examples/v3.0/petstore.yaml",
  ar -&amp;gt; {
    if (ar.succeeded()) {
      // Spec loaded with success
      OpenAPI3RouterFactory routerFactory = ar.result();
    } else {
      // Something went wrong during router factory initialization
      Throwable exception = ar.cause();
    }
  });
&lt;/pre&gt; 
&lt;p&gt;As you can see, you can load the spec from an URL (there's an auth option too). So while your API is evolving using &lt;a href="https://www.apicur.io/"&gt;Apicurio&lt;/a&gt; you can live load the latest and greated from the live preview (should make some interesting breakages ;-) ).&lt;/p&gt; 
&lt;p&gt;You then add your routes using &lt;code&gt;routerFactory.addHandlerByOperationId("awesomeOperation",this::awesomeOperationHandler)&lt;/code&gt;. Vert.x doesn't use the path to match the handler, but the operationId. This allows you to update path information without breaking your code. There is a detailed &lt;a href="https://how-to.vertx.io/web-and-openapi-howto/"&gt;how-to document&lt;/a&gt; describing the steps.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#generate-a-skeleton-for-vertx" id="generate-a-skeleton-for-vertx"&gt;Generate a skeleton for vert.x&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;As long as you haven't specified a handler for an operation, Vert.x will automatically reply with &lt;code&gt;501 Not implemented&lt;/code&gt; and not throw any error. To give you a headstart, you can generate the base code. First option is to head to &lt;a href="https://start.vertx.io/"&gt;start.vertx.io&lt;/a&gt; to generate a standard project skeleton, saving you the manual work of creating all dependencies in your &lt;code&gt;pom.xml&lt;/code&gt; file. Using "&lt;em&gt;Show dependency panel&lt;/em&gt;" provides a convenient way to pick the modules you need.&lt;/p&gt; 
&lt;p&gt;But there are better ways. You can use an &lt;a href="https://openapi-generator.tech/"&gt;OpenAPI Generator&lt;/a&gt; or the advanced &lt;a href="https://vertx-starter.jetdrone.xyz/#maven"&gt;Vert.x Starter&lt;/a&gt; courtesy of &lt;a href="https://www.linkedin.com/in/pmlopes/"&gt;Paulo Lopes&lt;/a&gt;. In his tool you specify what it shall generate in a dropdown that defaults to "&lt;em&gt;Empty Project&lt;/em&gt;". Once you change that to "&lt;em&gt;OpenAPI Server&lt;/em&gt;" the form will alloow you to upload your OpenAPI specification and you get a complete project rendered with all handler stubs including the security handler. There's also a &lt;a href="https://vertx-starter.jetdrone.xyz/#npm"&gt;JavaScript&lt;/a&gt; version available.&lt;/p&gt;</description>
	<link>2019/09/vertx-and-openapi.html</link>
	<author>Stephan H. Wissel</author>
	<guid>86e88e10-d08b-11e9-ae24-cf34c96a740e</guid>
	<pubDate>06 September 2019</pubDate>

</item>
<item>
	<title>Adding a proxy to your Salesforce Communities</title>
	<description>&lt;p&gt;Running a community site might come with a number of interesting requirement:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Scan uploaded files for maleware or copyright violations&lt;/li&gt; 
 &lt;li&gt;Filter language for profanities&lt;/li&gt; 
 &lt;li&gt;Comply with local data retention rules (e.g. local before cloud)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For most of these task &lt;a href="https://appexchange.salesforce.com/"&gt;AppExchange&lt;/a&gt; will be the goto place to find solution. However sometimes you want to process &lt;strong&gt;before&lt;/strong&gt; data hits the platform. This is the moment where you need a proxy.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#clicks-not-code" id="clicks-not-code"&gt;Clicks not Code&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;To be ready to proxy, there are a few steps involved. I went through a few loops, to come to this working sequence:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Register a domain. You will use it to run your community. Using a custom domain is essential to avoid https headaches later on&lt;/li&gt; 
 &lt;li&gt;Obtain a SSL certificate for the custom domain. The easiest part, if you have access to a public host, is to use &lt;a href="https://letsencrypt.org/"&gt;LetsEncrypt&lt;/a&gt; to obtain the cert and then &lt;a href="/blog/2018/03/letsencrypt-java-keystore.html"&gt;transform it to JKS&lt;/a&gt;. The certs are only valid for 90 days, but we only need it for a short while in JKS. On e.g. &lt;a href="https://nginx.org/"&gt;Nginx&lt;/a&gt; one can &lt;a href="https://www.nginx.com/blog/using-free-ssltls-certificates-from-lets-encrypt-with-nginx/"&gt;auto renew&lt;/a&gt; the certs&lt;/li&gt; 
 &lt;li&gt;Upload the cert into Salesforce in &lt;code&gt;Security - Certificate and Key Management - Import from Keystore&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Follow the Steps 1 and 4 (you did 3 already). You need access to your DNS for that. The Domain needs to be fully qualified, you can't use your root (a DNS limitation). Let's say your base is &lt;code&gt;acme.com&lt;/code&gt; and you want your partner community to be reachable at &lt;code&gt;partners.acme.com&lt;/code&gt; and your Salesforce Org ID is &lt;code&gt;1234567890abcdefgh&lt;/code&gt;, then you need a &lt;code&gt;CNAME&lt;/code&gt; entry that says &lt;code&gt;partners&lt;/code&gt; -&amp;gt; &lt;code&gt;partners.acme.com.1234567890abcdefgh.live.siteforce.com.&lt;/code&gt; &lt;strong&gt;Important&lt;/strong&gt;: The entry needs to end with a DOT (.) otherwise CNAME tries to link it back to your domain&lt;/li&gt; 
 &lt;li&gt;Test the whole setup. Make sure you can use all community functions using the URL &lt;a href="https://www.xkcd.com"&gt;&lt;code&gt;https://partners.acme.com/&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Now back to the DNS. Point the CNAME entry to your host (e.g. &lt;a href="https://heroku.com"&gt;Heroku&lt;/a&gt; or delete it and create a A record pointing to e.g. &lt;a href="https://digitalocean.com"&gt;DigitalOcean&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Make sure the Proxy sends the HOST header has the value of your custom domain, not the force.com. Your proxy serves as &lt;a href="https://help.salesforce.com/articleView?id=000315329&amp;amp;language=en_US&amp;amp;type=1"&gt;your own CDN&lt;/a&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Little boomer: You can't do this in a sandbox or a developer org, needs to be production or trial.&lt;/p&gt; 
&lt;p&gt;Next stop: discuss what proxy to use and options to consider. As usual YMMV.&lt;/p&gt;</description>
	<link>2019/06/adding-a-proxy-to-your-salesforce-communities.html</link>
	<author>Stephan H. Wissel</author>
	<guid>c1fe6140-9b30-11e9-ad06-ed6374046d03</guid>
	<pubDate>30 June 2019</pubDate>

</item>

</channel>
</rss>
