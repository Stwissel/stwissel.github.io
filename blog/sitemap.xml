<?xml version="1.0"?>
<rss version="2.0">
<channel>
	<title>wissel.net Usability - Productivity - Business - The web - Singapore and Twins</title>
	<link>https://wissel.net/blog/stories.rss</link>
	<description>Thoughts, Insights and Opinions of Stephan H. Wissel. Topics included: IBM Lotus Notes and Domino, IBM Websphere, other IBM Lotus stuff,  J2EE, .Net, Software Archtecture, Personcentric Development, Agile Software, SDLC, Singapore and my Twins</description>
	<language>en,de</language>
	<copyright>(C) 2003 - 2018 Stephan H. Wissel, All rights reserved</copyright>
	<pubdate>Sun, 07 Apr 2019 09:15:41 +0000</pubdate>
<item>
	<title>Mixing lightning-input-fields with custom data aware fields</title>
	<description>&lt;p&gt;Salesforce lightning offers a developer various ways to design custom forms when page layouts are not enough. The &lt;a href="https://developer.salesforce.com/docs/component-library/bundle/lightning-record-edit-form/documentation"&gt;record-edit-form&lt;/a&gt; strikes a nice balance: it uses Lightning data service and allows one to design your own layout and field selection.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#beyond-lightning-input-fields" id="beyond-lightning-input-fields"&gt;Beyond lightning-input-fields&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Most of the time &lt;a href="https://developer.salesforce.com/docs/component-library/bundle/lightning-input-field/documentation"&gt;lightning-input-field&lt;/a&gt; is all you need for this forms. They auto-magically talk to the &lt;a href="https://developer.salesforce.com/docs/atlas.en-us.uiapi.meta/uiapi/ui_api_get_started.htm"&gt;UI API&lt;/a&gt; and display the right input type.&lt;/p&gt; 
&lt;p&gt;However there are cases, where that's not what your users want. A recent example from a project: Phone numbers are stored as text field in Salesforce, but the users wanted a guided input: a country picker, then showing the area code picker (if the country has those) and an checker for field length for the main number (which varies greatly by country) and an eventual extension field (popular in the US, but not elsewhere).&lt;/p&gt; 
&lt;p&gt;So I started digging. Shouldn't it be possible to have something like &lt;code&gt;&amp;lt;c-phone-helper field-name="Phone" /&amp;gt;&lt;/code&gt; and the same data magic as for &lt;code&gt;lightning-input-field&lt;/code&gt; would happen? Turns out: not so fast. With events and a little code it would be possible, but that glue code needed to be applied to any custom field.&lt;/p&gt; 
&lt;p&gt;This got me thinking. The solution, it turns out, was to "extend" the &lt;code&gt;record-edit-form&lt;/code&gt; to handle "rough" input components. You can give the result a try in &lt;a href="https://github.com/Stwissel/lwcaura/tree/master/experiments/experiment8/main/default/lwc"&gt;experiment 8&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#design-goals" id="design-goals"&gt;Design goals&lt;/a&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;The component should be a drop-in "replacement" for &lt;code&gt;record-edit-form&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Structure of a page should be similar to they way one builds &lt;code&gt;record-edit-form&lt;/code&gt; based forms&lt;/li&gt; 
 &lt;li&gt;All &lt;code&gt;lightning-input-fields&lt;/code&gt; should work out of the box&lt;/li&gt; 
 &lt;li&gt;No additional glue code should be required in the component hosting the new form&lt;/li&gt; 
 &lt;li&gt;Custom input field types should be easy to build. Once I figure out extensions, based on a base component&lt;/li&gt; 
 &lt;li&gt;Opinionated: form layout is using a &lt;a href="https://developer.salesforce.com/docs/component-library/bundle/lightning-layout/example"&gt;lightning-layout&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;a href="#results" id="results"&gt;Results&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;The replacement for &lt;code&gt;lightning-record-form&lt;/code&gt; is &lt;a href="https://github.com/Stwissel/lwcaura/tree/master/experiments/experiment8/main/default/lwc/extendedForm"&gt;c-extended-form&lt;/a&gt; (from experiment 8).&lt;br&gt; "Replacement" is a mouth-full, since the component just wraps around a &lt;code&gt;lightning-record-form&lt;/code&gt;. A few components are ready to be used for it:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Stwissel/lwcaura/tree/master/experiments/experiment8/main/default/lwc/specialInput"&gt;specialInput&lt;/a&gt; a little test component. It just returns the input in upper case. Not very useful other than studying the boiler plate&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Stwissel/lwcaura/tree/master/experiments/experiment5/main/default/lwc/uxDebouncedInput"&gt;uxDebouncedInput&lt;/a&gt; returns changed values after a debounce period. Default is 300ms, the attribute &lt;code&gt;delay&lt;/code&gt; allows to specify duration. The component shows different behavior depending on the attribute &lt;code&gt;field-name&lt;/code&gt; being present with a value. The original purpose of the field is to be used in &lt;a href="https://github.com/Stwissel/lwcaura/tree/master/experiments/experiment5/main/default/lwc/uxQuickLookup"&gt;uxQuickLookup&lt;/a&gt;, now you can use it standalone&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Stwissel/lwcaura/tree/master/experiments/experiment5/main/default/lwc/uxQuickLookup"&gt;uxQickLookup&lt;/a&gt; which allows you to lookup an object. It works in lightning apps, mobile and communities and can serve as a stop-gap for the missing lookup on mobile. I &lt;a href="/blog/2019/04/dynamic-lookup-for-lwc-update.html"&gt;recently updated it&lt;/a&gt; to show additional fields beside the object name&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;a href="#how-it-works" id="how-it-works"&gt;How it works&lt;/a&gt;&lt;/h3&gt;</description>
	<link>2019/04/mixing-lightning-input-fields-with-custom-data-aware-fields.html</link>
	<author>Stephan H. Wissel</author>
	<guid>d960bf80-5838-11e9-8c30-b3972ad3cc9f</guid>
	<pubDate>06 April 2019</pubDate>

</item>
<item>
	<title>Dynamic Lookup for LWC - update</title>
	<description>&lt;p&gt;There's always room for some improvement. So I updated&lt;/p&gt; 
&lt;p&gt;&lt;img src="/blog/images/2019/DynamicLookup2.png" alt="Dynamic Lookup"&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#is-this-the-account-you-are-looking-for" id="is-this-the-account-you-are-looking-for"&gt;Is this the account you are looking for?&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;The &lt;a href="/blog/2019/03/re-usable-dynamic-custom-lookup-lwc-edition.html"&gt;dynamic lookup&lt;/a&gt; works like a charm, including on the Salesforce mobile app. The only catch: with only the object name visible it was less useful than the standard lookup. There are too many objects with the same name.&lt;/p&gt; 
&lt;p&gt;The solution: I added a new parameter &lt;code&gt;fields&lt;/code&gt; that allows to specify the fields you want to be displayed. To separate them, I choose &lt;a href="https://www.lightningdesignsystem.com/components/badges/"&gt;Badges&lt;/a&gt;. IMHO there isn't much value in showing fieldNames and mess up the display.&lt;/p&gt; 
&lt;p&gt;The source code can be found in &lt;a href="https://github.com/Stwissel/lwcaura/tree/master/experiments/experiment5/main/default/lwc"&gt;Experiment 5&lt;/a&gt;, enjoy! As usual YMMV!&lt;/p&gt; 
&lt;p&gt;Next stop: proper &lt;a href="https://jestjs.io/"&gt;Jest&lt;/a&gt; test harness&lt;/p&gt;</description>
	<link>2019/04/dynamic-lookup-for-lwc-update.html</link>
	<author>Stephan H. Wissel</author>
	<guid>064cfad0-5835-11e9-80c9-15cc4ab76379</guid>
	<pubDate>06 April 2019</pubDate>

</item>
<item>
	<title>Massive leak of Credit Card Pin Numbers</title>
	<description>&lt;p&gt;It seems that &lt;a href="https://en.wikipedia.org/wiki/Data_breach"&gt;Data leaks&lt;/a&gt; are considered unavoidable like the flu, taxed or &lt;a href="https://www.channelnewsasia.com/news/world/hundreds-vaccinated-after-measles-emergency-in-new-york-11395360"&gt;measles outbreaks&lt;/a&gt; for vaccination-deprived kids.&lt;/p&gt; 
&lt;p&gt;There's quite a list:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://www.csoonline.com/article/2130877/the-biggest-data-breaches-of-the-21st-century.html"&gt;The 18 biggest of the 21st century&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.businessinsider.sg/data-breaches-2018-4/?r=US&amp;amp;IR=T"&gt;10 stores in 2018&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/List_of_data_breaches"&gt;The list, by alphabet&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;a href="#kiss-goodbye-your-pin" id="kiss-goodbye-your-pin"&gt;Kiss goodbye your PIN&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;You might think, it couldn't get worse, but it did. In an unprecedented development &lt;strong&gt;all&lt;/strong&gt;, yes &lt;strong&gt;all&lt;/strong&gt; of the 6 digit credit card pins have been revealed and &lt;a href="https://bit.ly/2YBSZZH"&gt;posted online&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;You can check: your pin will be in that stash. But be careful! Online searches are captured, potentially allowing an attacker to link the numbers back to you. So when inspecting the stash, either look manually or download and search locally.&lt;/p&gt; 
&lt;p&gt;Of course: you got that file on your local disk, someone might start asking questions. So be considerate!&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#update" id="update"&gt;Update&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;A single forgotten &lt;code&gt;console.log(...)&lt;/code&gt; statement was the source that leaked all those numbers.&lt;/p&gt; 
&lt;p&gt;The full code, released on &lt;strong&gt;APRIL 01&lt;/strong&gt; is here:&lt;/p&gt; 
&lt;pre class="brush: js"&gt;/* Generates all 6 digit pins in a random order */
const max = 1000000;
const ppl = 10;
const pins = [];

// Prepopulate sequentially
for (let i = 0; i &amp;lt; max; i++) {
  pins[i] = (' 000000' + i).slice(-6);
}

// Randomize location
for (let i = max; i &amp;gt;= 0; i--) {
  let p = Math.floor(Math.random() * i);
  let n = pins[p];
  pins[p] = pins[i];
  pins[i] = n;
  if (i % ppl == 0) {
    console.log(pins.slice(i, i + ppl).toString() + (i == 0 ? '' : ','));
  }
}
&lt;/pre&gt; 
&lt;p&gt;Hope you enjoyed it!&lt;/p&gt;</description>
	<link>2019/04/massive-leak-of-credit-card-pin-numbers.html</link>
	<author>Stephan H. Wissel</author>
	<guid>fb5286b0-544f-11e9-8212-c16ddd71fa21</guid>
	<pubDate>01 April 2019</pubDate>

</item>
<item>
	<title>Extract field definitions from object.xml</title>
	<description>&lt;p&gt;The other department asked: can I have a csv list of fields with Name,Type,length from Salesforce. The only source they have are the object.xml files from a meta data API export&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#some-counting-required" id="some-counting-required"&gt;Some counting required&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;The object.xml file contains size information for text files only. For date and numbers that's not an issue. The sticky part are pick lists and multi select pick lists.&lt;/p&gt; 
&lt;p&gt;A little XSLT goes a long way. The magic is in the expression &lt;code&gt;max((s:valueSet/s:valueSetDefinition/s:value/s:fullName/string-length()))&lt;/code&gt; For your enjoyment, the full style sheet:&lt;/p&gt; 
&lt;pre class="brush: xml"&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;
&amp;lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
    xmlns:xd="http://www.oxygenxml.com/ns/doc/xsl"
    xmlns:s="http://soap.sforce.com/2006/04/metadata"
    exclude-result-prefixes="xs xd"
    version="2.0"&amp;gt;
   
   &amp;lt;xsl:output method="text" encoding="UTF-8" /&amp;gt;
    
    &amp;lt;xsl:template match="/"&amp;gt;
name,type,length
&amp;lt;xsl:apply-templates select="/s:CustomObject/s:fields" /&amp;gt;
    &amp;lt;/xsl:template&amp;gt;
    
    &amp;lt;xsl:template match="s:fields"&amp;gt;
&amp;lt;xsl:value-of select="s:fullName"/&amp;gt;,&amp;lt;xsl:value-of select="s:type"/&amp;gt;,&amp;lt;xsl:value-of select="s:length"/&amp;gt;
        &amp;lt;xsl:text&amp;gt;&amp;amp;#xa;&amp;lt;/xsl:text&amp;gt;
    &amp;lt;/xsl:template&amp;gt;    
    
    &amp;lt;xsl:template match="s:fields[s:type='Picklist' or s:type='MultiselectPicklist']"&amp;gt;
&amp;lt;xsl:value-of select="s:fullName"/&amp;gt;,&amp;lt;xsl:value-of select="s:type"/&amp;gt;,&amp;lt;xsl:value-of select="max((s:valueSet/s:valueSetDefinition/s:value/s:fullName/string-length()))" /&amp;gt;
        &amp;lt;xsl:text&amp;gt;&amp;amp;#xa;&amp;lt;/xsl:text&amp;gt;
    &amp;lt;/xsl:template&amp;gt;

&amp;lt;!-- stuff without use --&amp;gt;
&amp;lt;xsl:template match="s:fields[s:formula]" /&amp;gt;
    &amp;lt;xsl:template match="s:fields[not(s:type)]" /&amp;gt;
&amp;lt;xsl:template match="s:fields[s:type='Picklist' and not(s:valueSet)]" /&amp;gt;  
    
&amp;lt;/xsl:stylesheet&amp;gt;
&lt;/pre&gt; 
&lt;p&gt;One of the little stumbling blocks: a namespace for &lt;code&gt;http://soap.sforce.com/2006/04/metadata&lt;/code&gt; is required.&lt;/p&gt; 
&lt;p&gt;As usual: YMMV&lt;/p&gt;</description>
	<link>2019/03/extract-field-definitions-from-object.xml.html</link>
	<author>Stephan H. Wissel</author>
	<guid>7a3b8300-5207-11e9-b271-ab59574ac46b</guid>
	<pubDate>29 March 2019</pubDate>

</item>
<item>
	<title>Re-Usable Dynamic Custom Lookup LWC edition</title>
	<description>&lt;p&gt;Over at &lt;a href="http://sfdcmonkey.com/2017/07/17/re-usable-custom-lookup/"&gt;sfdcmonkey&lt;/a&gt; there's a nice AURA component that allows for dynamic lookup of a given object. Super nice and useful. I wondered what it would take to be rebuild in &lt;a href="https://developer.salesforce.com/docs/component-library/documentation/lwc"&gt;LWC&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="/blog/images/2019/DynamicLookup.png" alt="Dynamic Lookup"&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#same-same-but-different" id="same-same-but-different"&gt;Same, Same but different&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;I want to achieve the same functionality, but would accept subtle differences. This is what I got:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The original component shows the object icon on the left. My version shows the search symbol that comes out of the box with &lt;a href="https://developer.salesforce.com/docs/component-library/bundle/lightning-input/example"&gt;lightning-input&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;I use 3 components instead of two. Input fields that trigger network calls are fairly common and it makes sense to &lt;a href="https://www.maximintegrated.com/en/glossary/definitions.mvp/term/debounce/gpk/82"&gt;debounce&lt;/a&gt; the input. So I created &lt;code&gt;c-ux-debounced-input&lt;/code&gt; that signals entered data only after a period of 300ms&lt;/li&gt; 
 &lt;li&gt;The component dispatches an event when a result has been selected or cleared, so it can be used inside other components&lt;/li&gt; 
 &lt;li&gt;For now: it can be directly put on a lightning page in page builder and configured there. Useful for demos and test&lt;/li&gt; 
 &lt;li&gt;When you clear the selected object, the result list opens up again, so no second network call is made until you change the input value&lt;/li&gt; 
&lt;/ul&gt;</description>
	<link>2019/03/re-usable-dynamic-custom-lookup-lwc-edition.html</link>
	<author>Stephan H. Wissel</author>
	<guid>8ff284d0-5042-11e9-b56a-cd55bbbbd610</guid>
	<pubDate>27 March 2019</pubDate>

</item>
<item>
	<title>Mapping recordIds to Object Names - Offline edition</title>
	<description>&lt;p&gt;Lightning in Communities is "Same Same but different". When you want to build neutral components, you need to know what object you are dealing with&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#objectapiname-objectname-and-recordid" id="objectapiname-objectname-and-recordid"&gt;ObjectApiName, ObjectName and recordId&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;In Lightning Aura components one can use &lt;a href="https://developer.salesforce.com/docs/component-library/bundle/force:hasSObjectName/documentation"&gt;&lt;code&gt;force:hasSObjectName&lt;/code&gt;&lt;/a&gt; to get access to an attribute &lt;code&gt;sObjectName&lt;/code&gt;. In Lightning Web components one uses &lt;a href="https://developer.salesforce.com/docs/component-library/documentation/lwc/lwc.use_object_context"&gt;&lt;code&gt;@api objectApiName&lt;/code&gt;&lt;/a&gt;. Except neither of those work in &lt;strong&gt;Communities&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;The workaround is to look at the &lt;code&gt;recordId&lt;/code&gt; and use &lt;a href="https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_methods_system_sobject_describe.htm"&gt;&lt;code&gt;DescribeSObjectResult.getKeyPrefix&lt;/code&gt;&lt;/a&gt; to map a record to the object name. There's a &lt;a href="http://www.fishofprey.com/2011/09/obscure-salesforce-object-key-prefixes.html"&gt;comprehensive list&lt;/a&gt; by &lt;a href="https://twitter.com/FishOfPrey"&gt;David&lt;/a&gt; and my &lt;a href="https://gist.github.com/Stwissel/890559482a4ff4ec61c80597dd47f6bd"&gt;version as JSON object&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;However, depending on your org, that list might vary. So I created a small component that lists out the objects in your current org. Enjoy:&lt;/p&gt; 
&lt;h4&gt;&lt;a href="#objectidspycls" id="objectidspycls"&gt;ObjectIdSpy.cls&lt;/a&gt;&lt;/h4&gt; 
&lt;pre class="brush: java"&gt;public without sharing class ObjectIdSpy {  
    @AuraEnabled(cacheable=true)
    public static Map&amp;lt;String,String&amp;gt; getObjectIdMappings(){
        Map&amp;lt;String,String&amp;gt; result = new Map&amp;lt;String,String&amp;gt;();
        Map&amp;lt;String, Schema.SObjectType&amp;gt; gd = Schema.getGlobalDescribe();
        for(String key : gd.keySet()) {
            Schema.SObjectType ot = gd.get(key);
            String curPrefix = ot.getDescribe().getKeyPrefix();
            String curName = ot.getDescribe().getName();
            // Fair warning: will omit objects that share the prefix
            result.put(curPrefix, curName);
        }
      return result;
    } 
}

&lt;/pre&gt; 
&lt;h4&gt;&lt;a href="#objectidspyhtml" id="objectidspyhtml"&gt;objectIdSpy.html&lt;/a&gt;&lt;/h4&gt; 
&lt;pre class="brush: xml"&gt;&amp;lt;template&amp;gt;
    &amp;lt;lightning-card title="Object Spy"&amp;gt;
        &amp;lt;pre&amp;gt;
{idList}
        &amp;lt;/pre&amp;gt;
    &amp;lt;/lightning-card&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/pre&gt; 
&lt;h4&gt;&lt;a href="#objectidspyjs" id="objectidspyjs"&gt;objectIdSpy.js&lt;/a&gt;&lt;/h4&gt; 
&lt;pre class="brush: js"&gt;import { LightningElement, track, wire } from 'lwc';
import idSpy from '@salesforce/apex/ObjectIdSpy.getObjectIdMappings';

export default class ObjectIdSpy extends LightningElement {
  @track idList;

  @wire(idSpy)
  spiedUpon({ error, data }) {
    if (data) {
      this.idList = JSON.stringify(data, null, 2);
    } else if (error) {
      this.idList = JSON.stringify(error, null, 2);
    }
  }
}

&lt;/pre&gt; 
&lt;h4&gt;&lt;a href="#objectidspyjs-metaxml" id="objectidspyjs-metaxml"&gt;objectIdSpy.js-meta.xml&lt;/a&gt;&lt;/h4&gt; 
&lt;pre class="brush: xml"&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;
&amp;lt;LightningComponentBundle xmlns="http://soap.sforce.com/2006/04/metadata" fqn="ObjectIdSpy"&amp;gt;
    &amp;lt;apiVersion&amp;gt;45.0&amp;lt;/apiVersion&amp;gt;
    &amp;lt;isExposed&amp;gt;true&amp;lt;/isExposed&amp;gt;
    &amp;lt;masterLabel&amp;gt;Object Id Spy&amp;lt;/masterLabel&amp;gt;
    &amp;lt;description&amp;gt;Generates a JSON object of Id and object names&amp;lt;/description&amp;gt;
    &amp;lt;targets&amp;gt;
        &amp;lt;target&amp;gt;lightning__RecordPage&amp;lt;/target&amp;gt;
        &amp;lt;target&amp;gt;lightning__AppPage&amp;lt;/target&amp;gt;
        &amp;lt;target&amp;gt;lightning__HomePage&amp;lt;/target&amp;gt;
    &amp;lt;/targets&amp;gt;
&amp;lt;/LightningComponentBundle&amp;gt;
&lt;/pre&gt; 
&lt;p&gt;As usual YMMV!&lt;/p&gt;</description>
	<link>2019/03/mapping-recordids-to-object-names-offline-edition.html</link>
	<author>Stephan H. Wissel</author>
	<guid>741dae00-4abc-11e9-93f7-9d01095f3788</guid>
	<pubDate>20 March 2019</pubDate>

</item>
<item>
	<title>Finding Strings in recursively zipped files</title>
	<description>&lt;p&gt;I had an itch to scratch. After using &lt;a href="https://appexchange.salesforce.com/appxListingDetail?listingId=a0N30000003HSXEEA4"&gt;Field Trip&lt;/a&gt; (which I like a lot) to determine unused fields, the team managing the external &lt;a href="https://www.informatica.com/"&gt;Informatica&lt;/a&gt; integration claimed they would need weeks to ensure none of the fields are used in any of their (hundreds) of pipelines.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#zip-inception" id="zip-inception"&gt;ZIP inception&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;My first reaction (OK, the second, first one isn't PC) was: Let's go after the source code and just use an &lt;a href="https://www.sublimetext.com/"&gt;editor of choice&lt;/a&gt; to do a find in files. Turns out: not so fast. The source export offered by the team was a zip file with an elaborate directory structure containing, tada, zip files. So each of the pipes would need multiple zip operations.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#itch-defined" id="itch-defined"&gt;Itch defined&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;I needed a tool that would start in a directory with a bunch of zip files, unpack them all. Check for zip files in the unpacked result, unzip these and repeat. Once done, take a list of strings and search for occurrences of those and generate a report which shows the files containing these strings&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#itch-scratched" id="itch-scratched"&gt;Itch scratched&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;I created &lt;a href="https://github.com/Stwissel/findStrings"&gt;findstring&lt;/a&gt;, a command line tool that takes a directory as starting point unzips what can be unzipped (optional) and searches for the occurrence of strings provided in a text file.&lt;/p&gt; 
&lt;p&gt;Initially I contemplated to render the output as XML, so the final report could be designed in whatever fashion using XSLT. However following &lt;a href="https://en.wikipedia.org/wiki/KISS_principle"&gt;KISS&lt;/a&gt;, I ended up using &lt;a href="https://en.wikipedia.org/wiki/Markdown"&gt;Markdown&lt;/a&gt;. I might add the XML option later on.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#recursion" id="recursion"&gt;Recursion&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;The key piece of the tool is recursion (until you stack overflow ;-) ). Reading a directory and dive into directories found. I could have avoided that using &lt;a href="https://github.com/google/guava"&gt;Guava&lt;/a&gt; and its &lt;a href="https://google.github.io/guava/releases/snapshot/api/docs/com/google/common/io/Files.html#fileTraverser--"&gt;fileTraverser&lt;/a&gt;, but I like some Inception style coding. The key piece is this:&lt;/p&gt; 
&lt;pre class="brush: java"&gt;    private boolean expandSources(final File sourceDir) throws IOException {
        boolean result = false;
        final File[] allFiles = sourceDir.listFiles();

        for (final File f : allFiles) {
            if (f.isDirectory()) {
                result = result || this.expandSources(f);

            } else if (f.getName().endsWith(".zip")) {
                final String newDirName = f.getAbsolutePath().replace(".zip", "");
                final File newTarget = new File(newDirName);

                // Need to scan the new directory too
                if (this.expandFile(f, newTarget)) {
                    result = result || this.expandSources(newTarget);
                }
            }
        }
        return result;

    }
&lt;/pre&gt; 
&lt;p&gt;The function will return true as long as there was a zip file to be unzipped. The string finding operation (case insensitive) follows the same approach&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#use-cases" id="use-cases"&gt;Use cases&lt;/a&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Find field usage in ZIP files. Works with a package downloaded from the meta data api or what Informatica exports&lt;/li&gt; 
 &lt;li&gt;Check a source directory (doesn't need to contain zips) for keywords like &lt;code&gt;TODO&lt;/code&gt;, &lt;code&gt;FIXME&lt;/code&gt;, &lt;code&gt;XXX&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The command line syntax is very simple:&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;java -jar findString.jar -d directory -s strings [-o output]&lt;/code&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;-d,?dir &amp;lt;arg&amp;gt; directory with all zip files&lt;/li&gt; 
 &lt;li&gt;-s,?stringfile &amp;lt;arg&amp;gt; Filename with Strings to search, one per line&lt;/li&gt; 
 &lt;li&gt;-o,?output &amp;lt;arg&amp;gt; Output file name for report in MD format&lt;/li&gt; 
 &lt;li&gt;-nz,?nz Rerun find operation on a ready unzipped structure - good for alternate finds&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;a href="#limits" id="limits"&gt;Limits&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;In its current form the utility will check for strings in any file short of zip. Zip gets unpacked and the result checked. When your directory contains binary files (e.g. images) it will still look for the string occurrence inside. File extension filters might be a future enhancement (&lt;a href="https://github.com/Stwissel/findStrings/issues"&gt;share your opinion&lt;/a&gt;).&lt;/p&gt; 
&lt;p&gt;Files are read into memory. So if your directory contains huge files, you will blow your heap. Source code files hardly pose an issue, so the approach worked for me. Alternatively a &lt;a href="https://docs.oracle.com/javase/7/docs/api/java/util/Scanner.html"&gt;scanner&lt;/a&gt; could be used, should the need arise.&lt;/p&gt; 
&lt;p&gt;Go &lt;a href="https://github.com/Stwissel/findStrings/releases"&gt;give it a spin&lt;/a&gt; and keep in mind: YMMV&lt;/p&gt;</description>
	<link>2019/03/finding-strings-in-recursively-zipped-files.html</link>
	<author>Stephan H. Wissel</author>
	<guid>478555c0-47a4-11e9-872b-771845fe5f6a</guid>
	<pubDate>16 March 2019</pubDate>

</item>
<item>
	<title>Testing Aura and LWC in a single Test</title>
	<description>&lt;p&gt;You drank the &lt;a href="https://www.salesforce.com/company/news-press/press-releases/2018/12/181213-t/"&gt;CoolAid&lt;/a&gt; and noticed that the Aura framework &lt;a href="https://github.com/forcedotcom/aura"&gt;has been archived&lt;/a&gt;. You are hell bend to migrate your components.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#regression-test-required" id="regression-test-required"&gt;Regression Test required&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Aura components were testable using the &lt;a href="https://github.com/forcedotcom/LightningTestingService"&gt;Lightning Testing Service&lt;/a&gt;, while Lightning Web Components get tested using &lt;a href="https://github.com/salesforce/lwc-jest"&gt;lwc-jest&lt;/a&gt;. These tests are not compatible.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://uilicious.com/"&gt;UI-licious&lt;/a&gt; to the rescue. UI-licious is a testing framework for UI tests. They use a simple JavaScript syntax to provide testing and a rather clever addressing of elements. Other than &lt;a href="https://www.seleniumhq.org/"&gt;Selenium&lt;/a&gt;, they don't rely on CSS selectors or XPath expressions (You still can use those).&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;To be very clear:&lt;/strong&gt; A UI level testing library is &lt;strong&gt;not&lt;/strong&gt; a replacement for proper unit testing. UI-licious has two use cases here: top of the pyramid UI testing and spotting UI level regressions. To learn more about the "testing pyramid", check out &lt;a href="https://martinfowler.com/articles/practical-test-pyramid.html"&gt;Martin Fowler's essay&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;To give it a try I &lt;a href="https://github.com/Stwissel/lwcaura"&gt;created 2 components&lt;/a&gt; with identical functionality: one in Aura, one as LWC. The components show a dialog where you can pick values for radio buttons. &lt;a href="https://www.linkedin.com/in/shi-ling-tai-16679147/"&gt;Shi Ling&lt;/a&gt;, the CEO provided the test script (the login subroutine omitted for brevity):&lt;/p&gt; 
&lt;pre class="brush: js"&gt;I.wait(30) // wait for salesforce to be ready
I.click("App Launcher")
I.click("Clown around")

I.see("Having 2 components of the same type")

test("The aura version")
test("The LWC version")

function test(btn){
  I.click(btn)
  I.see("Pick an Opportunity and Color")
  I.click("Product Opportunity")
  I.click("Red")
  I.click("Select")
  I.see("Nicely done")
}  
&lt;/pre&gt; 
&lt;p&gt;Watch &lt;a href="https://snippet.uilicious.com/embed/test/private/6YxZnZYNnzWQ9JTP5Z1mub?step=1&amp;amp;autoplay=1"&gt;the result&lt;/a&gt; for yourself:&lt;/p&gt; 
&lt;iframe id="inlineFrameExample" title="Inline Frame Example" width="800" height="600" src="https://snippet.uilicious.com/embed/test/private/6YxZnZYNnzWQ9JTP5Z1mub?step=1&amp;amp;autoplay=1"&gt; &lt;/iframe&gt; 
&lt;p&gt;What I really like: UI-licious builds the collaboration feature around testing, so stakeholders can see any time what's going on. Give them a try!&lt;/p&gt;</description>
	<link>2019/03/testing-aura-and-lwc-in-a-single-test.html</link>
	<author>Stephan H. Wissel</author>
	<guid>ac4ec4e0-4642-11e9-89b6-6f109a38b8f6</guid>
	<pubDate>14 March 2019</pubDate>

</item>
<item>
	<title>Navigation in Lightning communities</title>
	<description>&lt;p&gt;In a recent project we had to design navigation in a Lightning community. This is what we learned along the way.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#beyond-the-menu" id="beyond-the-menu"&gt;Beyond the menu&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;When you pick a &lt;a href="https://www.salesforce.com/products/community-cloud/features/templates/"&gt;Lightning Template&lt;/a&gt; you will have a build in menu navigation. This works well if all menu items are meant for all users (no assignment of audience), but breaks down for more sophisticated or programmatic navigation.&lt;/p&gt; 
&lt;p&gt;On first view the &lt;a href="https://developer.salesforce.com/docs/component-library/documentation/lwc/lwc.use_navigate"&gt;Lightning navigation service&lt;/a&gt; (available in Aura or LWC) seems like the answer. However on inspection of &lt;a href="https://developer.salesforce.com/docs/component-library/bundle/lightning-navigation/documentation"&gt;lightning-navigation&lt;/a&gt; you find as supported experiences only Lightning Experience and Salesforce mobile app, Communities are missing.&lt;/p&gt; 
&lt;p&gt;Digging a little deeper and checking the &lt;a href="https://developer.salesforce.com/docs/component-library/documentation/lwc/lwc.reference_page_reference_type"&gt;Page Reference Types&lt;/a&gt;, you will find "limited support for Communities". I tested it out, here are my findings:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The documentation is accurate. What is stated as working works, what is stated as not supported in communities does not work.&lt;/li&gt; 
 &lt;li&gt;The painfully missing piece is &lt;code&gt;standard__component&lt;/code&gt; which would allow to navigate to a custom lightning component. It is the only component that supports &lt;code&gt;state&lt;/code&gt; (more on that later)&lt;/li&gt; 
 &lt;li&gt;Navigate to &lt;code&gt;standard__objectPage&lt;/code&gt; opens the list/page layout based on the user's profile. When you specify. &lt;code&gt;actionName="new"&lt;/code&gt;, the standard object detail page will open. It will not use an eventual define new button overwrite&lt;/li&gt; 
 &lt;li&gt;Works as specified: &lt;code&gt;standard__recordPage&lt;/code&gt;, &lt;code&gt;standard__knowledgeArticlePage&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Doesn't work: &lt;code&gt;standard__webPage&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;None of the navigation working in communities supports the &lt;code&gt;state&lt;/code&gt; properties&lt;/li&gt; 
 &lt;li&gt;The most interesting navigation in communities is &lt;code&gt;standard__namedPage&lt;/code&gt;. Beside the predefined default pages "Home","Account management", "Contact Support", "Error", "Top Articles" and "Topic Catalog", it supports "Custom Pages". In other words: any of the pages you have created in your community. So the missing &lt;code&gt;standard_component&lt;/code&gt; can be mitigated by embedding it into a custom page. Keep in mind: the &lt;code&gt;pageName&lt;/code&gt; property is the URL, not the name.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;a href="#transferring-state" id="transferring-state"&gt;Transferring state&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;As mentioned above, the &lt;code&gt;state&lt;/code&gt; property gets ignored, dropped without an error when used with any of the working navigation items. The remedy for that is to use the session store. An Aura code snippet would looks like this:&lt;/p&gt; 
&lt;pre class="brush: js"&gt;function(component, event, helper) {
    event.preventDefault();
    var navService = component.find("navService");
    var pageReference = {
        type: "standard__namedPage",
        attributes: {
            pageName: "some-page-name"
        },
        state: {
            bingo: true,
            answer: 42,
            tango: "double"
        }
    };
    sessionStorage.setItem('localTransfer', JSON.stringify(pageReference.state));
    navService.navigate(pageReference);
}
&lt;/pre&gt; 
&lt;p&gt;I left the state in the &lt;code&gt;pageReference&lt;/code&gt; JSON object to show that it doesn't harm. The &lt;code&gt;navService&lt;/code&gt; component is defined as &lt;code&gt;&amp;lt;lightning:navigation aura:id="navService"/&amp;gt;&lt;/code&gt; in Aura. On the receiving end you use:&lt;/p&gt; 
&lt;pre class="brush: js"&gt;var localStuff = sessionStorage.getItem('localTransfer');
if (localStuff) {
	var state = JSON.parse(localStuff);
	// Do the needed stuff here
}
&lt;/pre&gt; 
&lt;p&gt;As usual YMMV&lt;/p&gt;</description>
	<link>2019/03/navigation-in-lightning-communities.html</link>
	<author>Stephan H. Wissel</author>
	<guid>96ba06e0-447f-11e9-85c1-b77de648aedf</guid>
	<pubDate>12 March 2019</pubDate>

</item>
<item>
	<title>Using render() in LWC</title>
	<description>&lt;p&gt;Whatever template system you use, you will end up with show/hide logic based on your data's values. In Aura components you have an expression language (reminded me of JSF), in LWC external (in your JavaScript class) boolean values or functions.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#keep-it-tidy" id="keep-it-tidy"&gt;Keep it tidy&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;A common interaction pattern, similar to the Salesforce default behavior when you have more than one record type available, is to show a pre-selection (which record type), a main selection (required data) and (eventually) a post-selection (what's next?).&lt;/p&gt; 
&lt;p&gt;In a lightning web component you can handle that easily using &lt;a href="https://developer.salesforce.com/docs/component-library/documentation/lwc/create_conditional"&gt;&lt;code&gt;if:true|false&lt;/code&gt;&lt;/a&gt; inside your html template.&lt;/p&gt; 
&lt;p&gt;But what if the sections are quite lengthy? Maintaining the HTML template can get messy. Enter the &lt;code&gt;render()&lt;/code&gt; method. In LWC this method doesn't to the actual rendering, but determines what template to use to render the component.&lt;/p&gt; 
&lt;p&gt;There are a few simple rules:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;You need to import your template into your JavaScript file&lt;/li&gt; 
 &lt;li&gt;The call to &lt;code&gt;render()&lt;/code&gt; must return the imported variable (see example below)&lt;/li&gt; 
 &lt;li&gt;You can make the computation dependent on anything inside the class&lt;/li&gt; 
 &lt;li&gt;You can't assemble the template in memory as a String, it will throw you an error&lt;/li&gt; 
&lt;/ul&gt;</description>
	<link>2019/03/using-render-in-lwc.html</link>
	<author>Stephan H. Wissel</author>
	<guid>4c94b700-3e93-11e9-a1a8-c550f64643d4</guid>
	<pubDate>04 March 2019</pubDate>

</item>

</channel>
</rss>
