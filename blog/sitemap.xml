<?xml version="1.0"?>
<rss version="2.0">
<channel>
	<title>wissel.net Usability - Productivity - Business - The web - Singapore and Twins</title>
	<link>https://wissel.net/blog/stories.rss</link>
	<description>Thoughts, Insights and Opinions of Stephan H. Wissel. Topics included: IBM Lotus Notes and Domino, IBM Websphere, other IBM Lotus stuff,  J2EE, .Net, Software Archtecture, Personcentric Development, Agile Software, SDLC, Singapore and my Twins</description>
	<language>en,de</language>
	<copyright>(C) 2003 - 2018 Stephan H. Wissel, All rights reserved</copyright>
	<pubdate>Wed, 27 Mar 2019 05:24:31 +0000</pubdate>
<item>
	<title>Re-Usable Dynamic Custom Lookup LWC edition</title>
	<description>&lt;p&gt;Over at &lt;a href="http://sfdcmonkey.com/2017/07/17/re-usable-custom-lookup/"&gt;sfdcmonkey&lt;/a&gt; there's a nice AURA component that allows for dynamic lookup of a given object. Super nice and useful. I wondered what it would take to be rebuild in &lt;a href="https://developer.salesforce.com/docs/component-library/documentation/lwc"&gt;LWC&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="/blog/images/2019/DynamicLookup.png" alt="Dynamic Lookup"&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#same-same-but-different" id="same-same-but-different"&gt;Same, Same but different&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;I want to achieve the same functionality, but would accept subtle differences. This is what I got:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The original component shows the object icon on the left. My version shows the search symbol that comes out of the box with &lt;a href="https://developer.salesforce.com/docs/component-library/bundle/lightning-input/example"&gt;lightning-input&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;I use 3 components instead of two. Input fields that trigger network calls are fairly common and it makes sense to &lt;a href="https://www.maximintegrated.com/en/glossary/definitions.mvp/term/debounce/gpk/82"&gt;debounce&lt;/a&gt; the input. So I created &lt;code&gt;c-ux-debounced-input&lt;/code&gt; that signals entered data only after a period of 300ms&lt;/li&gt; 
 &lt;li&gt;The component dispatches an event when a result has been selected or cleared, so it can be used inside other components&lt;/li&gt; 
 &lt;li&gt;For now: it can be directly put on a lightning page in page builder and configured there. Useful for demos and test&lt;/li&gt; 
 &lt;li&gt;When you clear the selected object, the result list opens up again, so no second network call is made until you change the input value&lt;/li&gt; 
&lt;/ul&gt;</description>
	<link>2019/03/re-usable-dynamic-custom-lookup-lwc-edition.html</link>
	<author>Stephan H. Wissel</author>
	<guid>8ff284d0-5042-11e9-b56a-cd55bbbbd610</guid>
	<pubDate>27 March 2019</pubDate>

</item>
<item>
	<title>Mapping recordIds to Object Names - Offline edition</title>
	<description>&lt;p&gt;Lightning in Communities is "Same Same but different". When you want to build neutral components, you need to know what object you are dealing with&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#objectapiname-objectname-and-recordid" id="objectapiname-objectname-and-recordid"&gt;ObjectApiName, ObjectName and recordId&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;In Lightning Aura components one can use &lt;a href="https://developer.salesforce.com/docs/component-library/bundle/force:hasSObjectName/documentation"&gt;&lt;code&gt;force:hasSObjectName&lt;/code&gt;&lt;/a&gt; to get access to an attribute &lt;code&gt;sObjectName&lt;/code&gt;. In Lightning Web components one uses &lt;a href="https://developer.salesforce.com/docs/component-library/documentation/lwc/lwc.use_object_context"&gt;&lt;code&gt;@api objectApiName&lt;/code&gt;&lt;/a&gt;. Except neither of those work in &lt;strong&gt;Communities&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;The workaround is to look at the &lt;code&gt;recordId&lt;/code&gt; and use &lt;a href="https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_methods_system_sobject_describe.htm"&gt;&lt;code&gt;DescribeSObjectResult.getKeyPrefix&lt;/code&gt;&lt;/a&gt; to map a record to the object name. There's a &lt;a href="http://www.fishofprey.com/2011/09/obscure-salesforce-object-key-prefixes.html"&gt;comprehensive list&lt;/a&gt; by &lt;a href="https://twitter.com/FishOfPrey"&gt;David&lt;/a&gt; and my &lt;a href="https://gist.github.com/Stwissel/890559482a4ff4ec61c80597dd47f6bd"&gt;version as JSON object&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;However, depending on your org, that list might vary. So I created a small component that lists out the objects in your current org. Enjoy:&lt;/p&gt; 
&lt;h4&gt;&lt;a href="#objectidspycls" id="objectidspycls"&gt;ObjectIdSpy.cls&lt;/a&gt;&lt;/h4&gt; 
&lt;pre class="brush: java"&gt;public without sharing class ObjectIdSpy {  
    @AuraEnabled(cacheable=true)
    public static Map&amp;lt;String,String&amp;gt; getObjectIdMappings(){
        Map&amp;lt;String,String&amp;gt; result = new Map&amp;lt;String,String&amp;gt;();
        Map&amp;lt;String, Schema.SObjectType&amp;gt; gd = Schema.getGlobalDescribe();
        for(String key : gd.keySet()) {
            Schema.SObjectType ot = gd.get(key);
            String curPrefix = ot.getDescribe().getKeyPrefix();
            String curName = ot.getDescribe().getName();
            // Fair warning: will omit objects that share the prefix
            result.put(curPrefix, curName);
        }
      return result;
    } 
}

&lt;/pre&gt; 
&lt;h4&gt;&lt;a href="#objectidspyhtml" id="objectidspyhtml"&gt;objectIdSpy.html&lt;/a&gt;&lt;/h4&gt; 
&lt;pre class="brush: xml"&gt;&amp;lt;template&amp;gt;
    &amp;lt;lightning-card title="Object Spy"&amp;gt;
        &amp;lt;pre&amp;gt;
{idList}
        &amp;lt;/pre&amp;gt;
    &amp;lt;/lightning-card&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/pre&gt; 
&lt;h4&gt;&lt;a href="#objectidspyjs" id="objectidspyjs"&gt;objectIdSpy.js&lt;/a&gt;&lt;/h4&gt; 
&lt;pre class="brush: js"&gt;import { LightningElement, track, wire } from 'lwc';
import idSpy from '@salesforce/apex/ObjectIdSpy.getObjectIdMappings';

export default class ObjectIdSpy extends LightningElement {
  @track idList;

  @wire(idSpy)
  spiedUpon({ error, data }) {
    if (data) {
      this.idList = JSON.stringify(data, null, 2);
    } else if (error) {
      this.idList = JSON.stringify(error, null, 2);
    }
  }
}

&lt;/pre&gt; 
&lt;h4&gt;&lt;a href="#objectidspyjs-metaxml" id="objectidspyjs-metaxml"&gt;objectIdSpy.js-meta.xml&lt;/a&gt;&lt;/h4&gt; 
&lt;pre class="brush: xml"&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;
&amp;lt;LightningComponentBundle xmlns="http://soap.sforce.com/2006/04/metadata" fqn="ObjectIdSpy"&amp;gt;
    &amp;lt;apiVersion&amp;gt;45.0&amp;lt;/apiVersion&amp;gt;
    &amp;lt;isExposed&amp;gt;true&amp;lt;/isExposed&amp;gt;
    &amp;lt;masterLabel&amp;gt;Object Id Spy&amp;lt;/masterLabel&amp;gt;
    &amp;lt;description&amp;gt;Generates a JSON object of Id and object names&amp;lt;/description&amp;gt;
    &amp;lt;targets&amp;gt;
        &amp;lt;target&amp;gt;lightning__RecordPage&amp;lt;/target&amp;gt;
        &amp;lt;target&amp;gt;lightning__AppPage&amp;lt;/target&amp;gt;
        &amp;lt;target&amp;gt;lightning__HomePage&amp;lt;/target&amp;gt;
    &amp;lt;/targets&amp;gt;
&amp;lt;/LightningComponentBundle&amp;gt;
&lt;/pre&gt; 
&lt;p&gt;As usual YMMV!&lt;/p&gt;</description>
	<link>2019/03/mapping-recordids-to-object-names-offline-edition.html</link>
	<author>Stephan H. Wissel</author>
	<guid>741dae00-4abc-11e9-93f7-9d01095f3788</guid>
	<pubDate>20 March 2019</pubDate>

</item>
<item>
	<title>Finding Strings in recursively zipped files</title>
	<description>&lt;p&gt;I had an itch to scratch. After using &lt;a href="https://appexchange.salesforce.com/appxListingDetail?listingId=a0N30000003HSXEEA4"&gt;Field Trip&lt;/a&gt; (which I like a lot) to determine unused fields, the team managing the external &lt;a href="https://www.informatica.com/"&gt;Informatica&lt;/a&gt; integration claimed they would need weeks to ensure none of the fields are used in any of their (hundreds) of pipelines.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#zip-inception" id="zip-inception"&gt;ZIP inception&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;My first reaction (OK, the second, first one isn't PC) was: Let's go after the source code and just use an &lt;a href="https://www.sublimetext.com/"&gt;editor of choice&lt;/a&gt; to do a find in files. Turns out: not so fast. The source export offered by the team was a zip file with an elaborate directory structure containing, tada, zip files. So each of the pipes would need multiple zip operations.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#itch-defined" id="itch-defined"&gt;Itch defined&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;I needed a tool that would start in a directory with a bunch of zip files, unpack them all. Check for zip files in the unpacked result, unzip these and repeat. Once done, take a list of strings and search for occurrences of those and generate a report which shows the files containing these strings&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#itch-scratched" id="itch-scratched"&gt;Itch scratched&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;I created &lt;a href="https://github.com/Stwissel/findStrings"&gt;findstring&lt;/a&gt;, a command line tool that takes a directory as starting point unzips what can be unzipped (optional) and searches for the occurrence of strings provided in a text file.&lt;/p&gt; 
&lt;p&gt;Initially I contemplated to render the output as XML, so the final report could be designed in whatever fashion using XSLT. However following &lt;a href="https://en.wikipedia.org/wiki/KISS_principle"&gt;KISS&lt;/a&gt;, I ended up using &lt;a href="https://en.wikipedia.org/wiki/Markdown"&gt;Markdown&lt;/a&gt;. I might add the XML option later on.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#recursion" id="recursion"&gt;Recursion&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;The key piece of the tool is recursion (until you stack overflow ;-) ). Reading a directory and dive into directories found. I could have avoided that using &lt;a href="https://github.com/google/guava"&gt;Guava&lt;/a&gt; and its &lt;a href="https://google.github.io/guava/releases/snapshot/api/docs/com/google/common/io/Files.html#fileTraverser--"&gt;fileTraverser&lt;/a&gt;, but I like some Inception style coding. The key piece is this:&lt;/p&gt; 
&lt;pre class="brush: java"&gt;    private boolean expandSources(final File sourceDir) throws IOException {
        boolean result = false;
        final File[] allFiles = sourceDir.listFiles();

        for (final File f : allFiles) {
            if (f.isDirectory()) {
                result = result || this.expandSources(f);

            } else if (f.getName().endsWith(".zip")) {
                final String newDirName = f.getAbsolutePath().replace(".zip", "");
                final File newTarget = new File(newDirName);

                // Need to scan the new directory too
                if (this.expandFile(f, newTarget)) {
                    result = result || this.expandSources(newTarget);
                }
            }
        }
        return result;

    }
&lt;/pre&gt; 
&lt;p&gt;The function will return true as long as there was a zip file to be unzipped. The string finding operation (case insensitive) follows the same approach&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#use-cases" id="use-cases"&gt;Use cases&lt;/a&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Find field usage in ZIP files. Works with a package downloaded from the meta data api or what Informatica exports&lt;/li&gt; 
 &lt;li&gt;Check a source directory (doesn't need to contain zips) for keywords like &lt;code&gt;TODO&lt;/code&gt;, &lt;code&gt;FIXME&lt;/code&gt;, &lt;code&gt;XXX&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The command line syntax is very simple:&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;java -jar findString.jar -d directory -s strings [-o output]&lt;/code&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;-d,?dir &amp;lt;arg&amp;gt; directory with all zip files&lt;/li&gt; 
 &lt;li&gt;-s,?stringfile &amp;lt;arg&amp;gt; Filename with Strings to search, one per line&lt;/li&gt; 
 &lt;li&gt;-o,?output &amp;lt;arg&amp;gt; Output file name for report in MD format&lt;/li&gt; 
 &lt;li&gt;-nz,?nz Rerun find operation on a ready unzipped structure - good for alternate finds&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;a href="#limits" id="limits"&gt;Limits&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;In its current form the utility will check for strings in any file short of zip. Zip gets unpacked and the result checked. When your directory contains binary files (e.g. images) it will still look for the string occurrence inside. File extension filters might be a future enhancement (&lt;a href="https://github.com/Stwissel/findStrings/issues"&gt;share your opinion&lt;/a&gt;).&lt;/p&gt; 
&lt;p&gt;Files are read into memory. So if your directory contains huge files, you will blow your heap. Source code files hardly pose an issue, so the approach worked for me. Alternatively a &lt;a href="https://docs.oracle.com/javase/7/docs/api/java/util/Scanner.html"&gt;scanner&lt;/a&gt; could be used, should the need arise.&lt;/p&gt; 
&lt;p&gt;Go &lt;a href="https://github.com/Stwissel/findStrings/releases"&gt;give it a spin&lt;/a&gt; and keep in mind: YMMV&lt;/p&gt;</description>
	<link>2019/03/finding-strings-in-recursively-zipped-files.html</link>
	<author>Stephan H. Wissel</author>
	<guid>478555c0-47a4-11e9-872b-771845fe5f6a</guid>
	<pubDate>16 March 2019</pubDate>

</item>
<item>
	<title>Testing Aura and LWC in a single Test</title>
	<description>&lt;p&gt;You drank the &lt;a href="https://www.salesforce.com/company/news-press/press-releases/2018/12/181213-t/"&gt;CoolAid&lt;/a&gt; and noticed that the Aura framework &lt;a href="https://github.com/forcedotcom/aura"&gt;has been archived&lt;/a&gt;. You are hell bend to migrate your components.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#regression-test-required" id="regression-test-required"&gt;Regression Test required&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Aura components were testable using the &lt;a href="https://github.com/forcedotcom/LightningTestingService"&gt;Lightning Testing Service&lt;/a&gt;, while Lightning Web Components get tested using &lt;a href="https://github.com/salesforce/lwc-jest"&gt;lwc-jest&lt;/a&gt;. These tests are not compatible.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://uilicious.com/"&gt;UI-licious&lt;/a&gt; to the rescue. UI-licious is a testing framework for UI tests. They use a simple JavaScript syntax to provide testing and a rather clever addressing of elements. Other than &lt;a href="https://www.seleniumhq.org/"&gt;Selenium&lt;/a&gt;, they don't rely on CSS selectors or XPath expressions (You still can use those).&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;To be very clear:&lt;/strong&gt; A UI level testing library is &lt;strong&gt;not&lt;/strong&gt; a replacement for proper unit testing. UI-licious has two use cases here: top of the pyramid UI testing and spotting UI level regressions. To learn more about the "testing pyramid", check out &lt;a href="https://martinfowler.com/articles/practical-test-pyramid.html"&gt;Martin Fowler's essay&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;To give it a try I &lt;a href="https://github.com/Stwissel/lwcaura"&gt;created 2 components&lt;/a&gt; with identical functionality: one in Aura, one as LWC. The components show a dialog where you can pick values for radio buttons. &lt;a href="https://www.linkedin.com/in/shi-ling-tai-16679147/"&gt;Shi Ling&lt;/a&gt;, the CEO provided the test script (the login subroutine omitted for brevity):&lt;/p&gt; 
&lt;pre class="brush: js"&gt;I.wait(30) // wait for salesforce to be ready
I.click("App Launcher")
I.click("Clown around")

I.see("Having 2 components of the same type")

test("The aura version")
test("The LWC version")

function test(btn){
  I.click(btn)
  I.see("Pick an Opportunity and Color")
  I.click("Product Opportunity")
  I.click("Red")
  I.click("Select")
  I.see("Nicely done")
}  
&lt;/pre&gt; 
&lt;p&gt;Watch &lt;a href="https://snippet.uilicious.com/embed/test/private/6YxZnZYNnzWQ9JTP5Z1mub?step=1&amp;amp;autoplay=1"&gt;the result&lt;/a&gt; for yourself:&lt;/p&gt; 
&lt;iframe id="inlineFrameExample" title="Inline Frame Example" width="800" height="600" src="https://snippet.uilicious.com/embed/test/private/6YxZnZYNnzWQ9JTP5Z1mub?step=1&amp;amp;autoplay=1"&gt; &lt;/iframe&gt; 
&lt;p&gt;What I really like: UI-licious builds the collaboration feature around testing, so stakeholders can see any time what's going on. Give them a try!&lt;/p&gt;</description>
	<link>2019/03/testing-aura-and-lwc-in-a-single-test.html</link>
	<author>Stephan H. Wissel</author>
	<guid>ac4ec4e0-4642-11e9-89b6-6f109a38b8f6</guid>
	<pubDate>14 March 2019</pubDate>

</item>
<item>
	<title>Navigation in Lightning communities</title>
	<description>&lt;p&gt;In a recent project we had to design navigation in a Lightning community. This is what we learned along the way.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#beyond-the-menu" id="beyond-the-menu"&gt;Beyond the menu&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;When you pick a &lt;a href="https://www.salesforce.com/products/community-cloud/features/templates/"&gt;Lightning Template&lt;/a&gt; you will have a build in menu navigation. This works well if all menu items are meant for all users (no assignment of audience), but breaks down for more sophisticated or programmatic navigation.&lt;/p&gt; 
&lt;p&gt;On first view the &lt;a href="https://developer.salesforce.com/docs/component-library/documentation/lwc/lwc.use_navigate"&gt;Lightning navigation service&lt;/a&gt; (available in Aura or LWC) seems like the answer. However on inspection of &lt;a href="https://developer.salesforce.com/docs/component-library/bundle/lightning-navigation/documentation"&gt;lightning-navigation&lt;/a&gt; you find as supported experiences only Lightning Experience and Salesforce mobile app, Communities are missing.&lt;/p&gt; 
&lt;p&gt;Digging a little deeper and checking the &lt;a href="https://developer.salesforce.com/docs/component-library/documentation/lwc/lwc.reference_page_reference_type"&gt;Page Reference Types&lt;/a&gt;, you will find "limited support for Communities". I tested it out, here are my findings:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The documentation is accurate. What is stated as working works, what is stated as not supported in communities does not work.&lt;/li&gt; 
 &lt;li&gt;The painfully missing piece is &lt;code&gt;standard__component&lt;/code&gt; which would allow to navigate to a custom lightning component. It is the only component that supports &lt;code&gt;state&lt;/code&gt; (more on that later)&lt;/li&gt; 
 &lt;li&gt;Navigate to &lt;code&gt;standard__objectPage&lt;/code&gt; opens the list/page layout based on the user's profile. When you specify. &lt;code&gt;actionName="new"&lt;/code&gt;, the standard object detail page will open. It will not use an eventual define new button overwrite&lt;/li&gt; 
 &lt;li&gt;Works as specified: &lt;code&gt;standard__recordPage&lt;/code&gt;, &lt;code&gt;standard__knowledgeArticlePage&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Doesn't work: &lt;code&gt;standard__webPage&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;None of the navigation working in communities supports the &lt;code&gt;state&lt;/code&gt; properties&lt;/li&gt; 
 &lt;li&gt;The most interesting navigation in communities is &lt;code&gt;standard__namedPage&lt;/code&gt;. Beside the predefined default pages "Home","Account management", "Contact Support", "Error", "Top Articles" and "Topic Catalog", it supports "Custom Pages". In other words: any of the pages you have created in your community. So the missing &lt;code&gt;standard_component&lt;/code&gt; can be mitigated by embedding it into a custom page. Keep in mind: the &lt;code&gt;pageName&lt;/code&gt; property is the URL, not the name.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;a href="#transferring-state" id="transferring-state"&gt;Transferring state&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;As mentioned above, the &lt;code&gt;state&lt;/code&gt; property gets ignored, dropped without an error when used with any of the working navigation items. The remedy for that is to use the session store. An Aura code snippet would looks like this:&lt;/p&gt; 
&lt;pre class="brush: js"&gt;function(component, event, helper) {
    event.preventDefault();
    var navService = component.find("navService");
    var pageReference = {
        type: "standard__namedPage",
        attributes: {
            pageName: "some-page-name"
        },
        state: {
            bingo: true,
            answer: 42,
            tango: "double"
        }
    };
    sessionStorage.setItem('localTransfer', JSON.stringify(pageReference.state));
    navService.navigate(pageReference);
}
&lt;/pre&gt; 
&lt;p&gt;I left the state in the &lt;code&gt;pageReference&lt;/code&gt; JSON object to show that it doesn't harm. The &lt;code&gt;navService&lt;/code&gt; component is defined as &lt;code&gt;&amp;lt;lightning:navigation aura:id="navService"/&amp;gt;&lt;/code&gt; in Aura. On the receiving end you use:&lt;/p&gt; 
&lt;pre class="brush: js"&gt;var localStuff = sessionStorage.getItem('localTransfer');
if (localStuff) {
	var state = JSON.parse(localStuff);
	// Do the needed stuff here
}
&lt;/pre&gt; 
&lt;p&gt;As usual YMMV&lt;/p&gt;</description>
	<link>2019/03/navigation-in-lightning-communities.html</link>
	<author>Stephan H. Wissel</author>
	<guid>96ba06e0-447f-11e9-85c1-b77de648aedf</guid>
	<pubDate>12 March 2019</pubDate>

</item>
<item>
	<title>Using render() in LWC</title>
	<description>&lt;p&gt;Whatever template system you use, you will end up with show/hide logic based on your data's values. In Aura components you have an expression language (reminded me of JSF), in LWC external (in your JavaScript class) boolean values or functions.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#keep-it-tidy" id="keep-it-tidy"&gt;Keep it tidy&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;A common interaction pattern, similar to the Salesforce default behavior when you have more than one record type available, is to show a pre-selection (which record type), a main selection (required data) and (eventually) a post-selection (what's next?).&lt;/p&gt; 
&lt;p&gt;In a lightning web component you can handle that easily using &lt;a href="https://developer.salesforce.com/docs/component-library/documentation/lwc/create_conditional"&gt;&lt;code&gt;if:true|false&lt;/code&gt;&lt;/a&gt; inside your html template.&lt;/p&gt; 
&lt;p&gt;But what if the sections are quite lengthy? Maintaining the HTML template can get messy. Enter the &lt;code&gt;render()&lt;/code&gt; method. In LWC this method doesn't to the actual rendering, but determines what template to use to render the component.&lt;/p&gt; 
&lt;p&gt;There are a few simple rules:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;You need to import your template into your JavaScript file&lt;/li&gt; 
 &lt;li&gt;The call to &lt;code&gt;render()&lt;/code&gt; must return the imported variable (see example below)&lt;/li&gt; 
 &lt;li&gt;You can make the computation dependent on anything inside the class&lt;/li&gt; 
 &lt;li&gt;You can't assemble the template in memory as a String, it will throw you an error&lt;/li&gt; 
&lt;/ul&gt;</description>
	<link>2019/03/using-render-in-lwc.html</link>
	<author>Stephan H. Wissel</author>
	<guid>4c94b700-3e93-11e9-a1a8-c550f64643d4</guid>
	<pubDate>04 March 2019</pubDate>

</item>
<item>
	<title>Global value providers in LWC</title>
	<description>&lt;p&gt;Drinking the &lt;a href="https://www.webcomponents.org/specs"&gt;new CoolAid&lt;/a&gt; one has to come to terms with the old ways. We had a &lt;a href="/blog/2018/12/lwc-quick-overview.html"&gt;first glimpse&lt;/a&gt; before.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#same-but-different-reloaded" id="same-but-different-reloaded"&gt;Same but different, reloaded&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;When developing lightning components using the &lt;a href="https://github.com/forcedotcom/aura"&gt;Aura Framework&lt;/a&gt; you could use a series of global value providers that give you access to various data sets: &lt;code&gt;$ContentAsset&lt;/code&gt;, &lt;code&gt;$Labels&lt;/code&gt;, &lt;code&gt;$Locale&lt;/code&gt;, and &lt;code&gt;$Resource&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;While this convenient, it pollutes the global name space and it a very proprietary (albeit popular at its time) way to provide information. &lt;a href="https://developer.salesforce.com/docs/component-library/documentation/lwc"&gt;LWC&lt;/a&gt; fixes this in a very standard compliant way. This became possible thanks to the new capabilities in the JavaScript &lt;a href="http://www.ecma-international.org/ecma-262/6.0/"&gt;ES6&lt;/a&gt; standard.&lt;/p&gt; 
&lt;p&gt;In LWC all information provided by Salesforce gets added using ES6 &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import"&gt;import&lt;/a&gt; statements from the &lt;code&gt;@salesforce&lt;/code&gt; name space. While that syntax is new to Salesforce developers, it is old news for the rest of JavaScript land. So here you go:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;$ContentAsset&lt;/code&gt; -&amp;gt; &lt;code&gt;import assetName from @salesforce/contentAssetUrl/[AssetName]&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;$Labels&lt;/code&gt; -&amp;gt; &lt;code&gt;import labelName from @salesforce/label/[LabelName]&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;$Locale&lt;/code&gt; -&amp;gt; &lt;code&gt;import i18nproperty from @salesforce/i18n/[internationalizationProperty]&lt;/code&gt; (with various values)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;$Resource&lt;/code&gt; -&amp;gt; &lt;code&gt;import resourceName from @salesforce/resourceUrl/[resourceName]&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;current User Id -&amp;gt; &lt;code&gt;import userId from @salesforce/User/Id&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The &lt;code&gt;@salesforce&lt;/code&gt; name space provides access &lt;a href="http://component-library-dev.herokuapp.com/docs/component-library/documentation/lwc/lwc.reference_salesforce_modules"&gt;to additional data&lt;/a&gt;, like &lt;code&gt;apex&lt;/code&gt; and &lt;code&gt;schema&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;As usual YMMV&lt;/p&gt;</description>
	<link>2019/03/global-value-providers-in-lwc.html</link>
	<author>Stephan H. Wissel</author>
	<guid>d8655430-3bcb-11e9-b5fe-4b73381df565</guid>
	<pubDate>01 March 2019</pubDate>

</item>
<item>
	<title>From Excel to package.xml</title>
	<description>&lt;p&gt;Cleaning up an org that has gone through several generations of ownership and objectives is fun. Some tooling helps&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#data-frugality" id="data-frugality"&gt;Data frugality&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;A computing principle, very much the anathema to Google and Facebook, is &lt;a href="https://martinfowler.com/bliki/Datensparsamkeit.html"&gt;Data Frugality&lt;/a&gt;, storing only what you actually need. It is the data equivalent to coders' &lt;a href="https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it"&gt;YAGNI&lt;/a&gt; principle. Latest since &lt;a href="http://ec.europa.eu/justice/newsroom/data-protection/infographic/2017/index_en.htm"&gt;GDPR&lt;/a&gt; it got center stage attention.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#your-cleanup-plan" id="your-cleanup-plan"&gt;Your cleanup plan&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;So your cleanup exercise has a few steps:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Find fields that don't have any data. You can use tools like &lt;a href="https://appexchange.salesforce.com/appxListingDetail?listingId=a0N30000003HSXEEA4"&gt;Field Trip&lt;/a&gt; to achieve that&lt;/li&gt; 
 &lt;li&gt;Verify that these fields are not "about to be used", but "really obsolete"&lt;/li&gt; 
 &lt;li&gt;Add all the fields that did have some data left over, but unused now&lt;/li&gt; 
 &lt;li&gt;Add fields that contain data legal told you to get rid off&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The absolute standard approach, of any consultant I have encountered, is to fire up an Excel sheet and track all fields in a list, capture insights in the &lt;code&gt;remarks&lt;/code&gt; column and have another column that indicates &lt;code&gt;can be deleted&lt;/code&gt; Status. Something like &lt;code&gt;Yes,No,Investigating&lt;/code&gt; or "Call Paul to clarify". I would be surprised if there's a different approach in the wild (in theory there are).&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#excel-as-source" id="excel-as-source"&gt;Excel as source?&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;In a current project the consultant neatly created one sheet (that's the page, not the file) per object, labeled with the object name, containing rows for all custom fields. Then the team went off to investigate. In result they identified more than one thousand fields to be deleted.&lt;/p&gt; 
&lt;p&gt;Now to actually get rid of the fields, you could &lt;a href="https://www.mturk.com/"&gt;outsource&lt;/a&gt; some manual labor to either go into you org or use Copy-Paste to create a &lt;code&gt;destructivechanges.xml&lt;/code&gt; package file for use with the &lt;a href="https://developer.salesforce.com/docs/atlas.en-us.daas.meta/daas/daas_destructive_changes.htm"&gt;Salesforce ANT tool&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;In any case: the probability that there will be errors in transferring is approximately 100%. The business owner will point to: I signed off that spreadsheet and not that XML file! Finger pointing commencing.&lt;/p&gt; 
&lt;p&gt;There must be a better way!&lt;/p&gt;</description>
	<link>2019/02/from-excel-to-package.xml.html</link>
	<author>Stephan H. Wissel</author>
	<guid>e66be7a0-3730-11e9-89cf-09a347326aff</guid>
	<pubDate>23 February 2019</pubDate>

</item>
<item>
	<title>Draining the happy soup - Part 3</title>
	<description>&lt;p&gt;In &lt;a href="/blog/2019/02/draining-the-happy-soup-part-2.html"&gt;Part 2&lt;/a&gt; we had a look at the plan. Now it is time to put it into motion. Let's setup our project structure&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#put-some-order-in-your-files" id="put-some-order-in-your-files"&gt;Put some order in your files&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Our goal is to distribute happy soup artifacts into packages. In this installment we setup the directory structure for that. Sticking to a clear structure makes it easier to get a step closer to package Nirvana step by step.&lt;/p&gt; 
&lt;p&gt;&lt;img src="/blog/images/2019/SFDXDirectoryStructure.jpg" alt="Proposed directory structure"&gt;&lt;/p&gt; 
&lt;p&gt;Let me run through some of the considerations:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;I'll keep all packages inside a single directory structure. Name the root after your org. What might pose a challenge is to name it &lt;code&gt;sfdx&lt;/code&gt; - too close to that hidden directory &lt;code&gt;.sfdx&lt;/code&gt; that does exist in your home directory and might exist in the project directories&lt;/li&gt; 
 &lt;li&gt;You could keep the whole tree in a single repository or subject each package directory to its own repository. I'd prefer the later, since it allows a developer to pull only the relevant directories from source control (That's Option B)&lt;/li&gt; 
 &lt;li&gt;The base directory, containing the artifacts that won't be packaged shall be named &lt;code&gt;HappySoup&lt;/code&gt;. While it is a rather colloquial term, it is well established&lt;/li&gt; 
 &lt;li&gt;I'm a little old fashioned when it comes to directory names: no spaces, double byte characters (that includes ?) or special characters&lt;/li&gt; 
 &lt;li&gt;You need to pay attention to &lt;code&gt;sfdx-project.json&lt;/code&gt; and &lt;code&gt;.sfdx&lt;/code&gt; as well as &lt;code&gt;.gitignore&lt;/code&gt;. More and that below&lt;/li&gt; 
 &lt;li&gt;When you have mixed OS developer communities using Windows, MAC or Linux, directory delimiters could become a headache. My tongue-in-cheek recommendation for Windows would be to use &lt;a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10"&gt;WSL&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;a href="#key-files-and-directories" id="key-files-and-directories"&gt;Key files and directories&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Initially you want to divide, but not yet package. So your projects need to know about each other. Higher level packages, that in future will depend on base packages need to know about them and each package needs to know about the &lt;code&gt;HappySoup&lt;/code&gt;. To get there I adjust my &lt;code&gt;sfdx-project.json&lt;/code&gt;:&lt;/p&gt; 
&lt;pre class="brush: js"&gt;{
"packageDirectories" : [
    { "path": "force-app", "default": true},
    { "path" : "../ObjectBase/force-app" },
    { "path" : "../HappySoup/force-app" }
  ],
"namespace": "",
"sfdcLoginUrl" : "https://login.salesforce.com",
"sourceApiVersion": "45.0"
}
&lt;/pre&gt; 
&lt;p&gt;The key here are the relative path entries like &lt;code&gt;../HappySoup/force-app&lt;/code&gt;. When you use &lt;code&gt;sfdx force:source:push&lt;/code&gt; the content gets pushed to your scratch org, so it is complete. When you use &lt;code&gt;sfdx force:source:pull&lt;/code&gt; changes you made are copied down to the default path, so the adjacent projects remain as is.&lt;/p&gt; 
&lt;p&gt;When using &lt;code&gt;pull&lt;/code&gt; and &lt;code&gt;push&lt;/code&gt; from &lt;a href="https://developer.salesforce.com/tools/extension_vscode"&gt;VSCode&lt;/a&gt; it will use the default user name configured for SFDX. To ensure that you don't push to or pull from the wrong place, you need to create one scratch org each using &lt;code&gt;sfdx force:org:create --f config/project-scratch-def.json -a [ScratchOrgAlias]&lt;/code&gt; and then execute &lt;code&gt;sfdx force:config:set defaultusername=[ScratchOrgAlias]&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;The command will create a &lt;code&gt;.sfdx&lt;/code&gt; directory and config files inside in your project. Unless all developers checking out that repository use the same aliases (unlikely), you want to add &lt;code&gt;.sfdx&lt;/code&gt; to your &lt;a href="https://github.com/forcedotcom/sfdx-simple/blob/master/.gitignore"&gt;.gitignore&lt;/a&gt; file.&lt;/p&gt; 
&lt;p&gt;Now you are all set to move files from the happy soup to future package directories. With the relative path in your &lt;code&gt;sfdx-project.json&lt;/code&gt; no packaging is required now and you still can get a fully functioning scratch org.&lt;/p&gt; 
&lt;p&gt;One pro tip: instead of relying on individual scratch definition files, you might opt to use the one in the happy soup, so all your scratches have the same shape.&lt;/p&gt; 
&lt;p&gt;Next stop: building the solution before you package. As usual YMMV.&lt;/p&gt;</description>
	<link>2019/02/draining-the-happy-soup-part-3.html</link>
	<author>Stephan H. Wissel</author>
	<guid>fa70b9a0-363c-11e9-bcba-578350efc416</guid>
	<pubDate>22 February 2019</pubDate>

</item>
<item>
	<title>Draining the happy soup - Part 2</title>
	<description>&lt;p&gt;We stormed ahead in &lt;a href="/blog/2019/02/draining-the-happy-soup-part-1.html"&gt;Part 1&lt;/a&gt; and downloaded all the meta data in SFDX format. Now it's time to stop for a moment and ask: what's the plan?&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#you-need-a-plan" id="you-need-a-plan"&gt;You need a plan&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;When embarking on the SFDX package journey, the start is Phase 0. You have an org that contains all your meta data and zero or more (managed) packages from &lt;a href="https://appexchange.salesforce.com/"&gt;AppExchange&lt;/a&gt;. That's the &lt;a href="https://vignette.wikia.nocookie.net/shrek/images/5/58/Fc19d7db9cbcb7659aae3dce7bf6b3c1.jpg/revision/latest?cb=20170129025042"&gt;swamp&lt;/a&gt; you want to drain.&lt;/p&gt; 
&lt;p&gt;&lt;img src="/blog/images/2019/Phase0.jpg" alt="Phase 0 - happy soup"&gt;&lt;/p&gt; 
&lt;p&gt;Before you move to phase 1, you need to be clear how you want to structure your packages. High level could look like this:&lt;/p&gt; 
&lt;p&gt;&lt;img src="/blog/images/2019/Structure.jpg" alt="Structure - happy soup"&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;You have an unpackaged base, that over time will shrink. The interesting challenge is to deal with dependencies there&lt;/li&gt; 
 &lt;li&gt;Some of the components will be used across all system - most likely extensions to standard objects or triggers and utility classes. Core LWC components are good candidates for base packages too. There can be more than one base package&lt;/li&gt; 
 &lt;li&gt;Your business components. Slice them by business function, country specifics or business unit. Most likely will resemble some of your organization structure&lt;/li&gt; 
 &lt;li&gt;A package from AppExchange or a legacy package will not depend on anything. In my current project we moved all VisualForce stuff (pages and controllers) there, since these won't be needed after the lightning migration is concluded and then can be uninstalled easily.&lt;/li&gt; 
&lt;/ol&gt;</description>
	<link>2019/02/draining-the-happy-soup-part-2.html</link>
	<author>Stephan H. Wissel</author>
	<guid>37ce0350-334c-11e9-8f2c-e9611f89e0a8</guid>
	<pubDate>18 February 2019</pubDate>

</item>

</channel>
</rss>
