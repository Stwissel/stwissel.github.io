<?xml version="1.0"?>
<rss version="2.0">
<channel>
	<title>wissel.net Usability - Productivity - Business - The web - Singapore and Twins</title>
	<link>https://wissel.net/blog/stories.rss</link>
	<description>Thoughts, Insights and Opinions of Stephan H. Wissel. Topics included: Salesforce, Lotus Notes and Domino, IBM Websphere, NodeJS, JavaScript,  J2EE, .Net, Software Archtecture, Personcentric Development, Agile Software, SDLC, Singapore and my Twins</description>
	<language>en,de</language>
	<copyright>(C) 2003 - 2021 Stephan H. Wissel, All rights reserved</copyright>
	<pubdate>Tue, 29 Aug 2023 12:13:32 +0000</pubdate>
<item>
	<title>Fun with Azure Active Directory &amp; JWT</title>
	<description>&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Active_Directory"&gt;Active Directory&lt;/a&gt; has been the dominant standard for IT directories, even if it isn't &lt;a href="/blog/2014/01/a-short-history-of-directory-trees.html"&gt;the prettiest tree&lt;/a&gt; in the forrest. It's younger sibling &lt;a href="https://en.wikipedia.org/wiki/Microsoft_Azure_Active_Directory"&gt;~~Azure Active Directory~~ Entra ID&lt;/a&gt; is a big player in cloud based &lt;a href="https://en.wikipedia.org/wiki/Identity_provider"&gt;Identity Providers (IdP)&lt;/a&gt;. Unsurprisingly it behaves differently than the gold standard &lt;a href="https://www.keycloak.org/"&gt;KeyCloak&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;JWT expectations&lt;/h3&gt;
&lt;p&gt;A &lt;a href="https://en.wikipedia.org/wiki/JSON_Web_Token"&gt;Json Web Token (JWT)&lt;/a&gt; payload is a &lt;strong&gt;very&lt;/strong&gt; losely definded &lt;a href="https://en.wikipedia.org/wiki/JSON"&gt;JSON&lt;/a&gt; object with various claims. There is only a minimal consent of properties":&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;{
  "iss": "https://where-it-came-from",
  "audience": "https://where-it-should-be-valid",
  "iat": "DATE/TIME -&amp;gt; issued at",
  "exp": "DATE/TIME -&amp;gt; expiry",
  "scope": "space separated list of scopes",
  "email": "user's email"
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The whole thing is (un)defined in &lt;a href="https://datatracker.ietf.org/doc/html/rfc7519"&gt;RFC7519&lt;/a&gt;, sufficiently loose, so anyone can claim to be standard compliant and nothing is interoperable (just like &lt;a href="https://datatracker.ietf.org/doc/html/rfc5545"&gt;ical&lt;/a&gt;). There is a &lt;a href="https://www.iana.org/assignments/jwt/jwt.xhtml"&gt;list of known claims&lt;/a&gt;, but RFC7519 states: "&lt;em&gt;None of the claims&lt;br&gt;
   defined below are intended to be mandatory to use or implement in all&lt;br&gt;
   cases, but rather they provide a starting point for a set of useful,&lt;br&gt;
   interoperable claims.&lt;/em&gt;"&lt;/p&gt;
&lt;p&gt;To ease validation of signatures, one can use an URL &lt;code&gt;.../.well-known/openid-configuration&lt;/code&gt; which provides a number of needed properties:&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;various endpoint URLs for authentication and token exchange&lt;/li&gt;
 &lt;li&gt;&lt;code&gt;issuer&lt;/code&gt;: The value corresponding to the &lt;code&gt;iss&lt;/code&gt; property in a JWT&lt;/li&gt;
 &lt;li&gt;&lt;code&gt;jwks_uri&lt;/code&gt;: URL to read the public key to validate signatures&lt;/li&gt;
 &lt;li&gt;&lt;code&gt;scopes_supported&lt;/code&gt;: what scopes does the API support&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Azure - same but different&lt;/h3&gt;
&lt;p&gt;When you setup &lt;a href="https://help.hcltechsw.com/domino/12.0.2/admin/secu_config_http_bearer_auth_using_oidc_c.html"&gt;Domino for JWT&lt;/a&gt; you need a series of specific conditions. The interesting parts from the documentation:&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;&lt;em&gt;One of the JWT's "aud" (audience) claims must match the Domino Internet Site's host name&lt;/em&gt;&lt;/li&gt;
 &lt;li&gt;&lt;em&gt;JWTs must contain a "iss" (issuer) claim matching the "issuer" returned from the OIDC provider's .well-known/openid-configuration endpoint&lt;/em&gt;&lt;/li&gt;
 &lt;li&gt;&lt;em&gt;JWTs must contain a "scope" claim that includes "Domino.user.all"&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When you follow &lt;a href="https://opensource.hcltechsw.com/Domino-rest-api/howto/IdP/configuringAD.html"&gt;KEEP's how to configure Azure AD&lt;/a&gt; you will find a set of pain points, in no specific order:&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;You can't remove claims you don't need&lt;/li&gt;
 &lt;li&gt;Azure AD will not issue a &lt;code&gt;scope&lt;/code&gt; claim, but an &lt;code&gt;scp&lt;/code&gt; claim&lt;/li&gt;
 &lt;li&gt;The &lt;code&gt;aud&lt;/code&gt; claim is fixed to the "Application ID URI"&lt;/li&gt;
 &lt;li&gt;The &lt;code&gt;iss&lt;/code&gt; claim in a token does not match the &lt;code&gt;issuer&lt;/code&gt; property from &lt;code&gt;well-known/openid-configuration&lt;/code&gt;&lt;/li&gt;
 &lt;li&gt;The &lt;code&gt;jwks_uri&lt;/code&gt; URL does not return an &lt;code&gt;alg&lt;/code&gt; property for the algorythm (nor did I find any way to request an &lt;a href="https://en.wikipedia.org/wiki/Elliptic-curve_cryptography"&gt;Elliptic-curve&lt;/a&gt; signer)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So there's tons of fun to be had with Azure ~~Active Directory~~ Entra ID&lt;/p&gt;</description>
	<link>2023/08/fun-with-azure-active-directory-and-jwt.html</link>
	<author>Stephan H. Wissel</author>
	<guid>0fd1b040-465c-11ee-8527-1ded1f8f3d81</guid>
	<pubDate>29 August 2023</pubDate>

</item>
<item>
	<title>Primary Posture Applications</title>
	<description>&lt;p&gt;We use a multitude of applications per day. Each of them captures some level of attention and interaction. &lt;a href="https://en.wikipedia.org/wiki/Alan_Cooper"&gt;Alan Cooper&lt;/a&gt; coined the term &lt;a href="https://en.wikipedia.org/wiki/Application_posture"&gt;Application posture&lt;/a&gt;, with the mainly used application being the &lt;a href="https://uxplanet.org/application-posture-d896bceda537"&gt;&lt;strong&gt;sovereign application&lt;/strong&gt;&lt;/a&gt;. I personally like the term &lt;strong&gt;primary posture application&lt;/strong&gt; better and will use it in this post&lt;/p&gt;
&lt;h3&gt;Being primany&lt;/h3&gt;
&lt;p&gt;Since users spend most of their time in it, there's a willingness to become "senior intermediate experts". Shortcuts are learned, workflows get shared and a deeper understanding is desired. Depending on the nature of your work, very different application are your primary&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;for a graphic desiger it might be &lt;a href="https://www.gimp.org/"&gt;GIMP&lt;/a&gt; or &lt;a href="https://inkscape.org/"&gt;Inkscape&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;a vlogger spends lot of time in &lt;a href="https://obsproject.com/"&gt;OBS&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;The controllers spend their days in spreadsheets&lt;/li&gt;
 &lt;li&gt;The sales manager in &lt;a href="https://salesforce.com/"&gt;CRM&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;Operations is fond of &lt;a href="https://sap.com/"&gt;ERP&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;eMail and chat are strong contenders too&lt;/li&gt;
 &lt;li&gt;the Scrum master lives in Jira, while developers on the command-line and IDE&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Primary posture by association&lt;/h3&gt;
&lt;p&gt;To cover anything else, aggregators were used. Trailblazer here was the &lt;a href="https://en.wikipedia.org/w/index.php?title=Lotus_Notes"&gt;Lotus Notes Client&lt;/a&gt;: One did everything in Notes, the main job and all the auxiliary and transient would be there. This consistency was attempted to recreate using portals and intranets (for inspiration what intranets can achieve, head over to &lt;a href="https://www.nngroup.com/reports/topic/intranets/"&gt;The Nielsen Norman Group&lt;/a&gt;).&lt;/p&gt;
&lt;h3&gt;Auxiliary applications&lt;/h3&gt;
&lt;p&gt;You need to complete a task fast and want effortless results. An auxiliary posture helps with that. Adding an appointment in a calendar, booking a ride share, filing tax returns.&lt;/p&gt;
&lt;h3&gt;Auxiliary applications with a primary posture&lt;/h3&gt;
&lt;p&gt;One's primary application is another's auxiliary. This is a huge problem especially for bespoke applications. Typically they are comissioned by departments who will use them in "primary posture" (e.g. the leave management system gets commissioned by HR). The leave administrator will happily learn all bells and whistles, while mortal users are irritated by the complexity. I recall working on a leave management system where the initial application form had over 30 fields to cover all eventualities. We were able to convince the application owner to take a 2 form approach: the initial form had: coming, going, type of leave and optional "on behalf". 2 buttons were offered: "more" and "submit". "More" would lead to the 30+ fields form. We monitored usage for 6 month. Not a single time the larger form was submitted.&lt;/p&gt;
&lt;h3&gt;Multiple front-ends&lt;/h3&gt;
&lt;p&gt;To avoid the primary auxiliary trap, a clear API that separates UI from business logic helps. It allows to build smaller front-ends that are auxiliary in nature but don't compromize integrity. &lt;a href="https://www.openapis.org/"&gt;OpenAPI&lt;/a&gt; is your friend&lt;/p&gt;</description>
	<link>2023/08/primary-posture-applications.html</link>
	<author>Stephan H. Wissel</author>
	<guid>77462770-40a2-11ee-9a9a-81b1521576ba</guid>
	<pubDate>21 August 2023</pubDate>

</item>
<item>
	<title>Passphrase Generator</title>
	<description>&lt;p&gt;Passphrases are considered easier to remember for humans and harder to crack for machines, famously explained in &lt;a href="https://xkcd.com/936/"&gt;this comic&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://xkcd.com/936/"&gt;&lt;img src="https://imgs.xkcd.com/comics/password_strength.png" alt="Pasword strength"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The challenge then is to have a good word list to pick from. There are &lt;a href="https://wordcounter.io//blog/how-many-words-does-the-average-person-know"&gt;various measurements&lt;/a&gt; on how many words one person would &lt;strong&gt;use&lt;/strong&gt; which could be as low as a thousand. Note there is a huge difference between &lt;em&gt;recognize&lt;/em&gt; and &lt;em&gt;use&lt;/em&gt;.&lt;/p&gt;
&lt;h3&gt;Passphrases and dices&lt;/h3&gt;
&lt;p&gt;In a recent &lt;a href="https://chaos.social/@stw/110756503711275152"&gt;Toot exchange&lt;/a&gt; &lt;a href="https://chaos.social/@ospalh"&gt;ospalh&lt;/a&gt; pointed me to &lt;a href="https://en.wikipedia.org/wiki/Diceware"&gt;Diceware&lt;/a&gt;, a method to use &lt;a href="https://diceware.dmuth.org"&gt;dice rolls&lt;/a&gt; and a word list to determine a passphrase. Usually one uses the regular 6 sides dices and 5 dices, which lets you pick from a 7776 member word list. The &lt;a href="https://www.eff.org"&gt;EFF&lt;/a&gt; published &lt;a href="https://www.eff.org/deeplinks/2018/08/dragon-con-diceware"&gt;a version using the 20-sided dice&lt;/a&gt; from &lt;a href="https://en.wikipedia.org/wiki/Dungeons_%26_Dragons"&gt;Dungeon and Dragons&lt;/a&gt; as well as various word lists.&lt;/p&gt;
&lt;h3&gt;Wordlists&lt;/h3&gt;
&lt;p&gt;An attacker who doesn't know that they are dealing with a passphrase, using conventional cracking methods stands little chance to decipher the phrase. However as the defender you must assume, they know your word list, so it is imperative to keep it long, while maintaining the odds to remember (in any case you can use some &lt;a href="https://bitwarden.com"&gt;extra brain&lt;/a&gt;). SOme of the word lists you can find online:&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;&lt;a href="https://theworld.com/%7Ereinhold/diceware.wordlist.asc"&gt;Arnold Reinhold's Diceware list&lt;/a&gt;, 1995, 7776 entries&lt;/li&gt;
 &lt;li&gt;&lt;a href="https://www.eff.org/files/2016/07/18/eff_large_wordlist.txt"&gt;EFF list from 2016&lt;/a&gt;, 2016, 7776 entries (introduced &lt;a href="https://www.eff.org/deeplinks/2016/07/new-wordlists-random-passphrases"&gt;here&lt;/a&gt;)&lt;/li&gt;
 &lt;li&gt;&lt;a href="https://www.eff.org/deeplinks/2018/08/dragon-con-diceware"&gt;Fandom generated word lists&lt;/a&gt; by EFF for the 20 side dice&lt;/li&gt;
 &lt;li&gt;&lt;a href="https://www.eff.org/files/2018/08/29/gameofthrones_8k-2018.txt"&gt;Game of Thrones&lt;/a&gt;, 2018, 4000 entries&lt;/li&gt;
 &lt;li&gt;&lt;a href="https://www.eff.org/files/2018/08/29/harrypotter_8k_3column-txt.txt"&gt;Harry Potter&lt;/a&gt;, 2018, 4000 entries&lt;/li&gt;
 &lt;li&gt;&lt;a href="https://www.eff.org/files/2018/08/29/memory-alpha_8k_2018.txt"&gt;Star Track&lt;/a&gt;, 2018, 4000 entries&lt;/li&gt;
 &lt;li&gt;&lt;a href="https://www.eff.org/files/2018/08/29/starwars_8k_2018.txt"&gt;Star Wars&lt;/a&gt;, 2018, 4000 entries&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Math.random() to replace dices&lt;/h3&gt;
&lt;p&gt;Let's roll (pun intended) our own passphrase generator. To make it a little more fun these are our constrains:&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;passphrase has 5 elements: 4 words and one 6 digit number&lt;/li&gt;
 &lt;li&gt;the number appears at a random position&lt;/li&gt;
 &lt;li&gt;elements are separated by a &lt;code&gt;-&lt;/code&gt; (for readability, in active use you might just filter them out)&lt;/li&gt;
&lt;/ul&gt;</description>
	<link>2023/07/passphrase-generator.html</link>
	<author>Stephan H. Wissel</author>
	<guid>20817830-29fb-11ee-8ef8-8bb241062b76</guid>
	<pubDate>24 July 2023</pubDate>

</item>
<item>
	<title>Keep your github container registry tidy</title>
	<description>&lt;p&gt;SO you drank the cool-aid, like me, and use &lt;a href="https://github.com/features/actions"&gt;GitHub Actions&lt;/a&gt; to build your projects and &lt;a href="https://github.com/features/packages"&gt;GitHub pacckages&lt;/a&gt; for your private containers, maven produced Jars, npm modules. Soon your honeymoon is over and you hit the storage limit of your account.&lt;/p&gt;
&lt;h3&gt;You need to clean up&lt;/h3&gt;
&lt;p&gt;Looking at the packages you will notice, that they are all there, all the version, in case of containers even the untagged ones. The root of the problem is equally the solution: a GitHub Action to &lt;a href="https://github.com/marketplace/actions/delete-package-versions"&gt;delete package versions&lt;/a&gt;. The package is very flexible and well documented, outlining &lt;a href="https://github.com/marketplace/actions/delete-package-versions#scenarios"&gt;several scenarios&lt;/a&gt; how to put it to use&lt;/p&gt;
&lt;h2&gt;Things to watch out for&lt;/h2&gt;
&lt;p&gt;You have to decide when you want to put it to use:&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;on schedule, like &lt;a href="https://www.youtube.com/watch?v=mthSq-u2i7A"&gt;every Friday&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;manual, pressing a button&lt;/li&gt;
 &lt;li&gt;on each build, when you add a new package&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I also experienced that &lt;code&gt;{{ secrets.GITHUB_TOKEN }}&lt;/code&gt; wouldn't work when the package you target is private, even when it is in the same repository. Once you know, it's not a big deal, just create a &lt;a href="https://github.com/settings/tokens"&gt;PAT&lt;/a&gt; and add it to the repository's secrets. You might want to add &lt;code&gt;workflow_dispatch&lt;/code&gt; to all triggers, so you can test run them anytime.&lt;/p&gt;</description>
	<link>2023/07/keep-your-github-container-registry-tidy.html</link>
	<author>Stephan H. Wissel</author>
	<guid>8d4324b0-253b-11ee-aa6d-b183cc9640ea</guid>
	<pubDate>18 July 2023</pubDate>

</item>
<item>
	<title>Deploy private npm packages into private containers using github actions</title>
	<description>&lt;p&gt;&lt;a href="https://github.com/features/actions"&gt;GitHub Actions&lt;/a&gt; are rapidly becoming my favorite CI environment. Their &lt;a href="https://github.com/marketplace?type=actions"&gt;marketplace&lt;/a&gt; has an action for everything. Sometimes it takes a little trial and error before things work smoothly. This is one of that stories.&lt;/p&gt;
&lt;h3&gt;Authentication is everything&lt;/h3&gt;
&lt;p&gt;Imagine the following scenario: you have developed a set of private TypeScript (or JavaScript) packages and have &lt;a href="https://docs.github.com/en/packages/quickstart"&gt;successfully deployed&lt;/a&gt; them to the &lt;strong&gt;private&lt;/strong&gt; GitHub npm registry under the name &lt;code&gt;@myfamousorg/coolpackage&lt;/code&gt; - where &lt;code&gt;myfamousorg&lt;/code&gt; must match the repository owner (org or individual).&lt;/p&gt;
&lt;p&gt;Now you want to use them in your application. That application shall be packed in a Container and made available in GitHub's private registry. All that automated using GitHub Actions.&lt;/p&gt;
&lt;h3&gt;You will need a PAT (or two)&lt;/h3&gt;
&lt;p&gt;In GitHub, head to the &lt;a href="https://github.com/settings/tokens"&gt;Personal access tokens / Tokens (classic)&lt;/a&gt; section of your developer settings in profile. You need to &lt;a href="https://github.com/settings/tokens/new"&gt;create tokens&lt;/a&gt; that allow you to handle packages.&lt;/p&gt;
&lt;p&gt;&lt;img src="/blog/images/2023/GitHubToken.png" alt="GitHub Tokens"&gt;&lt;/p&gt;
&lt;p&gt;There are two places where you want to enter that token:&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;In &lt;code&gt;https://github.com/[your-org]/[your-repo]/settings/secrets/actions&lt;/code&gt; create a key &lt;code&gt;GIT_NPM_PACKAGES&lt;/code&gt; and copy your PAT there. You can pick any name, you will need it in the GitHub action later&lt;/li&gt;
 &lt;li&gt;In &lt;code&gt;~/.npmrc&lt;/code&gt;, your global settings for npm in your home directory. Don't put the info in the &lt;code&gt;.npmrc&lt;/code&gt; in your git project.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class="language-properties"&gt;prefix=/home/[your username]/.npm-packages
@myfamousorg:registry=https://npm.pkg.github.com
//npm.pkg.github.com/:_authToken=[here goes the token]

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;prefix&lt;/code&gt; property allows you to run `npm install -g [package] without admin access.&lt;/p&gt;</description>
	<link>2023/07/deploy-nodejs-with-private-packages-in-docker.html</link>
	<author>Stephan H. Wissel</author>
	<guid>a81d27ba-4cf9-444d-99e6-c4813be2e9f4</guid>
	<pubDate>16 July 2023</pubDate>

</item>
<item>
	<title>Handle HTTP chunked responses</title>
	<description>&lt;p&gt;Objects &lt;a href="https://www.youtube.com/watch?v=nFDAK8NY4JY"&gt;I need a lot of objects&lt;/a&gt;. When dealing with APIs there is one fundamental question to answer: how much data do you want to retrieve?&lt;/p&gt;
&lt;p&gt;The old school answer: let's page results, &lt;a href="https://retrocomputing.stackexchange.com/questions/5629/why-did-80x25-become-the-text-monitor-standard"&gt;25 at a time&lt;/a&gt;. Then &lt;a href="https://www.nngroup.com/articles/infinite-scrolling-tips/"&gt;infinite scrolling came along&lt;/a&gt; and changed expectations.&lt;/p&gt;
&lt;h3&gt;I got some chunk for you&lt;/h3&gt;
&lt;p&gt;One way to operate is for the server to send all data, but using &lt;a href="https://en.wikipedia.org/wiki/Chunked_transfer_encoding"&gt;&lt;code&gt;Transfer-Encoding: chunked&lt;/code&gt;&lt;/a&gt; (&lt;a href="https://tools.ietf.org/html/rfc9112#section-7.1"&gt;RFC 9112&lt;/a&gt;) in the header and deliver data in several packages, aptly named chunks. A client can process each chunk on arrival to allow interactivity before data transmission concludes.&lt;/p&gt;
&lt;p&gt;However this requires adjustments on both sides. The server needs to send data with a clear delimiter, e.g. &lt;code&gt;\n&lt;/code&gt; (newline) and the client needs to process the data as a stream&lt;/p&gt;
&lt;h3&gt;The usual way won't work&lt;/h3&gt;
&lt;p&gt;We typically find code like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;fetch(url)
  .then((resp) =&amp;gt; resp.json())
  .then((json) =&amp;gt; {
    for (let row in json) {
      addRow(json[row], parentElement);
    }
  });
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API"&gt;&lt;code&gt;fetch&lt;/code&gt;&lt;/a&gt; hides a lot of complexity, we need to handle when we process a chunked result as it arrives.&lt;/p&gt;</description>
	<link>2023/07/handle-http-chunked-responses.html</link>
	<author>Stephan H. Wissel</author>
	<guid>a73f182a6-e51d-4c0f-9b95-10c640d637dd</guid>
	<pubDate>04 July 2023</pubDate>

</item>
<item>
	<title>Docker, nginx, SPA and brotli compression</title>
	<description>&lt;p&gt;Contemporary web development separates front-end and back-end, resulting in the front-end being a few static files. Besides setting long cache headers, pre-compression is one way to speed up delivery&lt;/p&gt;
&lt;h3&gt;Setting the stage&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;we have a NodeJS project that outputs our &lt;a href="https://en.wikipedia.org/wiki/Single-page_application"&gt;SPA&lt;/a&gt; in &lt;code&gt;/usr/dist&lt;/code&gt; directory. Highly recommended here: &lt;a href="https://vitejs.dev/"&gt;VITE&lt;/a&gt;. Works for multi-page applications too.&lt;/li&gt;
 &lt;li&gt;We target only &lt;a href="https://caniuse.com/?search=brotli"&gt;modern browsers&lt;/a&gt; that understand &lt;a href="https://github.com/google/brotli"&gt;brotli&lt;/a&gt; (Sorry not IE). Legacy will have to deal with uncompressed files&lt;/li&gt;
 &lt;li&gt;We want to go light on CPU, so we compress at build time, not runtime&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Things to know&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;When &lt;a href="https://www.nginx.com/"&gt;nginx&lt;/a&gt; is configured for brotli and the file &lt;code&gt;index.html&lt;/code&gt; gets requested, the file &lt;code&gt;index.html.br&lt;/code&gt; gets served if present and the browser indicated (what it does by default) that it can accept br&lt;/li&gt;
 &lt;li&gt;There are tons of information about the &lt;a href="https://www.sobyte.net/post/2022-04/docker-nginx-brotli/"&gt;need to compile nginx&lt;/a&gt; due to the lack of brotli support out of the box. That's not necessary (see below)&lt;/li&gt;
 &lt;li&gt;brotli is both OpenSource and the open standard &lt;a href="https://www.ietf.org/rfc/rfc7932.txt"&gt;RFC 7932&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;brotli currently &lt;a href="https://github.com/google/brotli/issues/970"&gt;lacks&lt;/a&gt; gzip's &lt;code&gt;-r&lt;/code&gt; flag, so some bash magic is needed&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Moving parts&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;DockerFile&lt;/li&gt;
 &lt;li&gt;nginx configuration&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The Dockerfile will handle the brotli generation&lt;/p&gt;</description>
	<link>2023/06/docker-nginx-spa-and-brotli-compression.html</link>
	<author>Stephan H. Wissel</author>
	<guid>61bc1e40-1231-11ee-a61a-ef046a8827ca</guid>
	<pubDate>24 June 2023</pubDate>

</item>
<item>
	<title>Deploy a TypeScript app using Docker</title>
	<description>&lt;p&gt;An application developed in TypeScript actually runs as JavaScript application. When deploying into a Docker image, wwe want to keep it small, here's how.&lt;/p&gt;
&lt;h3&gt;Docker with a side of Docker&lt;/h3&gt;
&lt;p&gt;Deployment has a few steps:&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Compile to JavaScript&lt;/li&gt;
 &lt;li&gt;Successfully run all test&lt;/li&gt;
 &lt;li&gt;Run code quality (e.g. &lt;a href="https://www.sonarsource.com/"&gt;Sonar&lt;/a&gt;)&lt;/li&gt;
 &lt;li&gt;Finally package all up into the smallest of containers&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Using &lt;a href="/blog/2023/05/tiptoe-in-typescript.html"&gt;last weeks example&lt;/a&gt; these are the moving parts.&lt;/p&gt;</description>
	<link>2023/06/deploy-a-typescript-app-using-docker.html</link>
	<author>Stephan H. Wissel</author>
	<guid>867f9fd0-02d3-11ee-b016-fb241bb51570</guid>
	<pubDate>04 June 2023</pubDate>

</item>
<item>
	<title>TipToe in TypeScript</title>
	<description>&lt;p&gt;&lt;a href="https://www.typescriptlang.org/"&gt;TypeScript&lt;/a&gt; is all the rage in JavaScript land and I'm enjoying the ride so far. I shall refrain from debating &lt;a href="https://www.google.com/search?q=typescript+vs.+javascript"&gt;TypeScript vs. JavaScript&lt;/a&gt; or &lt;a href="https://www.typescriptlang.org/play"&gt;geeting started&lt;/a&gt; activities. This article's focus getting a TypeScript (server side) project going in &lt;a href="https://code.visualstudio.com/"&gt;VSCode&lt;/a&gt;. It reflects what worked for me with my limited knowledge.&lt;/p&gt;
&lt;h3&gt;Who's at the party?&lt;/h3&gt;
&lt;p&gt;On a first look it seems, one just needs &lt;code&gt;tsc&lt;/code&gt; and all is good. However there are more &lt;a href="https://gist.github.com/Stwissel/889f1ee888d0d7dbe2c8933b3395ff81"&gt;moving parts involved&lt;/a&gt;, lets have a look:&lt;/p&gt;
&lt;p&gt;&lt;a href="/blog/images/2023/TypeScriptProjectLarge.png"&gt;&lt;img src="/blog/images/2023/TypeScriptProject.png" alt="TypeScript project"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;VSCode plugins, style and build automation shall be subject to a future post, lets focus on the TypeScript parts here. Let's get started with sample &lt;a href="https://expressjs.com/"&gt;ExpressJS&lt;/a&gt; project. My test framework of choice shall be &lt;a href="https://mochajs.org/"&gt;MochaJS&lt;/a&gt; with the &lt;a href="https://www.chaijs.com/"&gt;Chai assertion library&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;#!/bin/bash
# Setting up an Express TypeScript project
mkdir ts-demo
cd ts-demo
curl https://raw.githubusercontent.com/github/gitignore/main/Node.gitignore -o .gitignore
git init -q
npm init -y
npm install --save express
npm install --save-dev @types/express @types/node
npm install --save-dev chai chai-as-promised mocha ts-node ts-node-dev typescript
npm install --save-dev @types/chai @types/chai-as-promised @types/mocha
mkdir src
mkdir test
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We see, development has more dependencies than runtime. Note all the &lt;code&gt;@types&lt;/code&gt; packages are only needed in development, so the are added to the &lt;code&gt;devDependencies&lt;/code&gt; only.&lt;/p&gt;</description>
	<link>2023/05/tiptoe-in-typescript.html</link>
	<author>Stephan H. Wissel</author>
	<guid>074ae390-02a2-11ee-b513-f3e10907e2b5</guid>
	<pubDate>31 May 2023</pubDate>

</item>
<item>
	<title>Develop your SPA with vite</title>
	<description>&lt;p&gt;You drank the &lt;a href="https://en.wikipedia.org/wiki/Single-page_application"&gt;SPA&lt;/a&gt; coolaid to develop with &lt;a href="https://opensource.hcltechsw.com/Domino-rest-api/index.html"&gt;KEEP&lt;/a&gt;. While you can use &lt;a href="https://angular.io"&gt;the&lt;/a&gt; &lt;a href="https://react.dev"&gt;usual&lt;/a&gt; &lt;a href="https://svelte.dev"&gt;suspects&lt;/a&gt;, most cases &lt;a href="https://www.javatpoint.com/what-is-vanilla-javascript"&gt;Vanilla JS&lt;/a&gt; will do fine: one each of &lt;code&gt;index.html&lt;/code&gt;, &lt;code&gt;index.css&lt;/code&gt; and &lt;code&gt;index.js&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;The preview problem&lt;/h3&gt;
&lt;p&gt;Since the files are static, throw them on the server a you are good - of course your regular operation gets disrupted. Throw them on a preview server and your calls to &lt;code&gt;/api/...&lt;/code&gt; will fail. You could hack around by providing full URLs, you just enter &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS"&gt;CORS hell&lt;/a&gt; then.&lt;/p&gt;
&lt;h3&gt;viteJS to the rescue&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://vitejs.dev"&gt;viteJS&lt;/a&gt; brands itself as "&lt;em&gt;Next Generation Frontend Tooling&lt;/em&gt;" with the catchy tagline "&lt;em&gt;Get ready for a development environment that can finally catch up with you&lt;/em&gt;". Let's give it a spin:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;npm create vite@latest
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The result is simple&lt;/p&gt;
&lt;p&gt;&lt;img src="/blog/images/2023/viteStart.png" alt="Vite start"&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;package.json&lt;/code&gt; lists &lt;strong&gt;no&lt;/strong&gt; runtime dependencies and you can run &lt;code&gt;npm run dev&lt;/code&gt; to preview the sample page.&lt;/p&gt;
&lt;h3&gt;Adding the proxy&lt;/h3&gt;
&lt;p&gt;When starting vite, it looks for &lt;a href="https://vitejs.dev/config/"&gt;&lt;code&gt;vite.config.js&lt;/code&gt;&lt;/a&gt; for settings. There you can specify all needed proxy settings.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;import { defineConfig } from 'vite';

// https://vitejs.dev/config/
export default defineConfig({
  server: {
    proxy: {
      '/api': 'http://localhost:8880',
      '/.well-known': 'http://localhost:8880'
    }
  }
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;vite.config.js&lt;/code&gt; allows for sophisticated configuration like conditional settings (think testing against dev, staging, production), which is up to you to evaluate.&lt;/p&gt;
&lt;p&gt;Using &lt;code&gt;npm run build&lt;/code&gt; vite works its magic to build a combined distributable app, SPA or otherwise.&lt;/p&gt;
&lt;p&gt;As ususal YMMV&lt;/p&gt;</description>
	<link>2023/04/develop-your-spa-with-vite.html</link>
	<author>Stephan H. Wissel</author>
	<guid>303976e0-e34e-11ed-9d33-933d38277195</guid>
	<pubDate>25 April 2023</pubDate>

</item>

</channel>
</rss>
