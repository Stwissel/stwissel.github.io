<?xml version="1.0"?>
<rss version="2.0">
<channel>
	<title>wissel.net Usability - Productivity - Business - The web - Singapore and Twins</title>
	<link>https://wissel.net/blog/stories.rss</link>
	<description>Thoughts, Insights and Opinions of Stephan H. Wissel. Topics included: Salesforce, Lotus Notes and Domino, IBM Websphere, NodeJS, JavaScript,  J2EE, .Net, Software Archtecture, Personcentric Development, Agile Software, SDLC, Singapore and my Twins</description>
	<language>en,de</language>
	<copyright>(C) 2003 - 2021 Stephan H. Wissel, All rights reserved</copyright>
	<pubdate>Wed, 09 Oct 2024 12:57:44 +0000</pubdate>
<item>
	<title>Handle HTTP chunked responses - Java edition</title>
	<description>&lt;p&gt;The &lt;a href="https://opensource.hcltechsw.com/Domino-rest-api/"&gt;Domino REST API&lt;/a&gt; delivers collections using &lt;a href="https://en.wikipedia.org/wiki/Chunked_transfer_encoding"&gt;chunked transfer encoding&lt;/a&gt;. This has the advantage, that you can process results as they arrive. It produces the challenge that the usual client side code is designed to first wait for completion of the request. I wrote about the JavaScript solution &lt;a href="/blog/2023/07/handle-http-chunked-responses.html"&gt;a while ago&lt;/a&gt;, this is the Java edition.&lt;/p&gt;
&lt;h3&gt;Client choices&lt;/h3&gt;
&lt;p&gt;In JavaScript land the choice of client is simple: &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API"&gt;the Fetch API&lt;/a&gt;. In Java we have some choices:&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Since Java 11 there's a &lt;a href="https://openjdk.org/groups/net/httpclient/intro.html"&gt;HttpClient&lt;/a&gt; in the JDK&lt;/li&gt;
 &lt;li&gt;A very popular library is provided by the &lt;a href="https://hc.apache.org/httpcomponents-client-5.4.x/index.html"&gt;Apache HTTP components&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;The SPRING framework, undisputed king of Java web frameworks, offers its &lt;a href="https://docs.spring.io/spring-framework/reference/integration/rest-clients.html"&gt;own sset of clients&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;The vert.x framework, which we used to build &lt;a href="https://opensource.hcltechsw.com/Domino-rest-api/references/security/index.html?h=vert.x"&gt;DRAPI&lt;/a&gt;, features its &lt;a href="https://vertx.io/docs/vertx-web-client/java/"&gt;own client&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are probably more around. This article uses the JDK &lt;a href="https://openjdk.org/groups/net/httpclient/intro.html"&gt;HttpClient&lt;/a&gt;. I'll skip the parts with Authentication and TLS handling, check the &lt;a href="https://github.com/Stwissel/java11-httpclient-chunked"&gt;full example&lt;/a&gt; for details.&lt;/p&gt;
&lt;h3&gt;How it works&lt;/h3&gt;
&lt;p&gt;First we create an &lt;a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpClient.html"&gt;java.net.http.HttpClient&lt;/a&gt;. It takes care of the http version and the TLS context.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-java"&gt;HttpClient getClient(SSLContext sslContext) {
  return HttpClient.newBuilder()
           .sslContext(sslContext)
           .build();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then we build and execute the request. The &lt;em&gt;magic&lt;/em&gt; is the &lt;a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpResponse.BodySubscriber.html"&gt;BodySubscriber&lt;/a&gt; (more on that below).&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-java"&gt;Integer runGetRequest(HttpClient client, String url, String authHeader, BodySubscriber subscriber) throws Exception {
  HttpRequest request = HttpRequest.newBuilder()
            .uri(URI.create(url))
            .header("Authorization", authHeader)
            .GET()
            .build();

  CompletableFuture&amp;lt;Integer&amp;gt; response =
          client.sendAsync(request, responseInfo -&amp;gt; subscriber)
          .whenComplete((r, t) -&amp;gt; System.out.println("Response: " + r.statusCode()))
          .thenApply(HttpResponse::body);

  return response.get();
}
&lt;/code&gt;&lt;/pre&gt;</description>
	<link>2024/10/handle-http-chunked-responses-java-edition.html</link>
	<author>Stephan H. Wissel</author>
	<guid>49d83e50-8632-11ef-acaa-2d2a7a285b28</guid>
	<pubDate>09 October 2024</pubDate>

</item>
<item>
	<title>Quarkus in Multi-Module projects</title>
	<description>&lt;p&gt;You are developing a web application using &lt;a href="https://quarkus.io/"&gt;Quarkus&lt;/a&gt; that consists of multiple (micro)services and a bunch of supporting libraries. Since maven modules provide sufficient isolation, you decide to use a parent project to keep dependency versions and parameters in sync and a &lt;a href="https://www.baeldung.com/java-maven-reactor"&gt;Maven Reactor&lt;/a&gt; to build them together.&lt;/p&gt;
&lt;p&gt;This blog post is for you. A special thanks to &lt;a href="https://github.com/aloubyansky"&gt;Alexey&lt;/a&gt; for helping out.&lt;/p&gt;
&lt;h2&gt;Moving parts&lt;/h2&gt;
&lt;p&gt;Our objective is to have a development setup where we can edit any of the services or libraries and then run them individually or all together. Ideally without the need to alter configurations between runs and the ability to deploy the setup using devcontainers (note: that's about the development setup, not about deploying the finished application). There are some moving parts:&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;&lt;a href="https://quarkus.io/"&gt;Quarkus&lt;/a&gt; CLI or Maven plugin&lt;/li&gt;
 &lt;li&gt;&lt;a href="https://maven.apache.org/guides/mini/guide-multiple-modules.html"&gt;Multi-Module Maven&lt;/a&gt; to keep libraries and services together and apart&lt;/li&gt;
 &lt;li&gt;&lt;a href="https://maven.apache.org/guides/introduction/introduction-to-profiles.html"&gt;Maven profiles&lt;/a&gt; to conditionally modify maven runs&lt;/li&gt;
 &lt;li&gt;Maven's &lt;a href="https://www.baeldung.com/maven-plugin-management"&gt;&lt;code&gt;&amp;lt;pluginManagement&amp;gt;&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://www.baeldung.com/maven-dependencymanagement-vs-dependencies-tags"&gt;&lt;code&gt;&amp;lt;dependencyManagement&amp;gt;&lt;/code&gt;&lt;/a&gt; to define configurations without activating them&lt;/li&gt;
 &lt;li&gt;Your &lt;a href="https://news.ycombinator.com/item?id=26367535"&gt;favourite Ide&lt;/a&gt; configured for &lt;a href="https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-pack"&gt;Java&lt;/a&gt; and &lt;a href="https://marketplace.visualstudio.com/items?itemName=redhat.vscode-quarkus"&gt;Quarkus&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;Understand how VSCode's &lt;a href="https://code.visualstudio.com/docs/editor/tasks"&gt;Tasks&lt;/a&gt; work&lt;/li&gt;
 &lt;li&gt;Know how to setup &lt;a href="https://containers.dev/"&gt;DevContainers&lt;/a&gt;, especially when you need &lt;a href="https://stackoverflow.com/questions/59231953/what-makes-an-application-a-sidecar"&gt;sidecars&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That's a lot, let's dig in.&lt;/p&gt;</description>
	<link>2024/08/quarkus-in-multimodule-projects.html</link>
	<author>Stephan H. Wissel</author>
	<guid>1b7989c0-6525-11ef-a221-1bdb47be5f49</guid>
	<pubDate>28 August 2024</pubDate>

</item>
<item>
	<title>Simplify JUnit tests with custom annotations</title>
	<description>&lt;p&gt;In the beginning &lt;a href="https://en.wikipedia.org/wiki/Test-driven_development"&gt;was a test&lt;/a&gt;, that provided to be vital, but not sufficient. In modern application development we encounter:&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Unit Tests: testing a single function or a tuple of related functions&lt;/li&gt;
 &lt;li&gt;Module Tests: testing bigger parts of your application, without actual external dependencies&lt;/li&gt;
 &lt;li&gt;Integration or End-to-End tests: a.k.a life firing exercise&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This entry isn't a discussion about the merits of &lt;a href="https://en.wikipedia.org/wiki/Software_development_process"&gt;how much and when&lt;/a&gt; test, but making tests easy to setup and distinguish&lt;/p&gt;
&lt;h3&gt;The manual way&lt;/h3&gt;
&lt;p&gt;We typically use &lt;a href="https://site.mockito.org/"&gt;Mockito&lt;/a&gt;, &lt;a href="https://vertx.io/"&gt;vert.x&lt;/a&gt; and &lt;a href="https://rest-assured.io/"&gt;REST-assured&lt;/a&gt; in our tests, so a typical test class would look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-java"&gt;@ExtendWith(VertxExtension.class, MockitoExtension.class, MyCustomExtension.class})
@Tag("UnitTest")
class SomethingTest {

  @Test
  does_it_blend() {
    // Test goes here
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It is just two lines, but everywhere. You can simplify it by creating your own annotation.&lt;/p&gt;
&lt;h3&gt;The custom annotation&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-java"&gt;@Target({TYPE, METHOD, ANNOTATION_TYPE})
@Retention(RUNTIME)
@ExtendWith({VertxExtension.class, MockitoExtension.class, MyCustomExtension.class})
@Tag("UnitTest")
public @interface UnitTest {
  // no action needed here, JUnit use only!
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you simply use:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-java"&gt;@UnitTest
class SomethingTest {

  @Test
  does_it_blend() {
    // Test goes here
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;While this looks like minor cosmetic, it allows to control test extensions from a single place, your annotation source. Repeat that process for the other test types (ModuleTests, IntegrationTests, PerformanceTests etc.) you want to use.&lt;/p&gt;
&lt;p&gt;In your &lt;a href="https://maven.apache.org/guides/introduction/introduction-to-the-pom.html"&gt;pom.xml&lt;/a&gt;, in the build-plugins section you can use the tag to ensure all your unit test, but only them execute on &lt;code&gt;mvn test&lt;/code&gt; and the others on &lt;code&gt;mvn verify&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;plugin&amp;gt;
  &amp;lt;!-- Run UNIT and MODULE tests, no backend calls --&amp;gt;
  &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;maven-surefire-plugin&amp;lt;/artifactId&amp;gt;
  &amp;lt;configuration&amp;gt;
    &amp;lt;groups&amp;gt;UnitTest,ModuleTest&amp;lt;/groups&amp;gt;
  &amp;lt;/configuration&amp;gt;
&amp;lt;/plugin&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As usual YMMV&lt;/p&gt;</description>
	<link>2024/08/simplify-junit-tests-with-custom-annotations.html</link>
	<author>Stephan H. Wissel</author>
	<guid>7dcc0100-5352-11ef-986c-b512cf968114</guid>
	<pubDate>05 August 2024</pubDate>

</item>
<item>
	<title>Hexagonal Architecture meets Maven</title>
	<description>&lt;p&gt;Know your &lt;a href="https://www.geeksforgeeks.org/java-design-patterns/"&gt;patterns&lt;/a&gt;, so you don't re-invent the wheel. Patterns are like &lt;a href="https://www.lego.com/en-us/categories/adults-welcome"&gt;LEGO&lt;/a&gt;: You can combine them to larger patterns. One of those is the &lt;a href="https://en.wikipedia.org/wiki/Hexagonal_architecture_(software)"&gt;Hexagonal Achitecture&lt;/a&gt; officially called:&lt;/p&gt;
&lt;h3&gt;Ports and Adapters&lt;/h3&gt;
&lt;p&gt;proposed by &lt;a href="https://alistaircockburn.com/"&gt;Alistair Cockburn&lt;/a&gt;, one of the co-signers of the &lt;a href="https://agilemanifesto.org/"&gt;Agile Manifesto&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I've written about &lt;a href="/blog/2005/07/crystal-clear.html"&gt;his work before&lt;/a&gt; and can highly recommend his latest book "&lt;a href="https://amzn.to/4bU6Bnz"&gt;Hexagonal Architecture Explained&lt;/a&gt;" (or for that matter &lt;a href="https://amzn.to/3LC5yhy"&gt;any of his writings&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;In a nushell, &lt;em&gt;Ports and Adapters&lt;/em&gt; proposes an approach that leads to loosely coupled systems, that separates business logic from the software environment (think I/O, databses, API and UI) to facilitate clarity and ease of testing.&lt;/p&gt;
&lt;p&gt;This post doesn't aim to explain it, for that you can refer to the &lt;a href="https://en.wikipedia.org/wiki/Hexagonal_architecture_(software)"&gt;Wikipedia article&lt;/a&gt; or, better, &lt;a href="https://amzn.to/4bU6Bnz"&gt;read the book&lt;/a&gt; but trying to describe how to apply it to Java in a &lt;a href="https://maven.apache.org/"&gt;Maven&lt;/a&gt; project.&lt;/p&gt;</description>
	<link>2024/07/hexagonal-architecture-meets-maven.html</link>
	<author>Stephan H. Wissel</author>
	<guid>5fd95100-499f-11ef-a97e-ad07a9c29136</guid>
	<pubDate>24 July 2024</pubDate>

</item>
<item>
	<title>How deep do you authenticate?</title>
	<description>&lt;p&gt;Accessing applications usually entails some kind of identity. Some part(s) of your application provide identity (called &lt;a href="https://www.cloudflare.com/learning/access-management/what-is-an-identity-provider/"&gt;IdP&lt;/a&gt;), while other's consume it (paraphrased from &lt;a href="https://en.wikipedia.org/wiki/Captain_Obvious"&gt;Captain Obvious&lt;/a&gt;). Identity could be provided from a record or document in your or another database, an LDAP directory, an &lt;a href="https://auth0.com/docs/authenticate/protocols/openid-connect-protocol"&gt;OICD&lt;/a&gt; or a 3d party like your eMail provider or social account, or with some hoops and loops &lt;a href="https://webauthn.io/"&gt;Webauthn&lt;/a&gt; (a.k.a &lt;a href="https://fidoalliance.org/passkeys/"&gt;passkey&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;The question is: how deep does it go?&lt;/p&gt;
&lt;h3&gt;A typical archtecture&lt;/h3&gt;
&lt;p&gt;For simplicity I'm skipping load balancers and cache facilities&lt;/p&gt;
&lt;p&gt;&lt;a href="/blog/images/2024/ApplicationTiers.png"&gt;&lt;img src="/blog/images/2024/ApplicationTiers640.png" alt="ApplicationTiers 0-4"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Each tier might or might not have its own identity, lets have a closer look&lt;/p&gt;
&lt;h3&gt;(0) User tier&lt;/h3&gt;
&lt;p&gt;When is authentication information stored at the user tier (think Browser, app or OS) and how immediate is it? Like a username/password or a passkey private key. Those can be exchanged for a token. Or is it a session cookie or an access_token allowing immediate access? How are those credentials protected and/or synced? How vulnerable are they on physical access?&lt;/p&gt;
&lt;h3&gt;(1) Access tier&lt;/h3&gt;
&lt;p&gt;A.k.a the firewall or VPN Does it assert a valid user? Are the credentials the same or different from your application. Does your access tier include IP ranges or geo location as part of identity? I've seen identity requirements 100% on VPN, but rarely on firewalls&lt;/p&gt;
&lt;h3&gt;(2) Web tier&lt;/h3&gt;
&lt;p&gt;TYpically you find a static web server like &lt;a href="https://nginx.org/en/"&gt;nginx&lt;/a&gt;, &lt;a href="https://httpd.apache.org/"&gt;Apache http&lt;/a&gt;, the &lt;a href="https://kubernetes.io/docs/concepts/services-networking/ingress/"&gt;Kubernetes Ingress&lt;/a&gt; or a service by &lt;a href="https://www.cloudflare.com/network-services/products/"&gt;a cloud provider&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Even when all your static resources are served by your application tier, you can identify your web tier where requests flow through. When you can establish identity there (and reject invalid ones), you have one more protective layer. nginx+ can do that &lt;a href="https://docs.nginx.com/nginx/admin-guide/security-controls/configuring-jwt-authentication/"&gt;with JWT&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;(3) Application tier&lt;/h3&gt;
&lt;p&gt;YOur application could be a &lt;a href="https://en.wikipedia.org/wiki/Monolithic_application"&gt;monolith&lt;/a&gt;, &lt;a href="https://www.ufried.com/blog/microservices_fallacy_10_microliths/"&gt;microlith&lt;/a&gt;, &lt;a href="https://microservices.io/"&gt;microservice&lt;/a&gt;, follow a &lt;a href="https://www.oreilly.com/library/view/software-architecture-patterns/9781491971437/ch01.html"&gt;layered architecture&lt;/a&gt;, be &lt;a href="https://blog.knoldus.com/message-driven-architecture/"&gt;message driven&lt;/a&gt;, &lt;a href="https://www.confluent.io/resources/ebook/designing-event-driven-systems/"&gt;event driven&lt;/a&gt; or be contemporary with the &lt;a href="https://amzn.to/4bx0qG5"&gt;hexagonal architecture&lt;/a&gt;. In any case your user facing access will require identity.&lt;/p&gt;
&lt;p&gt;It becomes blurry when your user facing services then call out to other services (via http or message/event), what identity are they using to communicate: user, service or both? You might start looking at &lt;a href="https://auth0.com/docs/manage-users/access-control/rbac"&gt;RBAC&lt;/a&gt;. In any case, this needs to be planned carefully&lt;/p&gt;
&lt;h3&gt;(4) Persistence / database tier&lt;/h3&gt;
&lt;p&gt;The prevalent examples you find online , especially in the realm of &lt;a href="https://www.google.com/search?q=dbaas"&gt;DBaaS&lt;/a&gt;, use just one service identity to access your persistence (file system, database , &lt;a href="https://wiki.lspace.org/Imps"&gt;imp&lt;/a&gt;, etc.). So database logs won't tell you who accessed data (RW/RO) and you won't have a chance to implement &lt;a href="https://www.immuta.com/guides/data-security-101/row-level-security/"&gt;row level security&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Interestingly this isn't a limitation of databases, they all come with user management, but rather the headache maintaining it or setup &lt;a href="https://www.postgresql.org/docs/9.4/auth-methods.html"&gt;another auth&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;When we designed the &lt;a href="https://opensource.hcltechsw.com/Domino-rest-api/"&gt;Domino REST API&lt;/a&gt;, we decided to stick to the &lt;a href="https://jwt.io"&gt;JWT&lt;/a&gt; based user identity all the way to the database. &lt;a href="https://couchdb.apache.org/"&gt;Apache CouchDB&lt;/a&gt; also allows for &lt;a href="https://docs.couchdb.org/en/stable/api/server/authn.html#jwt-authentication"&gt;JWT based authentication&lt;/a&gt;. It was lacking the ability to point to an IdP's jwks, so I contributed the &lt;a href="https://github.com/beyonddemise/couchdb-idp-updater"&gt;CouchDB IdP updater&lt;/a&gt;, go check it out.&lt;/p&gt;
&lt;p&gt;How do you use identity?&lt;/p&gt;</description>
	<link>2024/06/how-deep-do-you-authenticate.html</link>
	<author>Stephan H. Wissel</author>
	<guid>8ae12d70-2e27-11ef-b830-776c65d39a8f</guid>
	<pubDate>23 June 2024</pubDate>

</item>
<item>
	<title>NoSQL schema design</title>
	<description>&lt;p&gt;A question that pops up frequently in developer discussions is "how to structure your data in a NoSQL way?". To shed a light on this, we have a look at the approach invented &lt;a href="https://www.dataversity.net/sql-at-50-a-lesson-in-how-to-stay-relevant-around-data/"&gt;50 years ago&lt;/a&gt; and still an &lt;a href="https://www.geeksforgeeks.org/normal-forms-in-dbms/"&gt;all time favorite&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Normalization&lt;/h3&gt;
&lt;p&gt;In a simple order example, we are looking at four tables:&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Customer&lt;/li&gt;
 &lt;li&gt;Product&lt;/li&gt;
 &lt;li&gt;Order&lt;/li&gt;
 &lt;li&gt;OrderEntry&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="/blog/images/2024/nosqlschema.png" alt="CLassic SQL schema"&gt;&lt;/p&gt;
&lt;p&gt;In this design, there are no duplicates and some simple SQL can list out all I need, for example the order value for a given order:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;SELECT oi.order_id,
       SUM(oi.quantity * p.price) AS order_total
FROM OrderItem oi
JOIN Product p ON oi.product_id = p.id
GROUP BY oi.order_id
WHERE oi.order_id = 67111;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or the revenue per customer:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;SELECT c.id AS customer_id,
       c.name AS customer_name,
       SUM(oi.quantity * p.price) AS revenue
FROM Customer c
JOIN Order o ON c.id = o.customer_id
JOIN OrderItem oi ON o.id = oi.order_id
JOIN Product p ON oi.product_id = p.id
GROUP BY c.id, c.name;
&lt;/code&gt;&lt;/pre&gt;</description>
	<link>2024/06/nosql-schema-design.html</link>
	<author>Stephan H. Wissel</author>
	<guid>0d152760-23ce-11ef-ab74-87542543d935</guid>
	<pubDate>06 June 2024</pubDate>

</item>
<item>
	<title>Development Containers - the fine print</title>
	<description>&lt;p&gt;&lt;a href="https://containers.dev/"&gt;Development Containers&lt;/a&gt; are supposed to liberate your development environment from a specific local installation, like &lt;a href="https://opencontainers.org/"&gt;container technology&lt;/a&gt; liberated your runtimes (a.k.a &lt;a href="https://yaml.org/"&gt;YAML&lt;/a&gt;ed them into &lt;a href="https://www.docker.com/"&gt;Docker&lt;/a&gt; or &lt;a href="https://kubernetes.io/"&gt;Kubernetes&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;&lt;img src="/blog/images/2024/MustUseHelmchart.png" alt="Helmchart Pun"&gt;&lt;/p&gt;
&lt;h3&gt;Development != Runtime&lt;/h3&gt;
&lt;p&gt;Containerization for development has some overlap and quite some difference to containerization for production:&lt;/p&gt;
&lt;table&gt;
 &lt;thead&gt;
  &lt;tr&gt;
   &lt;th&gt;Topic&lt;/th&gt;
   &lt;th&gt;Development&lt;/th&gt;
   &lt;th&gt;Production&lt;/th&gt;
  &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
  &lt;tr&gt;
   &lt;td&gt;Mutability&lt;/td&gt;
   &lt;td&gt;You alter container content&lt;/td&gt;
   &lt;td&gt;Container is static&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;Network&lt;/td&gt;
   &lt;td&gt;Use internal network&lt;/td&gt;
   &lt;td&gt;Use internal network&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;Access&lt;/td&gt;
   &lt;td&gt;Developer tools++&lt;/td&gt;
   &lt;td&gt;Browser / App&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;Containers&lt;/td&gt;
   &lt;td&gt;multiple&lt;/td&gt;
   &lt;td&gt;multiple&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;Volumes&lt;/td&gt;
   &lt;td&gt;primary container binds projectdir&lt;br&gt;
    all others &lt;strong&gt;mount&lt;/strong&gt; only&lt;/td&gt;
   &lt;td&gt;all: bind or mount&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;Configuration&lt;/td&gt;
   &lt;td&gt;&lt;code&gt;devcontainer.json&lt;/code&gt;, &lt;code&gt;docker-compose.yml&lt;/code&gt;&lt;/td&gt;
   &lt;td&gt;&lt;code&gt;docker-compose.yml&lt;/code&gt;,&lt;code&gt;Helm Chart&lt;/code&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;Scope&lt;/td&gt;
   &lt;td&gt;Runtime &amp;amp; Tooling&lt;/td&gt;
   &lt;td&gt;Runtime&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;Dockerfile&lt;/td&gt;
   &lt;td&gt;Setup development environment&lt;/td&gt;
   &lt;td&gt;Configure production&lt;/td&gt;
  &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;Insights&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;There are many &lt;a href="https://containers.dev/overview"&gt;getting started&lt;/a&gt; resources available: &lt;a href="https://code.visualstudio.com/docs/devcontainers/containers"&gt;here&lt;/a&gt;, &lt;a href="https://code.visualstudio.com/docs/devcontainers/tutorial"&gt;here&lt;/a&gt;, &lt;a href="https://www.jetbrains.com/help/idea/connect-to-devcontainer.html"&gt;here&lt;/a&gt;, &lt;a href="https://www.google.com/search?q=devcontainer+tutorial"&gt;here&lt;/a&gt; and &lt;a href="https://github.com/0916dhkim/vscode-devcontainer-tutorial"&gt;here&lt;/a&gt;. They are working examples, commonly strong on what and how, but light on why&lt;/li&gt;
 &lt;li&gt;There are &lt;a href="https://containers.dev/templates"&gt;plenty of templates&lt;/a&gt; to learn by example&lt;/li&gt;
 &lt;li&gt;There seem to be substantial differences how it works on different platforms, subtle and annoying&lt;/li&gt;
 &lt;li&gt;On macOS (14.4.1) with with the &lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers"&gt;devcontainer plugin&lt;/a&gt; 0.364.0 mount binds would not work in auxiliary containers, only in the main app&lt;/li&gt;
 &lt;li&gt;I couldn't find any descrption which subset of &lt;a href="https://compose-spec.io"&gt;&lt;code&gt;docker-compose.yml&lt;/code&gt;&lt;/a&gt; is supported&lt;/li&gt;
 &lt;li&gt;The most interesting templates, for now, live on the &lt;a href="https://mcr.microsoft.com/en-us/"&gt;Microsoft Artifact Registry&lt;/a&gt;, when you know &lt;a href="https://mcr.microsoft.com/en-us/catalog?search=Container%20Images"&gt;how to look&lt;/a&gt;. Starting with those saves you tons of time and frustration&lt;/li&gt;
 &lt;li&gt;You will love &lt;code&gt;code --list-extensions&lt;/code&gt; to figure out the extensions you have in your vscode (unless you are a code n00b and don't have any)&lt;/li&gt;
&lt;/ul&gt;</description>
	<link>2024/05/devcontainers-the-fine-print.html</link>
	<author>Stephan H. Wissel</author>
	<guid>99f119a0-0b87-11ef-b8a5-450dafcfe327</guid>
	<pubDate>12 May 2024</pubDate>

</item>
<item>
	<title>Maven build with multiple Java versions</title>
	<description>&lt;p&gt;Imagine, you are tasked with maintaining a &lt;a href="https://opensource.hcltechsw.com/Domino-rest-api/index.html"&gt;Java application&lt;/a&gt; that needs to run on more than one Java version. You want to ensure that it compiles, tests and builds on all of them.&lt;br&gt;
  This is our story, buckle up, there are a few moving parts&lt;/p&gt;
&lt;h3&gt;The big picture&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;We use &lt;a href="https://maven.apache.org/"&gt;Apache Maven&lt;/a&gt; to drive the project using the &lt;code&gt;pom.xml&lt;/code&gt;&lt;/li&gt;
 &lt;li&gt;The &lt;a href="https://maven.apache.org/plugins/maven-toolchains-plugin/"&gt;Maven Toolchains&lt;/a&gt; plugin controls the Java versions&lt;/li&gt;
 &lt;li&gt;Using &lt;code&gt;&amp;lt;properties&amp;gt; ... &amp;lt;/properties&amp;gt;&lt;/code&gt; and &lt;a href="https://maven.apache.org/guides/introduction/introduction-to-profiles.html"&gt;Build Profiles&lt;/a&gt; to adjust conditions for processing&lt;/li&gt;
 &lt;li&gt;Annotatiosn like &lt;code&gt;@Only8&lt;/code&gt; and &lt;code&gt;@Only17&lt;/code&gt; help to qualify tests&lt;/li&gt;
 &lt;li&gt;Our build tool (&lt;a href="https://www.jenkins.io/"&gt;Jenkins&lt;/a&gt; or &lt;a href="https://github.com/features/actions"&gt;Github Actions&lt;/a&gt;) will use a container provided (in our case based on &lt;a href="https://www.redhat.com/en/blog/introducing-red-hat-universal-base-image"&gt;Redhat UBI&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;</description>
	<link>2024/04/maven-build-with-multiple-java-versions.html</link>
	<author>Stephan H. Wissel</author>
	<guid>e01d6620-fbcb-11ee-83f2-810c012896ec</guid>
	<pubDate>16 April 2024</pubDate>

</item>
<item>
	<title>nginx as ingress for Docker compose</title>
	<description>&lt;p&gt;In June I wrote about how to use &lt;a href="/blog/2023/06/docker-nginx-spa-and-brotli-compression.html"&gt;Docker &amp;amp; nginx&lt;/a&gt; to deliver statically rendered &lt;a href="https://github.com/google/brotli"&gt;brotli&lt;/a&gt; files for your web (frontend) application. It improves delivery quite a bid, but left me wonder: isn't there too much static WebServer involved?&lt;/p&gt;
&lt;h3&gt;Double hop to deliver static files&lt;/h3&gt;
&lt;p&gt;A typical web application using micro/mini/midi services looks like this:&lt;/p&gt;
&lt;p&gt;&lt;img src="/blog/images/2023/TypicalDockerConfig.jpg" alt="A typical Docker configuration"&gt;&lt;/p&gt;
&lt;p&gt;It is common, easy and concerns quite separated. However it comes with a set of challenges:&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;nginx doesn't do http/2 on &lt;a href="https://docs.nginx.com/nginx/admin-guide/web-server/reverse-proxy/"&gt;&lt;code&gt;proxy_pass&lt;/code&gt;&lt;/a&gt;, so you miss the ability to serve static files directly with http/2&lt;/li&gt;
 &lt;li&gt;For static file we have two nginx involved&lt;/li&gt;
 &lt;li&gt;Each service needs to be exposed to the host at some port&lt;/li&gt;
 &lt;li&gt;The service architecture leaks to the host based nginx. SO any change in service needs an update to the &lt;code&gt;docker-compose.yml&lt;/code&gt; &lt;strong&gt;AND&lt;/strong&gt; the host based nginx configuration&lt;/li&gt;
 &lt;li&gt;the containers depend on that, external to them, configuration&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So I tried to design a better way to handle this without going all &lt;a href="https://kubernetes.io/"&gt;K-in&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src="/blog/images/2023/DockerConfigWithNginx.jpg" alt="Docker configuration with ingress as component"&gt;&lt;/p&gt;
&lt;p&gt;This looed like a more promising approach:&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Services could be addressed with their internal network name&lt;/li&gt;
 &lt;li&gt;Only Ports 80 and 443 of one container need exposure on the host&lt;/li&gt;
 &lt;li&gt;The nginx configuration inside the container is immutable and can't accidentially be reconfigured in production (your image comes from a pipeline isn't it)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Challenges&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;When trying to configure certbot, I initially tried using the &lt;code&gt;--nginx&lt;/code&gt; parameter with an http challenge and shared data mounts. None of the attempts worked satisfactory, so at the end I settled on a&lt;a href="https://letsencrypt.org/docs/challenge-types/#dns-01-challenge"&gt;DNS-01&lt;/a&gt; using &lt;a href="https://www.cloudflare.com/"&gt;CloudFlare&lt;/a&gt;.&lt;/li&gt;
 &lt;li&gt;Since I wanted the nginx configuration to be inside the container image (and not on a data mount), a good understandig of nginx's configuration is necessary. The only persisted information was &lt;code&gt;/etc/letsencrypt&lt;/code&gt; for the certificate and a secret for CloudFlare credentials&lt;/li&gt;
 &lt;li&gt;When the nginx configuration is statically configured for TLS, on initial load it will fail since the certs don't exist yet. Auntie Google suggested a manual run of certbot, but I favour &lt;code&gt;docker compose up&lt;/code&gt; to handle everything&lt;/li&gt;
 &lt;li&gt;I ended up creating my own docker images, which was an epiphany: it absolutely makes sense to build a container image for single use instead of trying hard to make it configurable and vulnerable to mis-configuration&lt;/li&gt;
&lt;/ul&gt;</description>
	<link>2023/11/nginx-as-ingress-for-docker-compose.html</link>
	<author>Stephan H. Wissel</author>
	<guid>c5cd81d0-83ab-11ee-a943-5f6e43c4acd6</guid>
	<pubDate>15 November 2023</pubDate>

</item>
<item>
	<title>Quarkus and GraalVM starter</title>
	<description>&lt;p&gt;When &lt;a href="https://www.java.com/en/"&gt;Java&lt;/a&gt; is one of the languanges in your portfolio, you might have heard of &lt;a href="https://quarkus.io/"&gt;Quarkus&lt;/a&gt;, an alternative to &lt;a href="https://spring.io/projects/spring-boot"&gt;Spring Boot&lt;/a&gt; build on top of &lt;a href="https://vertx.io"&gt;vert.x&lt;/a&gt; and &lt;a href="https://www.graalvm.org/"&gt;GraalVM&lt;/a&gt;, a polyglot runtime for Java and other languages.&lt;/p&gt;
&lt;p&gt;This article describes the getting started that worked for me.&lt;/p&gt;
&lt;h3&gt;Moving parts&lt;/h3&gt;
&lt;p&gt;The fist hurdle to overcome is to install all the bits and pieces. There are plenty of versions (Java 11 - Java 21) and methods (maven, CLI, packet managers), so it con be confusing what to pick. I tried most of them and created a mess and a deep appreciation for the "reset to snapshot" feature afforded by virtual machines. Instructions work for macOS, Linux or &lt;a href="https://www.graalvm.org/"&gt;Linux on Windows&lt;/a&gt;.Here we go:&lt;/p&gt;
&lt;ol&gt;
 &lt;li&gt;install &lt;a href="https://sdkman.io/"&gt;SdkMan&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The tool helps to keep your software development kits under control. From their website:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;"Meet SDKMAN! ? your reliable companion for effortlessly managing multiple Software Development Kits on Unix systems. Imagine having different versions of SDKs and needing a stress-free way to switch between them. SDKMAN! steps in with its easy-to-use Command Line Interface (CLI) and API."&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;curl -s "https://get.sdkman.io" | bash
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can thank me later. Side note: there are 16 different JDK offerings that can be installed, we are spoiled &lt;a href="https://thedecisionlab.com/reference-guide/economics/the-paradox-of-choice"&gt;for choices&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
 &lt;li&gt;install &lt;a href="https://www.graalvm.org/"&gt;GraalVM&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Currently, as of time of writing, there are three GraalVM distributions available. The Open Source, community supported &lt;a href="https://github.com/oracle/graal/"&gt;GraalVM Community Edition&lt;/a&gt;, the commercial, Oracle supported &lt;a href="https://www.graalvm.org/downloads/"&gt;Oracle GraalVM&lt;/a&gt; which requires a license in production and the ReedHat backed &lt;a href="https://github.com/graalvm/mandrel"&gt;Mandrel&lt;/a&gt;. Mandrel is advertised as "specifically to support Quarkus". The Java 21 version was not yet available on sdkman, so I used the community edition. To stick with Mandrel I will use the container build option, later more on that&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;# List SDKs
sdk list java
# install GraalVM
sdk install java 21-graaalce
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
 &lt;li&gt;Install &lt;a href="https://quarkus.io/"&gt;Quarkus&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This will install the Quarkus CLI and for good measure &lt;a href="https://maven.apache.org"&gt;Apache Maven&lt;/a&gt;. The Quarkus CLI makes a &lt;a href="https://quarkus.io/guides/ide-tooling"&gt;pleasant developer experience&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;sdk install quarkus
sdk install mvn
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
 &lt;li&gt;Install &lt;a href="https://www.docker.com/"&gt;Docker&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You can use &lt;a href="https://www.docker.com/products/docker-desktop/"&gt;Docker desktop&lt;/a&gt; (required a license for larger organisations) or &lt;a href="https://rancherdesktop.io/"&gt;Rancher Desktop&lt;/a&gt; (which also handles Kubernetes), &lt;a href="https://podman-desktop.io/"&gt;Podman Desktop&lt;/a&gt;, any of &lt;a href="https://alternativeto.net/browse/search/?q=Docker"&gt;the alternatives&lt;/a&gt; or the command line. New to Docker? There's &lt;a href="https://www.google.com/search?q=how+to+install+docker"&gt;plenty of fish&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now we are good to go. Skipping the &lt;a href="https://quarkus.io/get-started/"&gt;Code with Quarkus&lt;/a&gt; tutorial lets build a n app in java and native put it into a container&lt;/p&gt;</description>
	<link>2023/10/quarkus-and-graalvm-starter.html</link>
	<author>Stephan H. Wissel</author>
	<guid>59234250-69c9-11ee-ba4c-cfc559bbd988</guid>
	<pubDate>13 October 2023</pubDate>

</item>

</channel>
</rss>
