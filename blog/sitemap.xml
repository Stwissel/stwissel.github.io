<?xml version="1.0"?>
<rss version="2.0">
<channel>
	<title>wissel.net Usability - Productivity - Business - The web - Singapore and Twins</title>
	<link>https://wissel.net/blog/stories.rss</link>
	<description>Thoughts, Insights and Opinions of Stephan H. Wissel. Topics included: Salesforce, Lotus Notes and Domino, IBM Websphere, NodeJS, JavaScript,  J2EE, .Net, Software Archtecture, Personcentric Development, Agile Software, SDLC, Singapore and my Twins</description>
	<language>en,de</language>
	<copyright>(C) 2003 - 2021 Stephan H. Wissel, All rights reserved</copyright>
	<pubdate>Sat, 01 Jan 2022 07:33:56 +0000</pubdate>
<item>
	<title>Deploying your frontend as webJar</title>
	<description>&lt;p&gt;In an API driven world back-end and front-end are clearly separated and might live on different servers alltogether. However for smaller applications serving static files happens from the same place as your backend lives&lt;/p&gt; 
&lt;h3&gt;So many choices&lt;/h3&gt; 
&lt;p&gt;The &lt;a href="https://www.nginx.com/"&gt;web server&lt;/a&gt; that proxies your application server could have a rule for static files, your firewall could so that, you use a static directory on your application server or pack, that's the story here, your front-end into a jar. I'm not discussing the merits of the different approaches here, that's a story for another time, but describe the workflow and tools for the JAR approach.&lt;/p&gt; 
&lt;h3&gt;vert.x static routes&lt;/h3&gt; 
&lt;p&gt;In &lt;a href="https://vertx.io"&gt;Vertx&lt;/a&gt; a static route can be declared with a &lt;a href="https://vertx.io/docs/vertx-web/java/#_serving_static_resources"&gt;few lines&lt;/a&gt; of code:&lt;/p&gt; 
&lt;pre class="brush: java"&gt;Router router = Router.router(vertx);
router.route("/ui/*")
      .handler(StaticHandler.create("uitarget"));
&lt;/pre&gt; 
&lt;p&gt;Vertx will then look for the folder &lt;code&gt;uitarget&lt;/code&gt; in its current working directory or on the classpath. So you will need to put your jar on the classpath&lt;/p&gt; 
&lt;h3&gt;The swagger-ui example&lt;/h3&gt; 
&lt;p&gt;There are &lt;a href="https://www.webjars.org/"&gt;lots of prepackaged UI jars&lt;/a&gt; available and &lt;a href="https://www.webjars.org/documentation#vertx"&gt;easy to integrate into vert.x&lt;/a&gt;. For example the &lt;a href="https://swagger.io/tools/swagger-ui/"&gt;Swagger UI&lt;/a&gt;. Define a dependency in your &lt;code&gt;pom.xml&lt;/code&gt; and a one liner to access the code:&lt;/p&gt; 
&lt;pre class="brush: xml"&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.webjars&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;swagger-ui&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;4.1.3&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/pre&gt; 
&lt;pre class="brush: java"&gt;Router router = Router.router(vertx);
router.route("/assets/lib/*").handler(StaticHandler.create("META-INF/resources/webjars"));
&lt;/pre&gt; 
&lt;h3&gt;Packing your own front-end&lt;/h3&gt; 
&lt;p&gt;Most modern build front-ends owe their executable form to an &lt;code&gt;npm build&lt;/code&gt; command. If you are not sure check the documentation for &lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt;, &lt;a href="https://angular.io/"&gt;Angular&lt;/a&gt;, &lt;a href="https://angular.io/"&gt;Lightning&lt;/a&gt;, &lt;a href="https://vuejs.org/"&gt;Vue&lt;/a&gt;, &lt;a href="https://ionicframework.com/"&gt;Ionic&lt;/a&gt; or whatever framework you fancy.&lt;/p&gt; 
&lt;p&gt;There are two plugins for &lt;a href="https://maven.apache.org/"&gt;maven&lt;/a&gt; that can process front-end work:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The &lt;a href="https://github.com/eirslett/frontend-maven-plugin"&gt;Frontend Maven Plugin&lt;/a&gt;: Specialized module that handles download of NodeJS and running your NodeJS based build tools. Great when you don't have NodeJS installed anyway&lt;/li&gt; 
 &lt;li&gt;The &lt;a href="https://www.mojohaus.org/exec-maven-plugin/"&gt;Exec Maven Plugin&lt;/a&gt;: Generic plugin to run stuff. Doesn't download NodeJS for you. More work to setup (that's what I picked)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The steps you will need to perform, actually not you, but your &lt;code&gt;mvn package&lt;/code&gt; run:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;run &lt;code&gt;npm install&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;run &lt;code&gt;npm build&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;move files into the target directory structure&lt;/li&gt; 
 &lt;li&gt;build the Jar&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;All of this can be wrapped into your &lt;code&gt;pom.xml&lt;/code&gt;. I usually add the front-end as a module to the whole project, so a build is always complete&lt;/p&gt;</description>
	<link>2021/12/deploying-your-frontend-as-webjar.html</link>
	<author>Stephan H. Wissel</author>
	<guid>a32c0030-6705-11ec-817f-4bcc5378b126</guid>
	<pubDate>27 December 2021</pubDate>

</item>
<item>
	<title>Refresh local git repositories</title>
	<description>&lt;p&gt;I keep all my software that is under version control below a few directories only. E.g. OpenSource projects I cloned to learn from them live below &lt;code&gt;~/OpenSource&lt;/code&gt;. Keeping up with updates requires to pull them all.&lt;/p&gt; 
&lt;h3&gt;Pulling the main branch&lt;/h3&gt; 
&lt;p&gt;My little helper does:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;change into each first level sub directory&lt;/li&gt; 
 &lt;li&gt;check if it is under version control&lt;/li&gt; 
 &lt;li&gt;capture the current branch&lt;/li&gt; 
 &lt;li&gt;switch to &lt;code&gt;main&lt;/code&gt; or &lt;code&gt;master&lt;/code&gt; branch, depending on which one is there&lt;/li&gt; 
 &lt;li&gt;capture the name of the tracked remote&lt;/li&gt; 
 &lt;li&gt;fetch all remotes&lt;/li&gt; 
 &lt;li&gt;pull the tracked remote&lt;/li&gt; 
 &lt;li&gt;switch back to the branch it was in&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The script does not check if the current branch is dirty (preventing checkout) or pushing back changes. Enjoy&lt;/p&gt; 
&lt;pre class="brush: bash"&gt;#!/bin/bash
# Pull all repos below the current working directory

do_the_sync() {
  for f in *; do
      if [ -d $f -a ! -h $f ]; then
         cd -- "$f";
         if [ -d ".git" ]; then
            curBranch=$(git branch --show-current)
            mainBranch=nn
            echo "Working on $f";
            if [ "`git branch --list main`" ]; then
              mainBranch=main
            else
              mainBranch=master
            fi
            remoteBranch=$(git rev-parse --abbrev-ref ${mainBranch}@{upstream})
            IFS='/' read -r remoteSrv string &amp;lt;&amp;lt;&amp;lt; "$remoteBranch"
            echo "working on $mainBranch tracking $remoteSrv"
            git fetch --all
            git pull $remoteSrv
            git checkout $curBranch
         fi
         cd ..
      fi;
  done;
};

do_the_sync
echo "DONE!"
&lt;/pre&gt; 
&lt;p&gt;As usual YMMV&lt;/p&gt;</description>
	<link>2021/12/refresh-local-git-repositories.html</link>
	<author>Stephan H. Wissel</author>
	<guid>516554b0-63f7-11ec-9248-c18c40a7135e</guid>
	<pubDate>23 December 2021</pubDate>

</item>
<item>
	<title>Spotless code with a git hook</title>
	<description>&lt;p&gt;When developing software in a team, a source of constant annoyment is code formatting. Each IDE has slightly different ideas about it, not even getting into the &lt;a href="https://www.jwz.org/doc/tabs-vs-spaces.html"&gt;tabs vs. spaces&lt;/a&gt; debate. Especially annoying in Java land is the import sort order&lt;/p&gt; 
&lt;h3&gt;Automation to the rescue&lt;/h3&gt; 
&lt;p&gt;I switch between editors (if you need to know: &lt;a href="https://www.eclipse.org"&gt;Eclipse&lt;/a&gt;, &lt;a href="https://code.visualstudio.com"&gt;Visual Studio Code&lt;/a&gt;, &lt;a href="https://www.oxygenxml.com"&gt;OxygenXML&lt;/a&gt;, &lt;a href="https://www.jetbrains.com/idea/"&gt;IntelliJ&lt;/a&gt;, &lt;a href="https://www.sublimetext.com"&gt;Sublime&lt;/a&gt;, &lt;a href="https://www.geany.org"&gt;Geany&lt;/a&gt;, &lt;a href="https://www.nano-editor.org"&gt;nano&lt;/a&gt; or &lt;a href="https://en.wikipedia.org/wiki/Vi"&gt;vi (ESC :!wq)&lt;/a&gt;) frequently, so an editor specific solution isn't an option.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/diffplug/spotless"&gt;Spotless&lt;/a&gt; to the rescue. It's a neat project using &lt;a href="https://maven.apache.org"&gt;Maven&lt;/a&gt; or &lt;a href="https://gradle.org"&gt;Gradle&lt;/a&gt; to format pretty (pun inteded) much all code types I use. The documentation states:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Spotless can format &amp;lt;antlr | c | c# | c++ | css | flow | graphql | groovy | html | java | javascript | json | jsx | kotlin | less | license headers | markdown | objective-c | protobuf | python | scala | scss | sql | typeScript | vue | yaml | anything&amp;gt; using &amp;lt;gradle | maven | anything&amp;gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Setup&lt;/h3&gt; 
&lt;p&gt;I opted for the eclipse defined Java formatting, using almost the Google formatting rules with the notable exception not merging line breaks back.&lt;/p&gt; 
&lt;p&gt;There are 3 steps involved for the &lt;a href="https://github.com/diffplug/spotless/tree/main/plugin-maven"&gt;Maven setup&lt;/a&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Obtaining the formatting files, &lt;a href="https://github.com/diffplug/spotless/blob/main/ECLIPSE_SCREENSHOTS.md"&gt;outlined here&lt;/a&gt;. Just make sure you are happy with the format first&lt;/li&gt; 
 &lt;li&gt;Add the maven plugin (see below)&lt;/li&gt; 
 &lt;li&gt;Add a git hook (see below)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;pom.xml&lt;/h3&gt; 
&lt;p&gt;This is what I added to my &lt;code&gt;pom.xml&lt;/code&gt;. By default spotless would run &lt;code&gt;check&lt;/code&gt; only, so I added &lt;code&gt;apply&lt;/code&gt; to enforce the formatting&lt;/p&gt; 
&lt;pre class="brush: xml"&gt;&amp;lt;properties&amp;gt;
   &amp;lt;spotless.version&amp;gt;2.4.1&amp;lt;/spotless.version&amp;gt;
&amp;lt;/properties&amp;gt;

&amp;lt;build&amp;gt;
    &amp;lt;plugins&amp;gt;
        &amp;lt;plugin&amp;gt;
            &amp;lt;groupId&amp;gt;com.diffplug.spotless&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spotless-maven-plugin&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${spotless.version}&amp;lt;/version&amp;gt;
            &amp;lt;executions&amp;gt;
               &amp;lt;execution&amp;gt;
                 &amp;lt;goals&amp;gt;
                   &amp;lt;goal&amp;gt;apply&amp;lt;/goal&amp;gt;
                 &amp;lt;/goals&amp;gt;
               &amp;lt;/execution&amp;gt;
            &amp;lt;/executions&amp;gt;
            &amp;lt;configuration&amp;gt;
                &amp;lt;formats&amp;gt;
                    &amp;lt;format&amp;gt;
                        &amp;lt;!-- Markdown, JSON and gitignore --&amp;gt;
                        &amp;lt;includes&amp;gt;
                            &amp;lt;include&amp;gt;*.md&amp;lt;/include&amp;gt;
                            &amp;lt;include&amp;gt;*.json&amp;lt;/include&amp;gt;
                            &amp;lt;include&amp;gt;.gitignore&amp;lt;/include&amp;gt;
                        &amp;lt;/includes&amp;gt;
                        &amp;lt;trimTrailingWhitespace /&amp;gt;
                        &amp;lt;endWithNewline /&amp;gt;
                        &amp;lt;indent&amp;gt;
                            &amp;lt;spaces&amp;gt;true&amp;lt;/spaces&amp;gt;
                            &amp;lt;spacesPerTab&amp;gt;2&amp;lt;/spacesPerTab&amp;gt;
                        &amp;lt;/indent&amp;gt;
                    &amp;lt;/format&amp;gt;
                &amp;lt;/formats&amp;gt;
                &amp;lt;!-- ECLIPSE Java format --&amp;gt;
                &amp;lt;java&amp;gt;
                    &amp;lt;toggleOffOn /&amp;gt;
                    &amp;lt;importOrder&amp;gt;
                        &amp;lt;file&amp;gt;${maven.multiModuleProjectDirectory}/spotless.importorder&amp;lt;/file&amp;gt;
                    &amp;lt;/importOrder&amp;gt;
                    &amp;lt;removeUnusedImports /&amp;gt;
                    &amp;lt;eclipse&amp;gt;
                        &amp;lt;file&amp;gt;${maven.multiModuleProjectDirectory}/eclipse-java-keep-style.xml&amp;lt;/file&amp;gt;
                    &amp;lt;/eclipse&amp;gt;
                &amp;lt;/java&amp;gt;
            &amp;lt;/configuration&amp;gt;
        &amp;lt;/plugin&amp;gt;
    &amp;lt;/plugins&amp;gt;
&amp;lt;/build&amp;gt;
&lt;/pre&gt; 
&lt;p&gt;A few remarks:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;I run &lt;code&gt;apply&lt;/code&gt; rather than &lt;code&gt;check&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;the directory variable &lt;code&gt;${maven.multiModuleProjectDirectory}&lt;/code&gt; is needed, so sub projects work&lt;/li&gt; 
 &lt;li&gt;you want to extend the configuration to include JS/TS eventually&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;.git/hooks/pre-commit&lt;/h3&gt; 
&lt;p&gt;Create or edit your &lt;code&gt;[projectroot]/.git/hooks/pre-commit&lt;/code&gt; file:&lt;/p&gt; 
&lt;pre class="brush: bash"&gt;#!/bin/bash
# Run formatting on pre-commit
files=`git status --porcelain | cut -c 4-`
fulllist=''
for f in $files; do
    fulllist+=(.*)$(basename $f)$'\n'
done;
list=`echo "${fulllist}" | paste -s -d, /dev/stdin`
echo Working on $list
# Activate Java 11
export JAVA_HOME=`/usr/libexec/java_home -v 11.0`
/usr/local/bin/mvn spotless:apply -Dspotless.check.skip=false -DspotlessFiles=$list
&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;You might not need the line with Java&lt;/li&gt; 
 &lt;li&gt;swap &lt;code&gt;apply&lt;/code&gt; for &lt;code&gt;check&lt;/code&gt; when you just want to check&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;As usual YMMV&lt;/p&gt;</description>
	<link>2021/12/spotless-code-with-a-git-hook.html</link>
	<author>Stephan H. Wissel</author>
	<guid>38926a10-59cd-11ec-8058-07b29c73246e</guid>
	<pubDate>10 December 2021</pubDate>

</item>
<item>
	<title>Factory based dependency injection</title>
	<description>&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/No_Man_Is_an_Island_(album)"&gt;No man is an island&lt;/a&gt; and no code you write lives without dependencies (even your low-level assembly code depends on the processor's microcode). Testing (with) dependencies can be [insert expletive]&lt;/p&gt; 
&lt;h3&gt;Dependency injection to the rescue&lt;/h3&gt; 
&lt;p&gt;The general approach to make dependent code testable is &lt;a href="https://en.wikipedia.org/wiki/Dependency_injection"&gt;Dependency injection&lt;/a&gt;. Instead of calling out and create an instance of the dependency, the dependency is hand over as parameter. This could be in a constructor, a property setter or as method parameter.&lt;/p&gt; 
&lt;p&gt;A key requirement for successful dependency injection: the injected object gets injected as an &lt;a href="https://docs.oracle.com/javase/tutorial/java/concepts/interface.html"&gt;Interface&lt;/a&gt; rather than a concrete class. So &lt;a href="https://amzn.to/3ozoD9k"&gt;do your homework&lt;/a&gt; and build your apps around interfaces.&lt;/p&gt; 
&lt;p&gt;An example to illustrate how not to do, and how to change:&lt;/p&gt; 
&lt;pre class="brush: java"&gt;public Optional&amp;lt;Customer&amp;gt; findCustomer(final String id) {
 // Some processing here, omitted for clarity

 // actual find
 final CustomerDbFind find = CustomerDb.getFinder();
 return Optional.ofNullable(find.customerById(id));

}
&lt;/pre&gt; 
&lt;p&gt;When you try to test this function, you depend on the static method of the &lt;code&gt;CustomerDb&lt;/code&gt; which is a pain to mock out. So one consideration could be to hand the &lt;code&gt;CustomerDb&lt;/code&gt; as dependency. But this would violate "provide interface, not class". The conclusion, presuming &lt;code&gt;CustomerDbFind&lt;/code&gt; is an interface will be:&lt;/p&gt; 
&lt;pre class="brush: java"&gt;public Optional&amp;lt;Customer&amp;gt; findCustomer(final CustomerDbFind find, final String id) {
 // Some processing here, omitted for clarity

 // actual find

 return Optional.ofNullable(find.customerById(id));

}
&lt;/pre&gt; 
&lt;p&gt;This now allows to construct the dependency outside the method to test by implementing the interface or using a &lt;a href="https://site.mockito.org"&gt;Mock library&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Not so fast&lt;/h3&gt;</description>
	<link>2021/12/factory-based-dependency-injection.html</link>
	<author>Stephan H. Wissel</author>
	<guid>f5e53190-58c6-11ec-a5a2-1d9fd86b9254</guid>
	<pubDate>09 December 2021</pubDate>

</item>
<item>
	<title>Java Streams filters with side effects</title>
	<description>&lt;p&gt;Once you get used to &lt;a href="/blog/2020/11/streams-and-functional-programming-in-java.html"&gt;stream programming&lt;/a&gt; and the pattern of &lt;a href="/blog/2021/01/collecting-java-streams.html"&gt;create, select, manipulate and collect&lt;/a&gt; your code will never look the same&lt;/p&gt; 
&lt;h3&gt;Putting side effects to good (?) use&lt;/h3&gt; 
&lt;p&gt;The pure teachings tell us, &lt;a href="https://www.baeldung.com/java-stream-filter-lambda"&gt;filters&lt;/a&gt; should select objects for processing and &lt;strong&gt;not&lt;/strong&gt; have any side effects or do processing on their own. But ignoring the teachings could produce clean code (I probably will roast in debug hell for this). Let's look at an example:&lt;/p&gt; 
&lt;pre class="brush: java"&gt;final Collection&amp;lt;MyNotification&amp;gt; notifications = getNotifications();
final Iterator&amp;lt;MyNotification&amp;gt; iter = notifications.iterator();

while(iter.hasNext()) {
  MyNotification n = iter.next();

  if (n.priority == Priority.high) {
    sendHighPriority(n);
  } else if (n.groupNotification) {
    sendGroupNotification(n);
  } else if (n.special &amp;amp;&amp;amp; !n.delay &amp;gt; 30) {
    sendSpecial(n);
  } else if (!n.special) {
    sendStandard(n);
  } else {
    reportWrongNotification(n);
  }
}
&lt;/pre&gt; 
&lt;p&gt;This gets messy very fast and all selection logic is confined to the if conditions in one function (which initially looks like a good idea). How about rewriting the code &lt;a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html"&gt;Stream&lt;/a&gt; style? It will be more boiler plate, but better segregation:&lt;/p&gt; 
&lt;pre class="brush: java"&gt;final Stream&amp;lt;MyNotification&amp;gt; notifications = getNotifications();

notifications
  .filter(this::highPriority)
  .filter(this::groupSend)
  .filter(this::specialNoDelay)
  .filter(this::standard)
  .forEach(this::reportWrongNotification);
&lt;/pre&gt; 
&lt;p&gt;The filter functions would look like this:&lt;/p&gt; 
&lt;pre class="brush: java"&gt;boolean highPriority(final MyNotification n) {
  if (n.priority == Priority.high) {
    sendHighPriority(n);
    return false; // No further processing required
  }
  return true; // Furhter processing required
}

boolean groupSend(final MyNotification n) {
  if (n.groupNotification) {
    sendGroupNotification(n);
    return false; // No further processing required
  }
  return true; // Furhter processing required
}
&lt;/pre&gt; 
&lt;p&gt;You get the idea. With proper JavaDoc method headers, this code looks more maintainable.&lt;br&gt; We can push this a little further (as explored on &lt;a href="https://stackoverflow.com/questions/69670736/how-to-apply-a-collection-of-filters-to-a-java-stream"&gt;Stackoverflow&lt;/a&gt;). Imagin the number of process steps might vary and you don't want to update that code for every variation. You could do something like this:&lt;/p&gt; 
&lt;pre class="brush: java"&gt;final Stream&amp;lt;MyNotification&amp;gt; notifications = getNotifications();
final Stream&amp;lt;Predicate&amp;lt;MyNotifications&amp;gt;&amp;gt; filters = getFilters();

notifications
  .filter(filters.reduce(f -&amp;gt; true, Predicate::and))
  .forEach(this::reportWrongNotification);
&lt;/pre&gt; 
&lt;p&gt;As usual YMMV&lt;/p&gt;</description>
	<link>2021/10/java-streams-filters-with-side-effects.html</link>
	<author>Stephan H. Wissel</author>
	<guid>476bcff0-32da-11ec-97e7-f363621f1794</guid>
	<pubDate>22 October 2021</pubDate>

</item>
<item>
	<title>Streaming CouchDB data</title>
	<description>&lt;p&gt;I'm a confessing fan of &lt;a href="http://couchdb.apache.org/"&gt;CouchDB&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/Stream_(computing)"&gt;stream programming&lt;/a&gt; and the &lt;a href="https://www.npmjs.com/package/nano"&gt;official CouchDB NodeJS library&lt;/a&gt;. Nano supports returning data as &lt;a href="https://nodejs.org/api/stream.html"&gt;NodeJS Stream&lt;/a&gt;, so you can &lt;a href="https://www.codemag.com/article/1803071/Getting-Started-with-Node-Streams"&gt;pipe it away&lt;/a&gt;. Most examples use file streams or &lt;a href="https://nodejs.org/api/process.html#process_process_stdout"&gt;&lt;code&gt;process.stdout&lt;/code&gt;&lt;/a&gt;, while my goal was to process individual documents that are part of the stream&lt;/p&gt; 
&lt;h3&gt;You can't walk into the same stream a second time&lt;/h3&gt; 
&lt;p&gt;This old Buddhist saying holds true for NodeJS streams too. So any processing needs to happen in the chain of the stream. Let's start with the simple example of reading all documents from a couchDB:&lt;/p&gt; 
&lt;pre class="brush: javascript"&gt;const Nano = require("nano");
const nano = Nano(couchDBURL);
nano.listAsStream({ include_docs: true }).pipe(process.stdout);
&lt;/pre&gt; 
&lt;p&gt;This little snippet will read out all documents in your couchDB. You need to supply the &lt;code&gt;couchDBURL&lt;/code&gt; value, e.g. &lt;code&gt;http://localhost:5984/test&lt;/code&gt;. On a closer look, we see that the data returned arrives in continious buffers that don't match JSON document boundaries, so processing one document after the other needs extra work.&lt;/p&gt; 
&lt;p&gt;A &lt;a href="https://strongloop.com/strongblog/practical-examples-of-the-new-node-js-streams-api/"&gt;blog entry&lt;/a&gt; in the StrongLoop blog provides the first clue what to do. To process CouchDB stream data we need both a &lt;a href="https://nodejs.org/api/stream.html#stream_class_stream_transform"&gt;Transform stream&lt;/a&gt; to chop incoming data into line by line and a &lt;a href="https://nodejs.org/api/stream.html#stream_implementing_a_writable_stream"&gt;writable stream&lt;/a&gt; for our results.&lt;/p&gt; 
&lt;p&gt;Our code, finally will look like this:&lt;/p&gt; 
&lt;pre class="brush: javascript"&gt;const Nano = require("nano");
const { Writable, Transform } = require("stream");

const streamOneDb = (couchDBURL, resultCallback) =&amp;gt; {
  const nano = Nano(couchDBURL);
  nano
    .listAsStream({ include_docs: true })
    .on("error", (e) =&amp;gt; console.error("error", e))
    .pipe(lineSplitter())
    .pipe(jsonMaker())
    .pipe(documentWriter(resultCallback));
};
&lt;/pre&gt; 
&lt;p&gt;Let's have a closer look at the new functions, the first two implement &lt;code&gt;transform&lt;/code&gt;, the last one &lt;code&gt;writable&lt;/code&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;lineSplitter&lt;/code&gt;, as the name implies, cuts the buffer into separate lines for processing. As far as I could tell, CouchDB documents always returned on one line&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;jsonMaker&lt;/code&gt;, extracts the documents and discards the wrapper with document count that surrounds them&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;documentWriter&lt;/code&gt;, writing out the JSON object using a callback&lt;/li&gt; 
&lt;/ul&gt;</description>
	<link>2021/10/streaming-couchdb-data.html</link>
	<author>Stephan H. Wissel</author>
	<guid>3c572e40-2e5f-11ec-a72e-eb1375b3050a</guid>
	<pubDate>16 October 2021</pubDate>

</item>
<item>
	<title>Reading Resources from JAR Files</title>
	<description>&lt;p&gt;One interesting challenge I &lt;a href="https://www.theprojectthatshallnotbenamed.com/"&gt;encountered&lt;/a&gt; is the need or ability to make an Java application extensible by providing additional classes and configuation. Ideally extension should happen by dropping a properly crafted JAR file into a specified location and restard the server. Along the line I learned about Java's classpath. This is what is to be shared here.&lt;/p&gt; 
&lt;h3&gt;Act one: onto the classpath&lt;/h3&gt; 
&lt;p&gt;When you start off with Java, you would expect, that you simply can set the &lt;a href="https://docs.oracle.com/javase/tutorial/essential/environment/paths.html"&gt;classpath&lt;/a&gt; varible either using an environment variable or the &lt;code&gt;java -cp&lt;/code&gt; parameter. Then you learn the &lt;a href="https://stackoverflow.com/questions/11922681/differences-between-java-cp-and-java-jar"&gt;hard way&lt;/a&gt;, that &lt;code&gt;java -jar&lt;/code&gt; and &lt;code&gt;java -cp&lt;/code&gt; are mutually exclusive. After a short flirt with &lt;a href="https://product.hubspot.com/blog/the-fault-in-our-jars-why-we-stopped-building-fat-jars"&gt;fatJAR&lt;/a&gt;, you end up with a directory structure like this:&lt;/p&gt; 
&lt;p&gt;&lt;img src="/blog/images/2021/ApplicationDirectoryStructure.png" alt="Directory Structure"&gt;&lt;/p&gt; 
&lt;p&gt;The secreingredient to make this work is the manifest file inside the &lt;code&gt;myApp.jar&lt;/code&gt;. It needs to be told to put all jar files in &lt;code&gt;libs&lt;/code&gt; onto the classpath too. In &lt;a href="https://maven.apache.org/"&gt;maven&lt;/a&gt;, it looks like this:&lt;/p&gt; 
&lt;pre class="brush: xml"&gt;&amp;lt;plugin&amp;gt;
    &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;maven-jar-plugin&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;${maven.jar.plugin.version}&amp;lt;/version&amp;gt;
    &amp;lt;configuration&amp;gt;
        &amp;lt;archive&amp;gt;
            &amp;lt;manifest&amp;gt;
                &amp;lt;mainClass&amp;gt;com.hcl.domino.keep.Launch&amp;lt;/mainClass&amp;gt;
            &amp;lt;/manifest&amp;gt;
            &amp;lt;manifestEntries&amp;gt;
                &amp;lt;Class-Path&amp;gt;.&amp;lt;/Class-Path&amp;gt;
                &amp;lt;Class-Path&amp;gt;libs/*&amp;lt;/Class-Path&amp;gt;
            &amp;lt;/manifestEntries&amp;gt;
        &amp;lt;/archive&amp;gt;
    &amp;lt;/configuration&amp;gt;
&amp;lt;/plugin&amp;gt;
&lt;/pre&gt; 
&lt;p&gt;Now, that all JARS are successfully availble on the classspath, we can try to retrieve them.&lt;/p&gt;</description>
	<link>2021/04/reading-resources-from-jar-files.html</link>
	<author>Stephan H. Wissel</author>
	<guid>ce4a84f0-a8d6-11eb-af9d-1184c78a15d1</guid>
	<pubDate>29 April 2021</pubDate>

</item>
<item>
	<title>Collecting Java Streams</title>
	<description>&lt;p&gt;I wrote about &lt;a href="/blog/2020/11/streams-and-functional-programming-in-java.html"&gt;Java Streams before&lt;/a&gt;, sharing how they work for me and how, in conjunction with Java's &lt;a href="https://www.baeldung.com/java-8-functional-interfaces"&gt;functional interfaces&lt;/a&gt;, they enable us to write clean(er) code. I'd like to revisit my learnings, with some focus on the final step: what happens at the tail end of a stream operation&lt;/p&gt; 
&lt;h3&gt;Four activities&lt;/h3&gt; 
&lt;p&gt;There are four activities around Java Streams:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Create&lt;/strong&gt;: There are numerous possibilities to create a stream. The most prevalent, I found, is &lt;a href="https://docs.oracle.com/javase/8/docs/api/java/util/Collection.html#stream"&gt;&lt;code&gt;Collection.stream()&lt;/code&gt;&lt;/a&gt; which returns a stream of anything in Java's collection framework: Collections, Lists, Sets etc.&lt;br&gt;There are more possibilities provided by the &lt;a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html"&gt;Stream&lt;/a&gt; interface, the &lt;a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.Builder.html"&gt;StreamBuilder&lt;/a&gt; interface, the &lt;a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/StreamSupport.html"&gt;StreamSupport&lt;/a&gt; utility class or Java NIO's &lt;a href="https://docs.oracle.com/javase/8/docs/api/java/nio/file/Files.html"&gt;Files&lt;/a&gt; (and probably some more)&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Select&lt;/strong&gt;: You can &lt;code&gt;filter()&lt;/code&gt;, &lt;code&gt;skip()&lt;/code&gt;, &lt;code&gt;limit()&lt;/code&gt;, &lt;code&gt;concat()&lt;/code&gt;, &lt;code&gt;distinct()&lt;/code&gt; or &lt;code&gt;sorted()&lt;/code&gt;. All those methods don't change individual stream members, but determine what elements will be processed further. Selection and manipulation can happen multiple times after each other&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Manipulate&lt;/strong&gt;: Replace each member of the stream with something else. That "something" can be the member itself with altered content. Methods that are fluent fit here nicely (like &lt;code&gt;stream().map(customer -&amp;gt; customer.setStatus(newStatus))&lt;/code&gt;. We use &lt;code&gt;map()&lt;/code&gt; and &lt;code&gt;flatMap()&lt;/code&gt; for this step. While it is perfectly fine to use &lt;a href="https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html"&gt;Lambda Expressions&lt;/a&gt;, consider moving the Lambda body into its own function, to improve reading and debugging&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Collect&lt;/strong&gt;: You can "collect" a stream once. After that it becomes inaccessible. The closest to classic loops here is the &lt;code&gt;forEach()&lt;/code&gt; method, that allows you operate on the members as you are used to from the Java Collection framework.&lt;br&gt;Next are the convenience methods: &lt;code&gt;count()&lt;/code&gt;, &lt;code&gt;findAny()&lt;/code&gt;, &lt;code&gt;findFirst()&lt;/code&gt;, &lt;code&gt;toArray()&lt;/code&gt; and finally &lt;code&gt;reduce()&lt;/code&gt; and &lt;code&gt;collect()&lt;/code&gt;.&lt;br&gt;A typical way to use &lt;code&gt;collect()&lt;/code&gt; is in conjunction with the &lt;a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Collectors.html"&gt;Collectors&lt;/a&gt; static class, that provides the most commonly needed methods like &lt;code&gt;toSet()&lt;/code&gt;, &lt;code&gt;toList()&lt;/code&gt;, &lt;code&gt;joining()&lt;/code&gt; or &lt;code&gt;groupingBy()&lt;/code&gt;. Check the &lt;a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Collectors.html"&gt;JavaDoc&lt;/a&gt;, there are 37 methods at your disposal.&lt;br&gt;However, sometimes, you might have different needs for your code, there &lt;strong&gt;custom collectors&lt;/strong&gt; shine&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt;</description>
	<link>2021/01/collecting-java-streams.html</link>
	<author>Stephan H. Wissel</author>
	<guid>128920a0-4c0b-11eb-9875-11c5d96c4e9d</guid>
	<pubDate>01 January 2021</pubDate>

</item>
<item>
	<title>What constitutes "good" (software) documentation?</title>
	<description>&lt;p&gt;Software ocumentation is a sticky issue and tends to escalate rather quickly in opinion matches, fighting over what is needed, what is missing and what should be different.&lt;/p&gt; 
&lt;p&gt;Looking at it closer I see 3 main dimentions:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;audience&lt;/li&gt; 
 &lt;li&gt;content&lt;/li&gt; 
 &lt;li&gt;format&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Each documentation artefact has a sweet spot in this cube as well as no-go zones (e.g. a business user watching a live coding recording?).&lt;/p&gt; 
&lt;p&gt;Any individual can and will fit into one or more audience, as each artefact will fit into one or more content categories. So good navigation and cross references are essential&lt;/p&gt; 
&lt;p&gt;&lt;a href="/blog/images/2020/GoodDocumentation.jpg"&gt;&lt;img src="/blog/images/2020/GoodDocumentation800.jpg" alt="Documentation MindMap"&gt;&lt;/a&gt;&lt;/p&gt;</description>
	<link>2020/12/what-constitutes-good-documentation.html</link>
	<author>Stephan H. Wissel</author>
	<guid>59413410-49d1-11eb-8863-8995f5850d98</guid>
	<pubDate>29 December 2020</pubDate>

</item>
<item>
	<title>Software distribution</title>
	<description>&lt;p&gt;Just download the binaries and run the installer. Would you need anything else for software distribution?&lt;/p&gt; 
&lt;h3&gt;The rise of the AppStore&lt;/h3&gt; 
&lt;p&gt;Mobile devices showed us the trend. Your Android device will load new apps from &lt;a href="https://play.google.com/"&gt;Google Play&lt;/a&gt; or Huawei's &lt;a href="https://appgallery.huawei.com/"&gt;AppGallery&lt;/a&gt; (or any of the &lt;a href="https://fossbytes.com/10-google-play-store-alternatives/"&gt;alternatives&lt;/a&gt;). On iOS, padOS, watchOS or tvOS, it is Apple's &lt;a href="https://www.apple.com/app-store/"&gt;AppStore&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;In the middle tier, Windows and macOS, the success is a mixed bag. Despite all attempts (Apple I'm looking at you), the bulk of apps are still "download and install". So each app has to implement its own update check (Unless you use &lt;a href="https://brew.sh/"&gt;Homebrew&lt;/a&gt; with its heritage in Linux).&lt;/p&gt; 
&lt;p&gt;In the enterprise this "poll request" approach is supplemented or surplanted by a push approach using tools like &lt;a href="https://www.jamf.com/"&gt;jamf&lt;/a&gt; (Mac only) or &lt;a href="https://www.hcltechsw.com/products/bigfix/home"&gt;BigFix&lt;/a&gt; (cross platform).&lt;/p&gt; 
&lt;h3&gt;Servers and components&lt;/h3&gt; 
&lt;p&gt;On Windows there is &lt;a href="https://docs.microsoft.com/en-us/windows-server/administration/windows-server-update-services/get-started/windows-server-update-services-wsus"&gt;Windows Server Update Services&lt;/a&gt;, which keeps your servers neat and updated and can &lt;a href="https://www.itprotoday.com/security/publishing-third-party-updates-wsus"&gt;update 3rd party software too&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;On &lt;a href="https://www.linuxfoundation.org/"&gt;Linux&lt;/a&gt; package managers have been established for quite a while any you find most software in &lt;a href="https://en.wikipedia.org/wiki/RPM_Package_Manager"&gt;rpm&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/Deb_(file_format)"&gt;deb&lt;/a&gt; or &lt;a href="https://snapcraft.io/"&gt;Snap&lt;/a&gt; format. Local package managers can be set up to install packages automatically based on criteria (e.g critical updates)&lt;/p&gt; 
&lt;p&gt;For Docker there is &lt;a href="https://hub.docker.com/"&gt;the Hub&lt;/a&gt;, for Java based packages &lt;a href="https://search.maven.org/"&gt;Maven central&lt;/a&gt; and for JavaScript based applications the &lt;a href="https://www.npmjs.com/"&gt;NPM registry&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;In the enterprise environment, you can find &lt;a href="https://jfrog.com/artifactory/"&gt;Artifactory&lt;/a&gt; or &lt;a href="https://www.sonatype.com/nexus/repository-pro"&gt;Nexus Repository&lt;/a&gt; as well as cloud based solutions like &lt;a href="https://azure.microsoft.com/en-us/services/devops/artifacts/"&gt;Azure Artifacts&lt;/a&gt;, &lt;a href="https://aws.amazon.com/codeartifact/"&gt;AWS CodeArtifact&lt;/a&gt; or &lt;a href="https://www.digitalocean.com/docs/container-registry/"&gt;DigitalOcean Container Registry&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Your application?&lt;/h3&gt; 
&lt;p&gt;With the ready availabily of repositories (App stores are nothing more than repositories with UI and billing), what does that demand from your app?&lt;/p&gt; 
&lt;p&gt;In short: &lt;strong&gt;make it easy to accquire and update your code&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;on mobile swallow the frog and publish to an app store&lt;/li&gt; 
 &lt;li&gt;on desktops: if your main customers are individuals, the app store might save you the headache of a good update strategy. When companies are your target: make it jamf / WSUS friendly&lt;/li&gt; 
 &lt;li&gt;on servers: a package repository, inlcuding the ability to deploy to a corporate repository is a must. This applies to updates too&lt;/li&gt; 
 &lt;li&gt;components: you need a registry. Should you consider none of the established public ones as suitable, provide your own&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Of course, you can consider &lt;em&gt;retro&lt;/em&gt; a charm and be left behind&lt;/p&gt; 
&lt;p&gt;As usual YMMV&lt;/p&gt;</description>
	<link>2020/12/software-distribution.html</link>
	<author>Stephan H. Wissel</author>
	<guid>42079290-3df0-11eb-85be-f5257d56bdd9</guid>
	<pubDate>14 December 2020</pubDate>

</item>

</channel>
</rss>
