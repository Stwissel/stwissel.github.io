<?xml version="1.0"?>
<rss version="2.0">
<channel>
	<title>wissel.net Usability - Productivity - Business - The web - Singapore and Twins</title>
	<link>https://wissel.net/blog/stories.rss</link>
	<description>Thoughts, Insights and Opinions of Stephan H. Wissel. Topics included: Salesforce, Lotus Notes and Domino, IBM Websphere, NodeJS, JavaScript,  J2EE, .Net, Software Archtecture, Personcentric Development, Agile Software, SDLC, Singapore and my Twins</description>
	<language>en,de</language>
	<copyright>(C) 2003 - 2021 Stephan H. Wissel, All rights reserved</copyright>
	<pubdate>Sat, 15 Jul 2023 16:51:57 +0000</pubdate>
<item>
	<title>Handle HTTP chunked responses</title>
	<description>&lt;p&gt;&lt;a href="https://github.com/features/actions"&gt;GitHub Actions&lt;/a&gt; are rapidly becoming my favorite CI environment. Their &lt;a href="https://github.com/marketplace?type=actions"&gt;marketplace&lt;/a&gt; has an action for everything. Sometimes it takes a little trial and error before things work smoothly. This is one of that stories.&lt;/p&gt;
&lt;h3&gt;Authentication is everything&lt;/h3&gt;
&lt;p&gt;Imagine the following scenario: you have developed a set of private TypeScript (or JavaScript) packages and have &lt;a href="https://docs.github.com/en/packages/quickstart"&gt;successfully deployed&lt;/a&gt; them to the &lt;strong&gt;private&lt;/strong&gt; GitHub npm registry under the name &lt;code&gt;@myfamousorg/coolpackage&lt;/code&gt; - where &lt;code&gt;myfamousorg&lt;/code&gt; must match the repository owner (org or individual).&lt;/p&gt;
&lt;p&gt;Now you want to use them in your application. That application shall be packed in a Container and made available in GitHub's private registry. All that automated using GitHub Actions.&lt;/p&gt;
&lt;h3&gt;You will need a PAT (or two)&lt;/h3&gt;
&lt;p&gt;In GitHub, head to the &lt;a href="https://github.com/settings/tokens"&gt;Personal access tokens / Tokens (classic)&lt;/a&gt; section of your developer settings in profile. You need to &lt;a href="https://github.com/settings/tokens/new"&gt;create tokens&lt;/a&gt; that allow you to handle packages.&lt;/p&gt;
&lt;p&gt;&lt;img src="/blog/images/2023/GitHubToken.png" alt="GitHub Tokens"&gt;&lt;/p&gt;
&lt;p&gt;There are two places where you want to enter that token:&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;In &lt;code&gt;https://github.com/[your-org]/[your-repo]/settings/secrets/actions&lt;/code&gt; create a key &lt;code&gt;GIT_NPM_PACKAGES&lt;/code&gt; and copy your PAT there. You can pick any name, you will need it in the GitHub action later&lt;/li&gt;
 &lt;li&gt;In &lt;code&gt;~/.npmrc&lt;/code&gt;, your global settings for npm in your home directory. Don't put the info in the &lt;code&gt;.npmrc&lt;/code&gt; in your git project.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class="language-properties"&gt;prefix=/home/[your username]/.npm-packages
@myfamousorg:registry=https://npm.pkg.github.com
//npm.pkg.github.com/:_authToken=[here goes the token]

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;prefix&lt;/code&gt; property allows you to run `npm install -g [package] without admin access.&lt;/p&gt;</description>
	<link>2023/07/deploy-nodejs-with-private-packages-in-docker.html</link>
	<author>Stephan H. Wissel</author>
	<guid>a81d27ba-4cf9-444d-99e6-c4813be2e9f4</guid>
	<pubDate>16 July 2023</pubDate>

</item>
<item>
	<title>Handle HTTP chunked responses</title>
	<description>&lt;p&gt;Objects &lt;a href="https://www.youtube.com/watch?v=nFDAK8NY4JY"&gt;I need a lot of objects&lt;/a&gt;. When dealing with APIs there is one fundamental question to answer: how much data do you want to retrieve?&lt;/p&gt;
&lt;p&gt;The old school answer: let's page results, &lt;a href="https://retrocomputing.stackexchange.com/questions/5629/why-did-80x25-become-the-text-monitor-standard"&gt;25 at a time&lt;/a&gt;. Then &lt;a href="https://www.nngroup.com/articles/infinite-scrolling-tips/"&gt;infinite scrolling came along&lt;/a&gt; and changed expectations.&lt;/p&gt;
&lt;h3&gt;I got some chunk for you&lt;/h3&gt;
&lt;p&gt;One way to operate is for the server to send all data, but using &lt;a href="https://en.wikipedia.org/wiki/Chunked_transfer_encoding"&gt;&lt;code&gt;Transfer-Encoding: chunked&lt;/code&gt;&lt;/a&gt; (&lt;a href="https://tools.ietf.org/html/rfc9112#section-7.1"&gt;RFC 9112&lt;/a&gt;) in the header and deliver data in several packages, aptly named chunks. A client can process each chunk on arrival to allow interactivity before data transmission concludes.&lt;/p&gt;
&lt;p&gt;However this requires adjustments on both sides. The server needs to send data with a clear delimiter, e.g. &lt;code&gt;\n&lt;/code&gt; (newline) and the client needs to process the data as a stream&lt;/p&gt;
&lt;h3&gt;The usual way won't work&lt;/h3&gt;
&lt;p&gt;We typically find code like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;fetch(url)
  .then((resp) =&amp;gt; resp.json())
  .then((json) =&amp;gt; {
    for (let row in json) {
      addRow(json[row], parentElement);
    }
  });
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API"&gt;&lt;code&gt;fetch&lt;/code&gt;&lt;/a&gt; hides a lot of complexity, we need to handle when we process a chunked result as it arrives.&lt;/p&gt;</description>
	<link>2023/07/handle-http-chunked-responses.html</link>
	<author>Stephan H. Wissel</author>
	<guid>a73f182a6-e51d-4c0f-9b95-10c640d637dd</guid>
	<pubDate>04 July 2023</pubDate>

</item>
<item>
	<title>Docker, nginx, SPA and brotli compression</title>
	<description>&lt;p&gt;Contemporary web development separates front-end and back-end, resulting in the front-end being a few static files. Besides setting long cache headers, pre-compression is one way to speed up delivery&lt;/p&gt;
&lt;h3&gt;Setting the stage&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;we have a NodeJS project that outputs our &lt;a href="https://en.wikipedia.org/wiki/Single-page_application"&gt;SPA&lt;/a&gt; in &lt;code&gt;/usr/dist&lt;/code&gt; directory. Highly recommended here: &lt;a href="https://vitejs.dev/"&gt;VITE&lt;/a&gt;. Works for multi-page applications too.&lt;/li&gt;
 &lt;li&gt;We target only &lt;a href="https://caniuse.com/?search=brotli"&gt;modern browsers&lt;/a&gt; that understand &lt;a href="https://github.com/google/brotli"&gt;brotli&lt;/a&gt; (Sorry not IE). Legacy will have to deal with uncompressed files&lt;/li&gt;
 &lt;li&gt;We want to go light on CPU, so we compress at build time, not runtime&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Things to know&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;When &lt;a href="https://www.nginx.com/"&gt;nginx&lt;/a&gt; is configured for brotli and the file &lt;code&gt;index.html&lt;/code&gt; gets requested, the file &lt;code&gt;index.html.br&lt;/code&gt; gets served if present and the browser indicated (what it does by default) that it can accept br&lt;/li&gt;
 &lt;li&gt;There are tons of information about the &lt;a href="https://www.sobyte.net/post/2022-04/docker-nginx-brotli/"&gt;need to compile nginx&lt;/a&gt; due to the lack of brotli support out of the box. That's not necessary (see below)&lt;/li&gt;
 &lt;li&gt;brotli is both OpenSource and the open standard &lt;a href="https://www.ietf.org/rfc/rfc7932.txt"&gt;RFC 7932&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;brotli currently &lt;a href="https://github.com/google/brotli/issues/970"&gt;lacks&lt;/a&gt; gzip's &lt;code&gt;-r&lt;/code&gt; flag, so some bash magic is needed&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Moving parts&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;DockerFile&lt;/li&gt;
 &lt;li&gt;nginx configuration&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The Dockerfile will handle the brotli generation&lt;/p&gt;</description>
	<link>2023/06/docker-nginx-spa-and-brotli-compression.html</link>
	<author>Stephan H. Wissel</author>
	<guid>61bc1e40-1231-11ee-a61a-ef046a8827ca</guid>
	<pubDate>24 June 2023</pubDate>

</item>
<item>
	<title>Deploy a TypeScript app using Docker</title>
	<description>&lt;p&gt;An application developed in TypeScript actually runs as JavaScript application. When deploying into a Docker image, wwe want to keep it small, here's how.&lt;/p&gt;
&lt;h3&gt;Docker with a side of Docker&lt;/h3&gt;
&lt;p&gt;Deployment has a few steps:&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Compile to JavaScript&lt;/li&gt;
 &lt;li&gt;Successfully run all test&lt;/li&gt;
 &lt;li&gt;Run code quality (e.g. &lt;a href="https://www.sonarsource.com/"&gt;Sonar&lt;/a&gt;)&lt;/li&gt;
 &lt;li&gt;Finally package all up into the smallest of containers&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Using &lt;a href="/blog/2023/05/tiptoe-in-typescript.html"&gt;last weeks example&lt;/a&gt; these are the moving parts.&lt;/p&gt;</description>
	<link>2023/06/deploy-a-typescript-app-using-docker.html</link>
	<author>Stephan H. Wissel</author>
	<guid>867f9fd0-02d3-11ee-b016-fb241bb51570</guid>
	<pubDate>04 June 2023</pubDate>

</item>
<item>
	<title>TipToe in TypeScript</title>
	<description>&lt;p&gt;&lt;a href="https://www.typescriptlang.org/"&gt;TypeScript&lt;/a&gt; is all the rage in JavaScript land and I'm enjoying the ride so far. I shall refrain from debating &lt;a href="https://www.google.com/search?q=typescript+vs.+javascript"&gt;TypeScript vs. JavaScript&lt;/a&gt; or &lt;a href="https://www.typescriptlang.org/play"&gt;geeting started&lt;/a&gt; activities. This article's focus getting a TypeScript (server side) project going in &lt;a href="https://code.visualstudio.com/"&gt;VSCode&lt;/a&gt;. It reflects what worked for me with my limited knowledge.&lt;/p&gt;
&lt;h3&gt;Who's at the party?&lt;/h3&gt;
&lt;p&gt;On a first look it seems, one just needs &lt;code&gt;tsc&lt;/code&gt; and all is good. However there are more &lt;a href="https://gist.github.com/Stwissel/889f1ee888d0d7dbe2c8933b3395ff81"&gt;moving parts involved&lt;/a&gt;, lets have a look:&lt;/p&gt;
&lt;p&gt;&lt;a href="/blog/images/2023/TypeScriptProjectLarge.png"&gt;&lt;img src="/blog/images/2023/TypeScriptProject.png" alt="TypeScript project"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;VSCode plugins, style and build automation shall be subject to a future post, lets focus on the TypeScript parts here. Let's get started with sample &lt;a href="https://expressjs.com/"&gt;ExpressJS&lt;/a&gt; project. My test framework of choice shall be &lt;a href="https://mochajs.org/"&gt;MochaJS&lt;/a&gt; with the &lt;a href="https://www.chaijs.com/"&gt;Chai assertion library&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;#!/bin/bash
# Setting up an Express TypeScript project
mkdir ts-demo
cd ts-demo
curl https://raw.githubusercontent.com/github/gitignore/main/Node.gitignore -o .gitignore
git init -q
npm init -y
npm install --save express
npm install --save-dev @types/express @types/node
npm install --save-dev chai chai-as-promised mocha ts-node ts-node-dev typescript
npm install --save-dev @types/chai @types/chai-as-promised @types/mocha
mkdir src
mkdir test
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We see, development has more dependencies than runtime. Note all the &lt;code&gt;@types&lt;/code&gt; packages are only needed in development, so the are added to the &lt;code&gt;devDependencies&lt;/code&gt; only.&lt;/p&gt;</description>
	<link>2023/05/tiptoe-in-typescript.html</link>
	<author>Stephan H. Wissel</author>
	<guid>074ae390-02a2-11ee-b513-f3e10907e2b5</guid>
	<pubDate>31 May 2023</pubDate>

</item>
<item>
	<title>Develop your SPA with vite</title>
	<description>&lt;p&gt;You drank the &lt;a href="https://en.wikipedia.org/wiki/Single-page_application"&gt;SPA&lt;/a&gt; coolaid to develop with &lt;a href="https://opensource.hcltechsw.com/Domino-rest-api/index.html"&gt;KEEP&lt;/a&gt;. While you can use &lt;a href="https://angular.io"&gt;the&lt;/a&gt; &lt;a href="https://react.dev"&gt;usual&lt;/a&gt; &lt;a href="https://svelte.dev"&gt;suspects&lt;/a&gt;, most cases &lt;a href="https://www.javatpoint.com/what-is-vanilla-javascript"&gt;Vanilla JS&lt;/a&gt; will do fine: one each of &lt;code&gt;index.html&lt;/code&gt;, &lt;code&gt;index.css&lt;/code&gt; and &lt;code&gt;index.js&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;The preview problem&lt;/h3&gt;
&lt;p&gt;Since the files are static, throw them on the server a you are good - of course your regular operation gets disrupted. Throw them on a preview server and your calls to &lt;code&gt;/api/...&lt;/code&gt; will fail. You could hack around by providing full URLs, you just enter &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS"&gt;CORS hell&lt;/a&gt; then.&lt;/p&gt;
&lt;h3&gt;viteJS to the rescue&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://vitejs.dev"&gt;viteJS&lt;/a&gt; brands itself as "&lt;em&gt;Next Generation Frontend Tooling&lt;/em&gt;" with the catchy tagline "&lt;em&gt;Get ready for a development environment that can finally catch up with you&lt;/em&gt;". Let's give it a spin:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;npm create vite@latest
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The result is simple&lt;/p&gt;
&lt;p&gt;&lt;img src="/blog/images/2023/viteStart.png" alt="Vite start"&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;package.json&lt;/code&gt; lists &lt;strong&gt;no&lt;/strong&gt; runtime dependencies and you can run &lt;code&gt;npm run dev&lt;/code&gt; to preview the sample page.&lt;/p&gt;
&lt;h3&gt;Adding the proxy&lt;/h3&gt;
&lt;p&gt;When starting vite, it looks for &lt;a href="https://vitejs.dev/config/"&gt;&lt;code&gt;vite.config.js&lt;/code&gt;&lt;/a&gt; for settings. There you can specify all needed proxy settings.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;import { defineConfig } from 'vite';

// https://vitejs.dev/config/
export default defineConfig({
  server: {
    proxy: {
      '/api': 'http://localhost:8880',
      '/.well-known': 'http://localhost:8880'
    }
  }
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;vite.config.js&lt;/code&gt; allows for sophisticated configuration like conditional settings (think testing against dev, staging, production), which is up to you to evaluate.&lt;/p&gt;
&lt;p&gt;Using &lt;code&gt;npm run build&lt;/code&gt; vite works its magic to build a combined distributable app, SPA or otherwise.&lt;/p&gt;
&lt;p&gt;As ususal YMMV&lt;/p&gt;</description>
	<link>2023/04/develop-your-spa-with-vite.html</link>
	<author>Stephan H. Wissel</author>
	<guid>303976e0-e34e-11ed-9d33-933d38277195</guid>
	<pubDate>25 April 2023</pubDate>

</item>
<item>
	<title>Tabs vs Spaces - Mozilla changes sides</title>
	<description>&lt;p&gt;In a surprise move the &lt;a href="https://foundation.mozilla.org/en/"&gt;Mozilla Foundation&lt;/a&gt; announced to join team &lt;code&gt;spaces&lt;/code&gt; in the ongoing developer dispute &lt;a href="https://www.reddit.com/r/programming/comments/p1j1c/tabs_vs_spaces_vs_both/"&gt;Tabs vs. Spaces&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Rationale and Value proposition&lt;/h3&gt;
&lt;p&gt;In a &lt;a href="https://wiki.mozilla.org/Do_Not_Fool"&gt;recent statement&lt;/a&gt; Mozilla confirmed: "_We are seeing the errors of our way being team &lt;code&gt;tabs&lt;/code&gt; for &lt;a href="https://en.wikipedia.org/wiki/Tab_(interface)"&gt;so long&lt;/a&gt;_". Mozilla sees an number of advantages in the switch from &lt;code&gt;tabs&lt;/code&gt; to &lt;code&gt;spaces&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Differentiation: IE, Edge, Chrome, Safari, Brave and all the other browsers will look dated compared to the spaces based &lt;a href="https://www.mozilla.org/en-US/firefox/new/"&gt;Firefox&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;Freedom from &lt;a href="https://patents.google.com/patent/US20070136665A1/en"&gt;patent US20070136665A1&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;Value delivery: a tab only delivers a paltry &lt;code&gt;HEX09&lt;/code&gt;, while a single space delivers already a &lt;code&gt;HEX20&lt;/code&gt; and gets delivered two to four times in the same visual space&lt;/li&gt;
 &lt;li&gt;Upgradable: &lt;code&gt;HEX20&lt;/code&gt; can be upgraded to &lt;code&gt;HEXA0&lt;/code&gt; with no optical change (OK, your &lt;a href="https://yaml.org/"&gt;YAML&lt;/a&gt; will break, but it will break anyway)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Consequences&lt;/h3&gt;
&lt;p&gt;Mozilla will rollout "Firefox Spaces" in phases:&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;In the first interation warnings will be generated if a site you visit uses tabs. The warnings are on the console only&lt;/li&gt;
 &lt;li&gt;Phase 2 will feature warning banner overlays&lt;/li&gt;
 &lt;li&gt;Phase 3 will see the replacment of tab navigation by "Firefox in Space"&lt;/li&gt;
 &lt;li&gt;Finally sites using tabs will be blocked and reported to &lt;a href="https://www.nist.gov/cyberframework"&gt;NIST's Cyber division&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As usual &lt;a href="https://en.wikipedia.org/wiki/April_Fools%27_Day"&gt;YMMV&lt;/a&gt;&lt;/p&gt;</description>
	<link>2023/04/tabs-vs-spaces-mozilla-changes-sides.html</link>
	<author>Stephan H. Wissel</author>
	<guid>fc6f48a0-d086-11ed-b815-e39bf3008cd8</guid>
	<pubDate>01 April 2023</pubDate>

</item>
<item>
	<title>KPI measurements and feedback loops</title>
	<description>&lt;p&gt;Commonly attributed to &lt;a href="https://en.wikipedia.org/wiki/Peter_Drucker"&gt;Peter Drucker&lt;/a&gt; a cornerstone of management is "&lt;em&gt;If you can?t measure it, you can?t manage it.&lt;/em&gt;" (which according to the Drucker Institute &lt;a href="https://www.drucker.institute/thedx/measurement-myopia/"&gt;he never said&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;It's a &lt;a href="https://dictionary.cambridge.org/dictionary/english/be-damned-if-do-and-damned-if-don-t"&gt;Damned anyhow&lt;/a&gt; situation. In my oberservation KPIs are plagued by linear thinking and, what I call &lt;a href="https://en.wikipedia.org/wiki/Goodhart%27s_law"&gt;Gamability&lt;/a&gt;. Let me explain&lt;/p&gt;
&lt;h3&gt;Meet the feedback loop&lt;/h3&gt;
&lt;p&gt;We are caught in a "newtonish" world of belief that there is a linear relationship between a cause and effect. Most notably visible in &lt;a href="https://en.wikipedia.org/wiki/Postmortem_documentation"&gt;post mortem&lt;/a&gt; demand for a &lt;a href="https://en.wikipedia.org/wiki/Root_cause_analysis"&gt;root cause analysis&lt;/a&gt; (At least science gives &lt;a href="https://en.wikipedia.org/wiki/Ceteris_paribus"&gt;ceteris paribus&lt;/a&gt; a thougth).&lt;/p&gt;
&lt;p&gt;In his book &lt;a href="https://amzn.to/3ZteCJO"&gt;The Fifth Discipline&lt;/a&gt; the author &lt;a href="https://en.wikipedia.org/wiki/Peter_Senge"&gt;Peter M. Senge&lt;/a&gt; offers a different view and model. Most system, from small atomic particles to the Universe are bound in a series of feedback loops. The emphasis here is on &lt;strong&gt;loops&lt;/strong&gt; -&amp;gt; plural. The various execution speeds lead to observable results, that can't be explained with single linear thinking.&lt;/p&gt;
&lt;p&gt;Let's take a sweet example, that should be easy to relate:&lt;/p&gt;
&lt;p&gt;&lt;img src="/blog/images/2023/FoodFeedback.png" alt="Chololate eating and happiness"&gt;&lt;/p&gt;
&lt;p&gt;You don't feel happy, so you eat your favorite food. Now your happy. Two (obviously simplified) feedback loops kick off. The red lines indicate that the loops work with a delay.&lt;/p&gt;
&lt;p&gt;The upper one removes the "favorite" from the food, while the lower one removes the hapiness inducing effect. Pretty obvious and as I said grossly simplified.&lt;/p&gt;</description>
	<link>2023/03/kpi-measurements-and-feedback-loops.html</link>
	<author>Stephan H. Wissel</author>
	<guid>7f3a5b80-ceca-11ed-bdbe-ed7f5d57cddc</guid>
	<pubDate>30 March 2023</pubDate>

</item>
<item>
	<title>POPIAH - an agile journey in 8 iterations</title>
	<description>&lt;p&gt;In a recent chat a store manager shared how tedious the annual physical stock taking is, since the company doesn't provide handheld barcode scanners. Why not use your phone I replied. So after a short discussion it was agreed to build a &lt;a href="https://www.productplan.com/glossary/minimum-viable-product/"&gt;MVP&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The geek corner of my brain went into overdrive: databases, authentication, protocols, libraries - the whole shebang. If you don't reign into that, you end up with the famous "swing design"&lt;/p&gt;
&lt;p&gt;&lt;img src="/blog/images/2023/treeswing.jpg" alt="Swing design, the customer wanted a tire"&gt;&lt;br&gt;&lt;br&gt;
  (shamelessly borrowed &lt;a href="https://socialsci.libretexts.org/Courses/Southwest_Tennessee_Community_College/Competent_Communication/01%3A_Introduction_to_Competent_Communication/1.02%3A_The_Process_of_Communication?readerView"&gt;from here&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Luckily there's the agile way: add value incrementally. Our increment frequency was one improvement per 15min, tiny step by step ;-).&lt;/p&gt;
&lt;p&gt;The result is POPIAH: &lt;strong&gt;P&lt;/strong&gt;oor &lt;strong&gt;O&lt;/strong&gt;perator's &lt;strong&gt;P&lt;/strong&gt;ersonal &lt;strong&gt;I&lt;/strong&gt;nventory &lt;strong&gt;A&lt;/strong&gt;ssessment &lt;strong&gt;H&lt;/strong&gt;elper (not &lt;a href="https://en.wikipedia.org/wiki/Popiah"&gt;that one&lt;/a&gt;). The final (for now - pending making it pretty) result looks like this:&lt;/p&gt;
&lt;div style="text-align : center"&gt;
 &lt;p&gt;&lt;img src="/blog/images/2023/POPIAH_result.png" alt="Application screenshot"&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h2&gt;Step by step&lt;/h2&gt;
&lt;p&gt;Our epics (defined looking back) were:&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;make scanning work&lt;/li&gt;
 &lt;li&gt;make the screen useful&lt;/li&gt;
 &lt;li&gt;allow using the data elsewhere&lt;/li&gt;
&lt;/ul&gt;</description>
	<link>2023/03/popiah-an-agile-journey.html</link>
	<author>Stephan H. Wissel</author>
	<guid>2ee20120-ba65-11ed-97fc-17798ed6a7c6</guid>
	<pubDate>04 March 2023</pubDate>

</item>
<item>
	<title>TOTP and vert.x</title>
	<description>&lt;p&gt;Time-based one-time passwords (&lt;a href="https://en.wikipedia.org/wiki/Time-based_one-time_password"&gt;TOTP&lt;/a&gt;) are a common security feature in Identity Providers (&lt;a href="https://en.wikipedia.org/wiki/Identity_provider"&gt;IdP&lt;/a&gt;). There are use cases beyond IdP, mine was "Understanding what &lt;a href="https://www.twilio.com/docs/glossary/totp"&gt;it takes&lt;/a&gt;").&lt;/p&gt;
&lt;h3&gt;TOTP interaction&lt;/h3&gt;
&lt;p&gt;You have two phases: enrollment and use. During enrollment a secret is generated and (typically) presented as &lt;a href="https://en.wikipedia.org/wiki/QR_code"&gt;QR Code&lt;/a&gt;. A user points &lt;a href="https://authy.com"&gt;one&lt;/a&gt; &lt;a href="https://play.google.com/store/apps/details?id=com.google.android.apps.authenticator2"&gt;of&lt;/a&gt; &lt;a href="https://www.microsoft.com/en-us/security/mobile-authenticator-app"&gt;the&lt;/a&gt; many Authenticator &lt;a href="https://www.pcmag.com/picks/the-best-authenticator-apps"&gt;apps&lt;/a&gt; to it and gets a numeric code that changes once a minute.&lt;/p&gt;
&lt;p&gt;When you use it, you pick the current number and paste it into the provided field. The backend validates the correctness with some time leeway.&lt;/p&gt;
&lt;h3&gt;What it is not&lt;/h3&gt;
&lt;p&gt;Typically when enrolling you also get recovery codes, sometimes called &lt;em&gt;scratch codes&lt;/em&gt;. They are &lt;strong&gt;NOT&lt;/strong&gt; part of TOTP and implementation is site specific and not standardized. An implementer might choose to check your recovery codes when your TOTP fails or provide a separate interaction using those.&lt;/p&gt;
&lt;p&gt;The initial confirmation, is actually the first instance of "&lt;strong&gt;use&lt;/strong&gt;" and one could have a successful enrollment without it. This is depending on the implementation.&lt;/p&gt;
&lt;p&gt;It isn't &lt;a href="https://www.brainyquote.com/quotes/douglas_adams_109728"&gt;foolproof&lt;/a&gt;. An attacker could trick you into typing your TOTP code into a spoofed form or just hijack your &lt;a href="https://en.wikipedia.org/wiki/Session_hijacking"&gt;session (cookie)&lt;/a&gt;. That's why responsible web apps run a tight security with &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP"&gt;CSP&lt;/a&gt; and &lt;a href="https://letsencrypt.org"&gt;TLS&lt;/a&gt; (and once browser support is better &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Permissions-Policy"&gt;Permission Policy&lt;/a&gt;)&lt;/p&gt;
&lt;h3&gt;Setting up a sample application&lt;/h3&gt;
&lt;p&gt;We need a landing page and its supporting files (css, js, png) served statically and 3 routes:&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;request&lt;/li&gt;
 &lt;li&gt;save&lt;/li&gt;
 &lt;li&gt;verify&lt;/li&gt;
&lt;/ul&gt;</description>
	<link>2023/02/totp-and-vertx.html</link>
	<author>Stephan H. Wissel</author>
	<guid>1d0ec360-a698-11ed-bf05-29eb7d3f90a2</guid>
	<pubDate>07 February 2023</pubDate>

</item>

</channel>
</rss>
