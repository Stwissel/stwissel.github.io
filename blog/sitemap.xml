<?xml version="1.0"?>
<rss version="2.0">
<channel>
	<title>wissel.net Usability - Productivity - Business - The web - Singapore and Twins</title>
	<link>https://wissel.net/blog/stories.rss</link>
	<description>Thoughts, Insights and Opinions of Stephan H. Wissel. Topics included: Salesforce, Lotus Notes and Domino, IBM Websphere, NodeJS, JavaScript,  J2EE, .Net, Software Archtecture, Personcentric Development, Agile Software, SDLC, Singapore and my Twins</description>
	<language>en,de</language>
	<copyright>(C) 2003 - 2019 Stephan H. Wissel, All rights reserved</copyright>
	<pubdate>Sat, 28 Nov 2020 08:29:44 +0000</pubdate>
<item>
	<title>Schema mapping with Java functional interfaces</title>
	<description>&lt;p&gt;Mapping one data structure into another is a never ending chore since COBOL's &lt;code&gt;MOVE CORRESPONDING&lt;/code&gt;. One to one mappings are trivial, onnce computation is needed, clean code can become messy, really fast&lt;/p&gt; 
&lt;h3&gt;Map with Functions&lt;/h3&gt; 
&lt;p&gt;We will use the following, simplified, scenario with source and target formats:&lt;/p&gt; 
&lt;pre class="brush: json"&gt;{
	"FirstName" : "Peter",
	"LastName" : "Pan",
	"DoB" : "1873-11-23",
	"ToC" : "accepted",
	"Marketing" : "no"
}
&lt;/pre&gt; 
&lt;p&gt;Desired Result:&lt;/p&gt; 
&lt;pre class="brush: json"&gt;{
	"fullname" : "Peter Pan",
	"birthday" : "1873-11-23",
	"gdpr" : true
}
&lt;/pre&gt; 
&lt;p&gt;In our case only &lt;code&gt;DoB&lt;/code&gt; has a simple mapping to &lt;code&gt;birthday&lt;/code&gt; all others need computation or are dropped. So to keep code clean we will use a map with mapping functions, so each computation can be in its own method. The defaults 1:1 and drop functions get defined first.&lt;/p&gt; 
&lt;pre class="brush: java"&gt;final Map&amp;lt;String, Function&amp;lt;JsonObject, JsonObject&amp;gt;&amp;gt; functionList = new HashMap&amp;lt;&amp;gt;();

Function&amp;lt;JsonObject, JsonObject&amp;gt; simple(final String fieldNameIn, final String fieldNameOut) {
	return in -&amp;gt; new JsonObject().put(fieldNameOut, in.getValue(fieldNameIn));
}

Function&amp;lt;JsonObject, JsonObject&amp;gt; drop() {
	return in -&amp;gt; new JsonObject();
}

&lt;/pre&gt; 
&lt;p&gt;Each of the functions returns an Json object that &lt;strong&gt;only&lt;/strong&gt; returns a value for the one field it gets called for. We will use a collector to aggregate the values. Since we are planning to use streams and functional interfaces, we need a helper class.&lt;/p&gt; 
&lt;pre class="brush: java"&gt;class MapHelper() {
	JsonObject source;
	Function&amp;lt;JsonObject, JsonObject&amp;gt; mapper;
	JsonObject apply() {
		return this.mapper.apply(this.source);
	}
}

MapHelper getMapHelper(final JsonObject source, final Map.Entry&amp;lt;String, Object&amp;gt; incoming) {
    MapHelper result = new MapHelper();
    result.source = source;
    result.mapper = this.functionList.getOrDefault(incoming.getKey(), drop());
    return result;
  }
&lt;/pre&gt; 
&lt;p&gt;Since each function will return some JSON, that needs to be merged together, we use a Java &lt;a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Collector.html"&gt;Collector&lt;/a&gt; to accumulate the values.&lt;/p&gt;</description>
	<link>2020/11/schema-mapping-with-java-functional-interfaces.html</link>
	<author>Stephan H. Wissel</author>
	<guid>3c53a360-3149-11eb-b6d9-332622ac7adf</guid>
	<pubDate>28 November 2020</pubDate>

</item>
<item>
	<title>Streams and Functional programming in Java</title>
	<description>&lt;p&gt;I'm late to the party embracing &lt;a href="https://www.baeldung.com/java-8-streams"&gt;Streams&lt;/a&gt; and &lt;a href="https://www.baeldung.com/java-8-functional-interfaces"&gt;functional interfaces&lt;/a&gt; in Java. Using them for a while taught me the beauty and how things fit together nicely&lt;/p&gt; 
&lt;h3&gt;Moving parts&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;At the beginning a class implementing the &lt;a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html"&gt;Stream interface&lt;/a&gt; emits items, that can be manipulated using &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;filter&lt;/code&gt; operationf&lt;/li&gt; 
 &lt;li&gt;The map and filter operations are supported by the Interfaces in &lt;a href="https://docs.oracle.com/javase/8/docs/api/java/util/function/package-summary.html"&gt;java.util.function&lt;/a&gt; (we get to the samples later)&lt;/li&gt; 
 &lt;li&gt;At the end the result gets "collected", in its simplest form using &lt;code&gt;.forEach&lt;/code&gt; or, more sophisticated using a &lt;a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Collector.html"&gt;Collector&lt;/a&gt; with many &lt;a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Collectors.html"&gt;ready baked options&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;What's the big deal?&lt;/h3&gt; 
&lt;p&gt;short answer: clean, terse and clutter free code.&lt;/p&gt; 
&lt;p&gt;long answer: an example. Lets say you have a &lt;code&gt;mammal&lt;/code&gt; class which gets subclassed by &lt;code&gt;cat&lt;/code&gt; and &lt;code&gt;dog&lt;/code&gt; (and others). You have a collection of these mamals and need to extract all dogs over weight 50. Weight is not a property of mammal. There might be null values in your collection. Classic code would look like this:&lt;/p&gt; 
&lt;pre class="brush: java"&gt;List&amp;lt;Dog&amp;gt; getHeavyDogs(final List&amp;lt;Mammal&amp;gt; mammals) {
    List&amp;lt;Dog&amp;gt; result = new ArrayList&amp;lt;&amp;gt;();
    for (int i = 0; i &amp;lt; mammals.size(); i++) {
      Mammal mammal = mammals.get(i);
      if (mammal != null) {
        if (mammal instanceof Dog &amp;amp;&amp;amp; ((Dog) mammal).weight() &amp;gt; 50) {
          result.add((Dog) mammal);
        }
      }
    }
    return result;
  }
&lt;/pre&gt; 
&lt;p&gt;We all seen this type of code. In a functional and stream style this would look different. We have a little &lt;a href="https://en.wikipedia.org/wiki/Duck_typing"&gt;duck typing&lt;/a&gt; going on here. When a method looks like a functional interface, it can be used as this function. E.g. a method that takes one value and returns a boolean can be used as a &lt;a href="https://docs.oracle.com/javase/8/docs/api/java/util/function/Predicate.html"&gt;Predicate&lt;/a&gt;, which comes in handy for filter operations. Another nifty syntax: you can address methods, both static and instance using the &lt;code&gt;::&lt;/code&gt; (double colon) syntax. So when you could use a lambda &lt;code&gt;x -&amp;gt; this.doSomething(x)&lt;/code&gt; you can simply write &lt;code&gt;this::doSomething&lt;/code&gt; and the compiler will sort it out (&lt;code&gt;System.out::println&lt;/code&gt; anyone?)&lt;/p&gt;</description>
	<link>2020/11/streams-and-functional-programming-in-java.html</link>
	<author>Stephan H. Wissel</author>
	<guid>1df8e500-1f8e-11eb-a4c5-4bd0df64c996</guid>
	<pubDate>06 November 2020</pubDate>

</item>
<item>
	<title>Deploying your static app to your backend repo using GitHub Actions</title>
	<description>&lt;p&gt;Our solution has two parts: a backend written in JavaScript, providing the API and a front-end created in Angular, Ionic, React or whatever is the flavor of the day. Usually you would deploy a &lt;a href="https://www.nginx.com/"&gt;web server&lt;/a&gt; to handle the URL, host the static files and have it redirect the &lt;code&gt;/api&lt;/code&gt; URL to our backend.&lt;/p&gt; 
&lt;p&gt;However there might be &lt;a href="https://www.heroku.com/"&gt;reasons&lt;/a&gt; (or &lt;a href="https://cloud.ibm.com/"&gt;that&lt;/a&gt;) that we can't or &lt;a href="https://kubernetes.io/docs/concepts/services-networking/ingress/"&gt;don't want to access&lt;/a&gt; the web server and need to serve your front-end app from the &lt;code&gt;/static&lt;/code&gt; directory of our backend.&lt;/p&gt; 
&lt;h3&gt;Planning and a little YAML&lt;/h3&gt; 
&lt;p&gt;Merging the two repositories seems initially an easy option, it just would break our workflows, so a different solution needs to be devised. The ask is simple:&lt;/p&gt; 
&lt;p&gt;&lt;img src="/blog/images/2020/StaticHosting.png" alt="Merging UI files into the back-end"&gt;&lt;/p&gt; 
&lt;p&gt;Whenever a change happens in the &lt;code&gt;main&lt;/code&gt; branch of the front-end application (mostly through an approved pull request), the application should be build and the result transfered to the back-end application where a pull request merges it into &lt;code&gt;main&lt;/code&gt;. Duplicate approvals shall be avoided. So we need:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Automatic build on push to main&lt;/li&gt; 
 &lt;li&gt;Pull / Push the bundle changes from front-end to the back-end&lt;/li&gt; 
 &lt;li&gt;Create a pull request and merge it in back-end&lt;/li&gt; 
&lt;/ol&gt;</description>
	<link>2020/10/deploying-your-static-app-to-your-backend-repo.html</link>
	<author>Stephan H. Wissel</author>
	<guid>28b45380-0657-11eb-b7f2-a398fdcdf824</guid>
	<pubDate>04 October 2020</pubDate>

</item>
<item>
	<title>Architectural Decisions</title>
	<description>&lt;p&gt;"&lt;em&gt;Architecture represents the significant design decisions that shape a system,&lt;br&gt; where significant is measured by cost of change.&lt;/em&gt;"&lt;/p&gt; 
&lt;p&gt;-- &lt;a href="https://en.wikipedia.org/wiki/Grady_Booch"&gt;Grady Booch&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;In &lt;a href="https://amzn.to/2Zh2S17"&gt;real architecture&lt;/a&gt; it is obvious, when thee foundation is completed and the stories of your building rise, there's no way to swap out the foundations without demolition and starting over.&lt;/p&gt; 
&lt;p&gt;In &lt;a href="https://amzn.to/3bB3tQ0"&gt;software architecture&lt;/a&gt; it is less obvious, but nevertheless similar important not to send in the demolition crew half way into delivery.&lt;/p&gt; 
&lt;p&gt;While in construction you demolition crew easily can be identified by hard hats, orange vests and &lt;a href="https://www.askkentay.com/wp-content/uploads/2018/03/wrecking-ball.jpg"&gt;heavy machinery&lt;/a&gt;, your software demolition crew often comes disguised as &lt;em&gt;concerned stakeholder&lt;/em&gt; questioning fundamental decisions over and over (out of a variety of motives). So it is paramount to document your archtectural decisions well.&lt;/p&gt; 
&lt;h3&gt;Decisions, Justification, Alternatives, Impact&lt;/h3&gt; 
&lt;p&gt;Our typical architecture decision documentation starts, duh, with the table of content (unless that sits in a sidebar) and an overview of your architecture. One or more diagrams to provide an overview are well placed here.&lt;/p&gt; 
&lt;p&gt;Now number the decisions, so they can be refered to by their shortform (e.g AD45) rather than their full title. For larger or delicate system, you want to place each decision on their own page, not at least to be able to extract one (as PDF) for customer sign up. While it is tempting to use a word processor, I'd argue to use an engineering format like markdown or, when complexity justifies it, &lt;a href="https://en.wikipedia.org/wiki/Darwin_Information_Typing_Architecture"&gt;DITA&lt;/a&gt;. Document format and storage could be considered primordial architectural decisions.&lt;/p&gt; 
&lt;p&gt;Each decision needs to provide four elements:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;Decision&lt;/strong&gt;&lt;br&gt;What have you decided. A factual statement. Something along the line "&lt;em&gt;Our choosen programming language is COBOL&lt;/em&gt;"&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Justification&lt;/strong&gt;&lt;br&gt; Outline why. It should cover features, cost, skills. You don't need to state why the alternative failed in your considerations&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Alternatives&lt;/strong&gt;&lt;br&gt;What have you looked at, what made you reject the alternative possibiliy. We need to be careful, &lt;a href="https://en.wikipedia.org/wiki/Analysis_paralysis"&gt;analysis paralysis&lt;/a&gt; lurks here. There is always another framework, language or database you could consider. This is also the area where our "friendly" demolition crew will try to stall us&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Impact&lt;/strong&gt;&lt;br&gt;Serves are a reinforcement of &lt;em&gt;Justification&lt;/em&gt;, but extends, when appropriate, on potential risk and its mitigation. It is an important section, nevertheless our "&lt;em&gt;Reichsbedenkentr??ger&lt;/em&gt;" (loosely translated as "&lt;em&gt;Imperial wardens of concern&lt;/em&gt;") lurk here. So stay concise to the point. You don't write a PHD thesis here.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Depending on the impact of the system (malefunktion threatens life, threatens assets or requires to hit reload in the browser) you need to spend more or less time on it. For a refresher on this concepts, have a look at &lt;a href="https://en.wikipedia.org/wiki/Analysis_paralysis"&gt;Crystal Clear&lt;/a&gt; page xvi in the preface.&lt;/p&gt;</description>
	<link>2020/09/architectural-decisions.html</link>
	<author>Stephan H. Wissel</author>
	<guid>104f5f80-f101-11ea-9db3-55dd0fb67ebe</guid>
	<pubDate>07 September 2020</pubDate>

</item>
<item>
	<title>Domino Docker and Debugging</title>
	<description>&lt;p&gt;Given that Domino once was build to run on 486 capacity of servers, Docker and &lt;a href="https://www.docker.com/blog/why-domino-is-using-docker/"&gt;Domino&lt;/a&gt; are posed to be a match made in heaven (eventually). Jesse shared shared his &lt;a href="https://frostillic.us/blog/posts/2020/6/28/weekend-domino-apps-in-docker-experimentation"&gt;Weekend Domino-Apps-in-Docker Experimentation&lt;/a&gt;, Paul shared his &lt;a href="https://paulswithers.github.io/blog/2019/12/04/domino-on-docker"&gt;learning points&lt;/a&gt; and &lt;a href="http://blog.nashcom.de/"&gt;Daniel&lt;/a&gt; provided the invaluable &lt;a href="https://github.com/IBM/domino-docker"&gt;Domino on Docker build scripts&lt;/a&gt;. So it's time to contribute my share. The topic is slightly more exotic&lt;/p&gt; 
&lt;h3&gt;Debug a Java application running on Domino in a Docker container&lt;/h3&gt; 
&lt;p&gt;Before we can get cooking, we need to know what ingredients we need:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The &lt;a href="https://github.com/IBM/domino-docker"&gt;Domino on Docker build scripts&lt;/a&gt; including the required Domino Linux installer&lt;/li&gt; 
 &lt;li&gt;Some general understanding how Daniel's &lt;a href="https://www.nashcom.de/nshweb/pages/startscript.htm"&gt;Domino Startup Script&lt;/a&gt; works&lt;/li&gt; 
 &lt;li&gt;Docker desktop installed on our machine (I use macOS, but I know &lt;a href="https://twitter.com/lotusgeek"&gt;someone&lt;/a&gt;, who can share his Windows experience)&lt;/li&gt; 
 &lt;li&gt;Basic understanding of &lt;a href="https://docs.docker.com/get-started/"&gt;Docker&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;A &lt;a href="https://www.projectkeep.io"&gt;Java project&lt;/a&gt; that shall be debugged. I use &lt;a href="https://maven.apache.org/"&gt;Apache Maven&lt;/a&gt;, as discussed &lt;a href="blog/2020/04/my-maven-starter-template.html"&gt;before&lt;/a&gt;, but &lt;a href="https://gradle.org/"&gt;Gradle&lt;/a&gt; will do just fine&lt;/li&gt; 
 &lt;li&gt;Understanding how to &lt;a href="https://www.vogella.com/tutorials/EclipseDebugging/article.html"&gt;debug Java&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Our objective&lt;/strong&gt;: Create a Domino image that loads the Java application from its host file system, so we do not need to rebuild the container on Java changed. An instance of this image shall allow to connect a debugger to that Java application&lt;/p&gt; 
&lt;h3&gt;Foundation: the Domino image&lt;/h3&gt; 
&lt;p&gt;First we have to build a Domino Docker image, configure a server using a docker volume. This has been mapped out in the &lt;a href="https://github.com/IBM/domino-docker"&gt;domino-docker&lt;/a&gt; project and its &lt;a href="https://ibm.github.io/domino-docker/"&gt;slighly hidden documentation&lt;/a&gt;. Just a quick recap:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Build the image using &lt;code&gt;./build domino&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Create a volume using &lt;code&gt;docker volume create keep_data&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Run the instance once to setup the domino&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre class="brush: bash"&gt;docker run -it -e "ServerName=Server1" \
    -e "OrganizationName=MyOrg" \
    -e "AdminFirstName=Doctor" \
    -e "AdminLastName=Notes" \
    -e "AdminPassword=passw0rd" \
    -h myserver.domino.local \
    -p 80:80 \
    -p 1352:1352 \
    -v keep_data:/local/notesdata \
    --stop-timeout=60 \
    --name server1 \
    hclcom/domino:11.0.1
&lt;/pre&gt; 
&lt;p&gt;We shut down the instance once you have confirmed it works. We don't need it thereafter, we only need the volume and image. Of course there's no harm keeping it around&lt;/p&gt;</description>
	<link>2020/06/domino-docker-and-debugging.html</link>
	<author>Stephan H. Wissel</author>
	<guid>b5fa2260-ba8f-11ea-843f-49ef93cd2958</guid>
	<pubDate>30 June 2020</pubDate>

</item>
<item>
	<title>Watching the EventBus</title>
	<description>&lt;p&gt;I'm quite fond of &lt;a href="https://en.wikipedia.org/wiki/Event-driven_architecture"&gt;Event-driven architecture&lt;/a&gt;, so to no surprise, I like vert.x's &lt;a href="https://vertx.io/docs/vertx-core/js/#event_bus"&gt;EventBus&lt;/a&gt; and its ability to enable &lt;a href="https://searchsoftwarequality.techtarget.com/definition/polyglot-programming"&gt;polyglot programming&lt;/a&gt;. So it is time to have a closer look&lt;/p&gt; 
&lt;h3&gt;Dem Volk aufs Maul geschaut&lt;/h3&gt; 
&lt;p&gt;(That's a word play on &lt;a href="https://www.eva-leipzig.de/product_info.php?info=p2961_Dem-Volk-aufs-Maul-geschaut.html"&gt;Martin Luther&lt;/a&gt; loosly translated as "Watch them how they talk")&lt;/p&gt; 
&lt;p&gt;I wanted to know, what exactly is happening "on the wire", without disrupting the regular flow. Turns out, there is an easy way to do this. The vert.x EventBus provides the methods &lt;a href="https://vertx.io/docs/apidocs/io/vertx/core/eventbus/EventBus.html#addOutboundInterceptor-io.vertx.core.Handler-"&gt;addOutboundInterceptor&lt;/a&gt; and &lt;a href="https://vertx.io/docs/apidocs/io/vertx/core/eventbus/EventBus.html#addInboundInterceptor-io.vertx.core.Handler-"&gt;addInboundInterceptor&lt;/a&gt; that provide you with access to a Handler with a &lt;a href="https://vertx.io/docs/apidocs/io/vertx/core/eventbus/DeliveryContext.html"&gt;DeliveryContext&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;From there you can get to the &lt;a href="https://vertx.io/docs/apidocs/io/vertx/core/eventbus/Message.html"&gt;Message&lt;/a&gt; or directly the message's body. So I took it for a spin in conjunction with a Websocket. This allows me to watch as the messages flow through:&lt;/p&gt; 
&lt;pre class="brush: java"&gt;final HttpServer server = this.vertx.createHttpServer();
server.websocketHandler(this::handlerWebsockets);

&lt;/pre&gt;</description>
	<link>2020/04/watching-the-eventbus.html</link>
	<author>Stephan H. Wissel</author>
	<guid>3c9fb2d0-891c-11ea-867f-b576e977aa02</guid>
	<pubDate>28 April 2020</pubDate>

</item>
<item>
	<title>SimpleXMLDoc revisited</title>
	<description>&lt;p&gt;It is 2020, &lt;a href="https://www.json.org/json-en.html"&gt;JSON&lt;/a&gt; is supposed to have won, with a &lt;a href="https://en.wikipedia.org/wiki/Protocol_Buffers"&gt;challenger in sight&lt;/a&gt;. &lt;a href="https://en.wikipedia.org/wiki/XML"&gt;XML&lt;/a&gt; with its fine distinction between Elements, Attributes and clear ownership demarked by name spaces, was supposed to be gone. But &lt;a href="https://www.odata.org/"&gt;OData&lt;/a&gt; made it &lt;a href="http://docs.oasis-open.org/odata/odata-csdl-xml/v4.01/odata-csdl-xml-v4.01.html"&gt;necessary&lt;/a&gt; to look again, as did &lt;a href="https://en.wikipedia.org/wiki/CalDAV"&gt;CalDAV&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Out into the OutputStream&lt;/h3&gt; 
&lt;p&gt;The &lt;a href="https://www.wissel.net/blog/downloads/2011/SimpleXMLDoc.java"&gt;initial version&lt;/a&gt; was introduced in the &lt;a href="https://wissel.net/blog/2011/10/xml-helper-class-for-xagents.html"&gt;context of XAgents&lt;/a&gt; which mandated an &lt;a href="https://docs.oracle.com/javase/8/docs/api/java/io/OutputStream.html"&gt;OutputStream&lt;/a&gt;. I find that adequate and useful, so I kept that. If you just want a String, a &lt;a href="https://docs.oracle.com/javase/8/docs/api/java/io/ByteArrayOutputStream.html"&gt;ByteArrayOutputStream&lt;/a&gt; will do quite nicely&lt;/p&gt; 
&lt;h3&gt;Fluent methods&lt;/h3&gt; 
&lt;p&gt;The big change to the &lt;a href="https://gist.github.com/Stwissel/ff2dca14074058e80c374bf6cfd0897e"&gt;revamped version&lt;/a&gt; is the addition of a fluent API. Each method call returns the object instance itself, so you can chain your document creation to look modern (and type less)&lt;/p&gt; 
&lt;h3&gt;Namespace and attributes&lt;/h3&gt; 
&lt;p&gt;Originally I though "simple" would be sufficient to create &lt;code&gt;Elements&lt;/code&gt; only. But as time goes by one starts to appreciate name spaces and &lt;code&gt;Attributes&lt;/code&gt;, so I added support for these too. To keep things simple: once we specify the namespace at the beginning of the document, we can simply refer to it by its alias name.&lt;/p&gt; 
&lt;p&gt;A sample:&lt;/p&gt; 
&lt;pre class="brush: java"&gt;    final ByteArrayOutputStream out = new ByteArrayOutputStream();
    final SimpleXMLDoc doc = new SimpleXMLDoc(out);
    doc.addNamespace("X", "https://xmen.org")
    .addNamespace("", "https://whyOhWhy.com/xml")
    .setXmlStyleSheet("somestle.xslt")
    .openElement("Endpoints")
    .openElement(doc.element("X:Endpoint")
          .addAttribute("name", "A Name")
          .addAttribute("url", "http://anywhere/")
          .addAttribute("meta", "meta not metta"))
     .closeElement(1)
     .addSimpleElement("description", "Something useful")
     .closeDocument();
    System.out.println(out.toString());
&lt;/pre&gt; 
&lt;h3&gt;Key methods&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;addNamespace&lt;/code&gt;: adds one name space and establishes the alias. To keep it simple, namespaces are defined &lt;strong&gt;only&lt;/strong&gt; at the beginning fo the document&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;setXmlStyleSheet&lt;/code&gt;: Same here, needs to be defined at the beginning - after all this class streams the result and stylesheets only start at the beginning&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;OpenElement&lt;/code&gt; starts a new XML Element. When provided with a string, it is an attribute free element, that can include the namespace abbreviation. When using a doc.element, we can add attributes&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;addSimpleElement&lt;/code&gt;: add an element, its String content and close it&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;closeElement&lt;/code&gt;: write out a number of closing tags. It deliberately uses number of tags and not tag names, so you don't need to track the names you have opened. Ensures that XML stays valid&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;closeDocument&lt;/code&gt;: closes all remaining Elements in the correct sequence and closes the document. Can be called once only&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Check the &lt;a href="https://gist.github.com/Stwissel/ff2dca14074058e80c374bf6cfd0897e"&gt;full source code&lt;/a&gt; for details&lt;/p&gt; 
&lt;p&gt;As usual YMMV&lt;/p&gt;</description>
	<link>2020/04/simplexmldoc-revisited.html</link>
	<author>Stephan H. Wissel</author>
	<guid>0bf96660-7d93-11ea-96f1-bbdc839f73d4</guid>
	<pubDate>13 April 2020</pubDate>

</item>
<item>
	<title>vert.x and CORS</title>
	<description>&lt;p&gt;One of the security mechanism for &lt;a href="https://en.wikipedia.org/wiki/Ajax_(programming)"&gt;AJAX&lt;/a&gt; calls is &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS"&gt;CORS&lt;/a&gt; (Cross-Origin Resource sharing), where a server advice a browser if it can request resources from it, coming from a different domain.&lt;/p&gt; 
&lt;p&gt;It is then up to the browser to heed that advice. To complicate matters: when the browser wants to POST data (or other similar operations), it will go through a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Preflighted_requests"&gt;preflight request&lt;/a&gt; adding to site latency.&lt;/p&gt; 
&lt;p&gt;I have to admit, I never fully understood the rationale, since only browsers adhere to &lt;a href="https://en.wikipedia.org/wiki/Cross-origin_resource_sharing"&gt;CORS&lt;/a&gt;, any webserver, &lt;a href="https://www.postman.com/"&gt;Postman&lt;/a&gt; or &lt;a href="https://curl.haxx.se/"&gt;CURL&lt;/a&gt; ignore &lt;a href="https://www.html5rocks.com/en/tutorials/cors/"&gt;CORS&lt;/a&gt; happily.&lt;/p&gt; 
&lt;h3&gt;None, One or All, but not Some&lt;/h3&gt; 
&lt;p&gt;There's another trouble with &lt;a href="https://auth0.com/blog/cors-tutorial-a-guide-to-cross-origin-resource-sharing/"&gt;CORS&lt;/a&gt;: The specification only allows for no-access, all-access (using * as value for &lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt;, with &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Origin"&gt;restrictions&lt;/a&gt;) or one specific domain, but not a list of domains.&lt;/p&gt; 
&lt;p&gt;Mozilla &lt;a href=""&gt;writes&lt;/a&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Limiting the possible &lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt; values to a set of allowed origins requires code on the server side to check the value of the &lt;code&gt;Origin&lt;/code&gt; request header, compare that to a list of allowed origins, and then if the &lt;code&gt;Origin&lt;/code&gt; value is in the list, to set the &lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt; value to the same value as the &lt;code&gt;Origin&lt;/code&gt; value.&lt;/p&gt; 
&lt;/blockquote&gt;</description>
	<link>2020/04/vertx-and-cors.html</link>
	<author>Stephan H. Wissel</author>
	<guid>9e5b7e20-78a3-11ea-a838-e39fbeb58f6a</guid>
	<pubDate>07 April 2020</pubDate>

</item>
<item>
	<title>My Maven starter template</title>
	<description>&lt;p&gt;&lt;a href="https://maven.apache.org/"&gt;Maven&lt;/a&gt; is to Java what &lt;a href="https://www.npmjs.com/"&gt;npm&lt;/a&gt; is to JavaScript. It can be a &lt;a href="https://en.wikipedia.org/wiki/The_Moon_Is_a_Harsh_Mistress"&gt;harsh mistress&lt;/a&gt; or your best companion. It depends&lt;/p&gt; 
&lt;h3&gt;Beyond dependencies and builds&lt;/h3&gt; 
&lt;p&gt;Maven removes the need to download and manages your dependencies. Unfortunately it doesn't come with &lt;code&gt;mvn install &amp;lt;packagename&amp;gt;&lt;/code&gt; like npm (or I haven't learned that yet), so keeping that &lt;code&gt;pom.xml&lt;/code&gt; current is a little &lt;strong&gt;PITA&lt;/strong&gt;. However once we make peace with it, the power of plugins makes development in auto-pilot a breeze. Some of the things you can do:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Generate a project site&lt;/li&gt; 
 &lt;li&gt;Generate various reports: code quality, code coverage&lt;/li&gt; 
 &lt;li&gt;Run unit tests&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Check out the &lt;a href="https://maven.apache.org/plugins/index.html"&gt;complete list&lt;/a&gt; to get an idea. I'm specifically fond of the &lt;a href="https://maven.apache.org/plugins/maven-site-plugin/"&gt;site generation&lt;/a&gt; capability. It allows us to keep your documentation in the same repository as the project, so we have one place less to worry about.&lt;/p&gt; 
&lt;p&gt;We simply add &lt;code&gt;/src/site/&lt;/code&gt; to our project and content can be created in &lt;a href="https://maven.apache.org/plugins/maven-site-plugin/examples/creating-content.html"&gt;multiple formats&lt;/a&gt;. My favorite one is &lt;a href="http://en.wikipedia.org/wiki/Markdown"&gt;Markdown&lt;/a&gt;. Besides my handcrafted pages, I generate reports:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Issue management&lt;/li&gt; 
 &lt;li&gt;Licenses&lt;/li&gt; 
 &lt;li&gt;Plugins&lt;/li&gt; 
 &lt;li&gt;Source code location&lt;/li&gt; 
 &lt;li&gt;Team&lt;/li&gt; 
 &lt;li&gt;JavaDoc&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://pmd.github.io/"&gt;PMD&lt;/a&gt; and CPD&lt;/li&gt; 
 &lt;li&gt;Surefire (Test results) and JaCoCo (Test coverage)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;All this involved a bit of boilerplate in the &lt;code&gt;pom.xml&lt;/code&gt; so I keep a template around,&lt;/p&gt;</description>
	<link>2020/04/my-maven-starter-template.html</link>
	<author>Stephan H. Wissel</author>
	<guid>79430ed0-77e7-11ea-a9f7-b71367f83efe</guid>
	<pubDate>06 April 2020</pubDate>

</item>
<item>
	<title>eMail etiquette - the 60ties are calling</title>
	<description>&lt;p&gt;With &lt;a href="https://www.urbandictionary.com/define.php?term=WFH"&gt;WFH&lt;/a&gt; being en vogue these days, not only &lt;a href="https://jitsi.org/"&gt;video conferencing&lt;/a&gt; and &lt;a href="https://telegram.org/"&gt;chat&lt;/a&gt;, but also &lt;a href="https://en.wikipedia.org/wiki/Email"&gt;eMail&lt;/a&gt;.&lt;br&gt; Dating back to the &lt;a href="https://en.wikipedia.org/wiki/History_of_email"&gt;1960ties&lt;/a&gt;, we had 6 decades to develop etiquette, which seems tobe lost to current users, so here we go again&lt;/p&gt; 
&lt;h3&gt;Addressing&lt;/h3&gt; 
&lt;p&gt;eMail has &lt;code&gt;To&lt;/code&gt;, &lt;code&gt;CopyTo&lt;/code&gt; (also called &lt;code&gt;CC&lt;/code&gt; for &lt;a href="https://en.wikipedia.org/wiki/Carbon_copy"&gt;Carbon Copy&lt;/a&gt;) and &lt;code&gt;BCC&lt;/code&gt; (Blind Carbon Copy) as a means of addressing people. They serve distinct purposes:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;TO&lt;/strong&gt;: This is the person (or people) we want to &lt;strong&gt;act&lt;/strong&gt; on our message, do something, reply etc. A good email has only few names, ideally one. If we have an ongoing eMail thread that involves multiple actors, we most likely use the wrong channel and are better of using collaborative software like &lt;a href="https://www.hcltechsw.com/products/connections"&gt;HCL Connections&lt;/a&gt;, &lt;a href="https://www.hcltechsw.com/products/sametime"&gt;HCL Sametime&lt;/a&gt;, &lt;a href="https://slackhq.com/"&gt;Slack&lt;/a&gt;, &lt;a href="https://products.office.com/en-us/microsoft-teams/group-chat-software"&gt;Teams&lt;/a&gt; or &lt;a href="https://www.salesforce.com/ap/products/chatter/overview/"&gt;Chatter&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;CC&lt;/strong&gt;: People, we think, who should be &lt;em&gt;keept in the loop&lt;/em&gt;. We don't expect any action or reaction of them. A lot of eMail veterans automatically route those messages to a low priority place&lt;br&gt; -- &lt;strong&gt;BCC&lt;/strong&gt;: all receipients here get the message and the rest of the addressies won't know. I used to call it the "mobbing copy". BCC is especially fun when someone there hits "reply all" and reveals the readership. There are few legitimate uses for this. One is distribution lists (see below), the other archive/record keeping. Our external readers don't need to know that your compliance archive has the eMail address compliance@acme.com If we really want someone outside the visible thread to take note - forward the message&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Subject line&lt;/h3&gt; 
&lt;p&gt;It is like &lt;em&gt;a tweet about our content&lt;/em&gt;. The subject needs to justify why it is worth the time and attention to open it. So "Status", "Report" or "Important" don't cut it. Common practise we can see are qualifiers, e.g Opportunity codes or project IDs at the beginning. Something like &lt;code&gt;[T3453]&lt;/code&gt; - makes it easier to filter.&lt;/p&gt; 
&lt;p&gt;The biggest competitor to inbox attention by subject is the sender identity. We probably open a message one or two reporting managers up even with bad subject lines.&lt;/p&gt; 
&lt;h3&gt;Content&lt;/h3&gt; 
&lt;p&gt;Let's keep it &lt;a href="http://five.sentenc.es/"&gt;crisp and short&lt;/a&gt;, best below 5 sentences.&lt;/p&gt; 
&lt;p&gt;We state:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;the information we want to provide&lt;/li&gt; 
 &lt;li&gt;the exact ask what action we expect, from whom and when&lt;/li&gt; 
 &lt;li&gt;name the person "team please look into... " doesn't cut it and is an indicator of a broken process&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If there is a lot of information, it might better live in a Wiki, a project place or even a file share. We then provide the news cast overview and a link - &lt;a href="https://knowyourmeme.com/photos/615323-intensifies"&gt;Would you like to know more?&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;There are &lt;a href="https://blog.hubspot.com/sales/email-etiquette-tips-rules"&gt;some&lt;/a&gt; interesting &lt;a href="https://www.inc.com/business-insider/email-etiquette-rules.html"&gt;cultural differences&lt;/a&gt;. In Anglosaxon or Eastern culture we would politely address the person and add a whiff of smalltalk, something along the lines "hope that finds you well". Germans, Dutch and other Nordics consider this a waste of space and time and consider it as the ultimate courtesy to cut through the chase and get to the point.&lt;/p&gt; 
&lt;p&gt;When we address close co-workers, who value efficiency, it even is OK to skip the greeting. We need to dread carefully here, it needs to be clarified otherwise it is seen ultra rude.&lt;/p&gt; 
&lt;h3&gt;Replies&lt;/h3&gt; 
&lt;p&gt;Do we reply to the sender or all of the addressies together. It seems to be the default for many "replyToAll". This is especially hillarious when a distribution list sneaked on the addressies. The rationale here is: &lt;em&gt;the sender wanted to keep all these in the loop, so I won't break it&lt;/em&gt;. For a small group, I hit replyAll, for larger ones only reply.&lt;/p&gt; 
&lt;p&gt;I would wish the eMail software would warn when you blast a reply. The guardian &lt;a href="https://www.theguardian.com/culture/2017/feb/03/when-is-it-appropriate-to-reply-all-mostly-never"&gt;agrees&lt;/a&gt;: don't replyAll.&lt;/p&gt; 
&lt;p&gt;A special mention: cherry-picking replies. We hit reply all and remove the mailing lists - good. We just remove the project manager we compete with - bad. So we need to be careful of the ramifications. Other receipients might wonder: &lt;em&gt;why are Jane and Joe no longer in this conversation?&lt;/em&gt;&lt;/p&gt; 
&lt;h3&gt;Distribution lists&lt;/h3&gt; 
&lt;p&gt;They firmly belong in BCC - avoids ReplyAll armageddon. When we use private distribution list, we need to make sure, they resolve before sending otherwise people can't reply. However - most likely - that group of people would be better served with a shared channel. A good strategy: we put it in BCC, write a two sencent summary and provide a link to the full info. Co-workers who are not into eMail will find in in their [insert the collaborative tool you use]&lt;/p&gt; 
&lt;p&gt;As usual YMMV&lt;/p&gt;</description>
	<link>2020/03/email-etiquette.html</link>
	<author>Stephan H. Wissel</author>
	<guid>b2cd0400-7001-11ea-9c0e-65de6ddf10e2</guid>
	<pubDate>27 March 2020</pubDate>

</item>

</channel>
</rss>
