<?xml version="1.0"?>
<rss version="2.0">
<channel>
	<title>wissel.net Usability - Productivity - Business - The web - Singapore and Twins</title>
	<link>https://wissel.net/blog/stories.rss</link>
	<description>Thoughts, Insights and Opinions of Stephan H. Wissel. Topics included: Salesforce, Lotus Notes and Domino, IBM Websphere, NodeJS, JavaScript,  J2EE, .Net, Software Archtecture, Personcentric Development, Agile Software, SDLC, Singapore and my Twins</description>
	<language>en,de</language>
	<copyright>(C) 2003 - 2021 Stephan H. Wissel, All rights reserved</copyright>
	<pubdate>Sat, 23 Oct 2021 20:51:13 +0000</pubdate>
<item>
	<title>Java Streams filters with side effects</title>
	<description>&lt;p&gt;Once you get used to &lt;a href="/blog/2020/11/streams-and-functional-programming-in-java.html"&gt;stream programming&lt;/a&gt; and the pattern of &lt;a href="/blog/2021/01/collecting-java-streams.html"&gt;create, select, manipulate and collect&lt;/a&gt; your code will never look the same&lt;/p&gt; 
&lt;h3&gt;Putting side effects to good (?) use&lt;/h3&gt; 
&lt;p&gt;The pure teachings tell us, &lt;a href="https://www.baeldung.com/java-stream-filter-lambda"&gt;filters&lt;/a&gt; should select objects for processing and &lt;strong&gt;not&lt;/strong&gt; have any side effects or do processing on their own. But ignoring the teachings could produce clean code (I probably will roast in debug hell for this). Let's look at an example:&lt;/p&gt; 
&lt;pre class="brush: java"&gt;final Collection&amp;lt;MyNotification&amp;gt; notifications = getNotifications();
final Iterator&amp;lt;MyNotification&amp;gt; iter = notifications.iterator();

while(iter.hasNext()) {
  MyNotification n = iter.next();

  if (n.priority == Priority.high) {
    sendHighPriority(n);
  } else if (n.groupNotification) {
    sendGroupNotification(n);
  } else if (n.special &amp;amp;&amp;amp; !n.delay &amp;gt; 30) {
    sendSpecial(n);
  } else if (!n.special) {
    sendStandard(n);
  } else {
    reportWrongNotification(n);
  }
}
&lt;/pre&gt; 
&lt;p&gt;This gets messy very fast and all selection logic is confined to the if conditions in one function (which initially looks like a good idea). How about rewriting the code &lt;a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html"&gt;Stream&lt;/a&gt; style? It will be more boiler plate, but better segregation:&lt;/p&gt; 
&lt;pre class="brush: java"&gt;final Stream&amp;lt;MyNotification&amp;gt; notifications = getNotifications();

notifications
  .filter(this::highPriority)
  .filter(this::groupSend)
  .filter(this::specialNoDelay)
  .filter(this::standard)
  .forEach(this::reportWrongNotification);
&lt;/pre&gt; 
&lt;p&gt;The filter functions would look like this:&lt;/p&gt; 
&lt;pre class="brush: java"&gt;boolean highPriority(final MyNotification n) {
  if (n.priority == Priority.high) {
    sendHighPriority(n);
    return false; // No further processing required
  }
  return true; // Furhter processing required
}

boolean groupSend(final MyNotification n) {
  if (n.groupNotification) {
    sendGroupNotification(n);
    return false; // No further processing required
  }
  return true; // Furhter processing required
}
&lt;/pre&gt; 
&lt;p&gt;You get the idea. With proper JavaDoc method headers, this code looks more maintainable.&lt;br&gt; We can push this a little further (as explored on &lt;a href="https://stackoverflow.com/questions/69670736/how-to-apply-a-collection-of-filters-to-a-java-stream"&gt;Stackoverflow&lt;/a&gt;). Imagin the number of process steps might vary and you don't want to update that code for every variation. You could do something like this:&lt;/p&gt; 
&lt;pre class="brush: java"&gt;final Stream&amp;lt;MyNotification&amp;gt; notifications = getNotifications();
final Stream&amp;lt;Predicate&amp;lt;MyNotifications&amp;gt;&amp;gt; filters = getFilters();

notifications
  .filter(filters.reduce(f -&amp;gt; true, Predicate::and))
  .forEach(this::reportWrongNotification);
&lt;/pre&gt; 
&lt;p&gt;As usual YMMV&lt;/p&gt;</description>
	<link>2021/10/java-streams-filters-with-side-effects.html</link>
	<author>Stephan H. Wissel</author>
	<guid>476bcff0-32da-11ec-97e7-f363621f1794</guid>
	<pubDate>22 October 2021</pubDate>

</item>
<item>
	<title>Streaming CouchDB data</title>
	<description>&lt;p&gt;I'm a confessing fan of &lt;a href="http://couchdb.apache.org/"&gt;CouchDB&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/Stream_(computing)"&gt;stream programming&lt;/a&gt; and the &lt;a href="https://www.npmjs.com/package/nano"&gt;official CouchDB NodeJS library&lt;/a&gt;. Nano supports returning data as &lt;a href="https://nodejs.org/api/stream.html"&gt;NodeJS Stream&lt;/a&gt;, so you can &lt;a href="https://www.codemag.com/article/1803071/Getting-Started-with-Node-Streams"&gt;pipe it away&lt;/a&gt;. Most examples use file streams or &lt;a href="https://nodejs.org/api/process.html#process_process_stdout"&gt;&lt;code&gt;process.stdout&lt;/code&gt;&lt;/a&gt;, while my goal was to process individual documents that are part of the stream&lt;/p&gt; 
&lt;h3&gt;You can't walk into the same stream a second time&lt;/h3&gt; 
&lt;p&gt;This old Buddhist saying holds true for NodeJS streams too. So any processing needs to happen in the chain of the stream. Let's start with the simple example of reading all documents from a couchDB:&lt;/p&gt; 
&lt;pre class="brush: javascript"&gt;const Nano = require("nano");
const nano = Nano(couchDBURL);
nano.listAsStream({ include_docs: true }).pipe(process.stdout);
&lt;/pre&gt; 
&lt;p&gt;This little snippet will read out all documents in your couchDB. You need to supply the &lt;code&gt;couchDBURL&lt;/code&gt; value, e.g. &lt;code&gt;http://localhost:5984/test&lt;/code&gt;. On a closer look, we see that the data returned arrives in continious buffers that don't match JSON document boundaries, so processing one document after the other needs extra work.&lt;/p&gt; 
&lt;p&gt;A &lt;a href="https://strongloop.com/strongblog/practical-examples-of-the-new-node-js-streams-api/"&gt;blog entry&lt;/a&gt; in the StrongLoop blog provides the first clue what to do. To process CouchDB stream data we need both a &lt;a href="https://nodejs.org/api/stream.html#stream_class_stream_transform"&gt;Transform stream&lt;/a&gt; to chop incoming data into line by line and a &lt;a href="https://nodejs.org/api/stream.html#stream_implementing_a_writable_stream"&gt;writable stream&lt;/a&gt; for our results.&lt;/p&gt; 
&lt;p&gt;Our code, finally will look like this:&lt;/p&gt; 
&lt;pre class="brush: javascript"&gt;const Nano = require("nano");
const { Writable, Transform } = require("stream");

const streamOneDb = (couchDBURL, resultCallback) =&amp;gt; {
  const nano = Nano(couchDBURL);
  nano
    .listAsStream({ include_docs: true })
    .on("error", (e) =&amp;gt; console.error("error", e))
    .pipe(lineSplitter())
    .pipe(jsonMaker())
    .pipe(documentWriter(resultCallback));
};
&lt;/pre&gt; 
&lt;p&gt;Let's have a closer look at the new functions, the first two implement &lt;code&gt;transform&lt;/code&gt;, the last one &lt;code&gt;writable&lt;/code&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;lineSplitter&lt;/code&gt;, as the name implies, cuts the buffer into separate lines for processing. As far as I could tell, CouchDB documents always returned on one line&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;jsonMaker&lt;/code&gt;, extracts the documents and discards the wrapper with document count that surrounds them&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;documentWriter&lt;/code&gt;, writing out the JSON object using a callback&lt;/li&gt; 
&lt;/ul&gt;</description>
	<link>2021/10/streaming-couchdb-data.html</link>
	<author>Stephan H. Wissel</author>
	<guid>3c572e40-2e5f-11ec-a72e-eb1375b3050a</guid>
	<pubDate>16 October 2021</pubDate>

</item>
<item>
	<title>Reading Resources from JAR Files</title>
	<description>&lt;p&gt;One interesting challenge I &lt;a href="https://www.theprojectthatshallnotbenamed.com/"&gt;encountered&lt;/a&gt; is the need or ability to make an Java application extensible by providing additional classes and configuation. Ideally extension should happen by dropping a properly crafted JAR file into a specified location and restard the server. Along the line I learned about Java's classpath. This is what is to be shared here.&lt;/p&gt; 
&lt;h3&gt;Act one: onto the classpath&lt;/h3&gt; 
&lt;p&gt;When you start off with Java, you would expect, that you simply can set the &lt;a href="https://docs.oracle.com/javase/tutorial/essential/environment/paths.html"&gt;classpath&lt;/a&gt; varible either using an environment variable or the &lt;code&gt;java -cp&lt;/code&gt; parameter. Then you learn the &lt;a href="https://stackoverflow.com/questions/11922681/differences-between-java-cp-and-java-jar"&gt;hard way&lt;/a&gt;, that &lt;code&gt;java -jar&lt;/code&gt; and &lt;code&gt;java -cp&lt;/code&gt; are mutually exclusive. After a short flirt with &lt;a href="https://product.hubspot.com/blog/the-fault-in-our-jars-why-we-stopped-building-fat-jars"&gt;fatJAR&lt;/a&gt;, you end up with a directory structure like this:&lt;/p&gt; 
&lt;p&gt;&lt;img src="/blog/images/2021/ApplicationDirectoryStructure.png" alt="Directory Structure"&gt;&lt;/p&gt; 
&lt;p&gt;The secreingredient to make this work is the manifest file inside the &lt;code&gt;myApp.jar&lt;/code&gt;. It needs to be told to put all jar files in &lt;code&gt;libs&lt;/code&gt; onto the classpath too. In &lt;a href="https://maven.apache.org/"&gt;maven&lt;/a&gt;, it looks like this:&lt;/p&gt; 
&lt;pre class="brush: xml"&gt;&amp;lt;plugin&amp;gt;
    &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;maven-jar-plugin&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;${maven.jar.plugin.version}&amp;lt;/version&amp;gt;
    &amp;lt;configuration&amp;gt;
        &amp;lt;archive&amp;gt;
            &amp;lt;manifest&amp;gt;
                &amp;lt;mainClass&amp;gt;com.hcl.domino.keep.Launch&amp;lt;/mainClass&amp;gt;
            &amp;lt;/manifest&amp;gt;
            &amp;lt;manifestEntries&amp;gt;
                &amp;lt;Class-Path&amp;gt;.&amp;lt;/Class-Path&amp;gt;
                &amp;lt;Class-Path&amp;gt;libs/*&amp;lt;/Class-Path&amp;gt;
            &amp;lt;/manifestEntries&amp;gt;
        &amp;lt;/archive&amp;gt;
    &amp;lt;/configuration&amp;gt;
&amp;lt;/plugin&amp;gt;
&lt;/pre&gt; 
&lt;p&gt;Now, that all JARS are successfully availble on the classspath, we can try to retrieve them.&lt;/p&gt;</description>
	<link>2021/04/reading-resources-from-jar-files.html</link>
	<author>Stephan H. Wissel</author>
	<guid>ce4a84f0-a8d6-11eb-af9d-1184c78a15d1</guid>
	<pubDate>29 April 2021</pubDate>

</item>
<item>
	<title>Collecting Java Streams</title>
	<description>&lt;p&gt;I wrote about &lt;a href="/blog/2020/11/streams-and-functional-programming-in-java.html"&gt;Java Streams before&lt;/a&gt;, sharing how they work for me and how, in conjunction with Java's &lt;a href="https://www.baeldung.com/java-8-functional-interfaces"&gt;functional interfaces&lt;/a&gt;, they enable us to write clean(er) code. I'd like to revisit my learnings, with some focus on the final step: what happens at the tail end of a stream operation&lt;/p&gt; 
&lt;h3&gt;Four activities&lt;/h3&gt; 
&lt;p&gt;There are four activities around Java Streams:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Create&lt;/strong&gt;: There are numerous possibilities to create a stream. The most prevalent, I found, is &lt;a href="https://docs.oracle.com/javase/8/docs/api/java/util/Collection.html#stream"&gt;&lt;code&gt;Collection.stream()&lt;/code&gt;&lt;/a&gt; which returns a stream of anything in Java's collection framework: Collections, Lists, Sets etc.&lt;br&gt;There are more possibilities provided by the &lt;a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html"&gt;Stream&lt;/a&gt; interface, the &lt;a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.Builder.html"&gt;StreamBuilder&lt;/a&gt; interface, the &lt;a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/StreamSupport.html"&gt;StreamSupport&lt;/a&gt; utility class or Java NIO's &lt;a href="https://docs.oracle.com/javase/8/docs/api/java/nio/file/Files.html"&gt;Files&lt;/a&gt; (and probably some more)&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Select&lt;/strong&gt;: You can &lt;code&gt;filter()&lt;/code&gt;, &lt;code&gt;skip()&lt;/code&gt;, &lt;code&gt;limit()&lt;/code&gt;, &lt;code&gt;concat()&lt;/code&gt;, &lt;code&gt;distinct()&lt;/code&gt; or &lt;code&gt;sorted()&lt;/code&gt;. All those methods don't change individual stream members, but determine what elements will be processed further. Selection and manipulation can happen multiple times after each other&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Manipulate&lt;/strong&gt;: Replace each member of the stream with something else. That "something" can be the member itself with altered content. Methods that are fluent fit here nicely (like &lt;code&gt;stream().map(customer -&amp;gt; customer.setStatus(newStatus))&lt;/code&gt;. We use &lt;code&gt;map()&lt;/code&gt; and &lt;code&gt;flatMap()&lt;/code&gt; for this step. While it is perfectly fine to use &lt;a href="https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html"&gt;Lambda Expressions&lt;/a&gt;, consider moving the Lambda body into its own function, to improve reading and debugging&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Collect&lt;/strong&gt;: You can "collect" a stream once. After that it becomes inaccessible. The closest to classic loops here is the &lt;code&gt;forEach()&lt;/code&gt; method, that allows you operate on the members as you are used to from the Java Collection framework.&lt;br&gt;Next are the convenience methods: &lt;code&gt;count()&lt;/code&gt;, &lt;code&gt;findAny()&lt;/code&gt;, &lt;code&gt;findFirst()&lt;/code&gt;, &lt;code&gt;toArray()&lt;/code&gt; and finally &lt;code&gt;reduce()&lt;/code&gt; and &lt;code&gt;collect()&lt;/code&gt;.&lt;br&gt;A typical way to use &lt;code&gt;collect()&lt;/code&gt; is in conjunction with the &lt;a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Collectors.html"&gt;Collectors&lt;/a&gt; static class, that provides the most commonly needed methods like &lt;code&gt;toSet()&lt;/code&gt;, &lt;code&gt;toList()&lt;/code&gt;, &lt;code&gt;joining()&lt;/code&gt; or &lt;code&gt;groupingBy()&lt;/code&gt;. Check the &lt;a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Collectors.html"&gt;JavaDoc&lt;/a&gt;, there are 37 methods at your disposal.&lt;br&gt;However, sometimes, you might have different needs for your code, there &lt;strong&gt;custom collectors&lt;/strong&gt; shine&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt;</description>
	<link>2021/01/collecting-java-streams.html</link>
	<author>Stephan H. Wissel</author>
	<guid>128920a0-4c0b-11eb-9875-11c5d96c4e9d</guid>
	<pubDate>01 January 2021</pubDate>

</item>
<item>
	<title>What constitutes "good" (software) documentation?</title>
	<description>&lt;p&gt;Software ocumentation is a sticky issue and tends to escalate rather quickly in opinion matches, fighting over what is needed, what is missing and what should be different.&lt;/p&gt; 
&lt;p&gt;Looking at it closer I see 3 main dimentions:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;audience&lt;/li&gt; 
 &lt;li&gt;content&lt;/li&gt; 
 &lt;li&gt;format&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Each documentation artefact has a sweet spot in this cube as well as no-go zones (e.g. a business user watching a live coding recording?).&lt;/p&gt; 
&lt;p&gt;Any individual can and will fit into one or more audience, as each artefact will fit into one or more content categories. So good navigation and cross references are essential&lt;/p&gt; 
&lt;p&gt;&lt;a href="/blog/images/2020/GoodDocumentation.jpg"&gt;&lt;img src="/blog/images/2020/GoodDocumentation800.jpg" alt="Documentation MindMap"&gt;&lt;/a&gt;&lt;/p&gt;</description>
	<link>2020/12/what-constitutes-good-documentation.html</link>
	<author>Stephan H. Wissel</author>
	<guid>59413410-49d1-11eb-8863-8995f5850d98</guid>
	<pubDate>29 December 2020</pubDate>

</item>
<item>
	<title>Software distribution</title>
	<description>&lt;p&gt;Just download the binaries and run the installer. Would you need anything else for software distribution?&lt;/p&gt; 
&lt;h3&gt;The rise of the AppStore&lt;/h3&gt; 
&lt;p&gt;Mobile devices showed us the trend. Your Android device will load new apps from &lt;a href="https://play.google.com/"&gt;Google Play&lt;/a&gt; or Huawei's &lt;a href="https://appgallery.huawei.com/"&gt;AppGallery&lt;/a&gt; (or any of the &lt;a href="https://fossbytes.com/10-google-play-store-alternatives/"&gt;alternatives&lt;/a&gt;). On iOS, padOS, watchOS or tvOS, it is Apple's &lt;a href="https://www.apple.com/app-store/"&gt;AppStore&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;In the middle tier, Windows and macOS, the success is a mixed bag. Despite all attempts (Apple I'm looking at you), the bulk of apps are still "download and install". So each app has to implement its own update check (Unless you use &lt;a href="https://brew.sh/"&gt;Homebrew&lt;/a&gt; with its heritage in Linux).&lt;/p&gt; 
&lt;p&gt;In the enterprise this "poll request" approach is supplemented or surplanted by a push approach using tools like &lt;a href="https://www.jamf.com/"&gt;jamf&lt;/a&gt; (Mac only) or &lt;a href="https://www.hcltechsw.com/products/bigfix/home"&gt;BigFix&lt;/a&gt; (cross platform).&lt;/p&gt; 
&lt;h3&gt;Servers and components&lt;/h3&gt; 
&lt;p&gt;On Windows there is &lt;a href="https://docs.microsoft.com/en-us/windows-server/administration/windows-server-update-services/get-started/windows-server-update-services-wsus"&gt;Windows Server Update Services&lt;/a&gt;, which keeps your servers neat and updated and can &lt;a href="https://www.itprotoday.com/security/publishing-third-party-updates-wsus"&gt;update 3rd party software too&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;On &lt;a href="https://www.linuxfoundation.org/"&gt;Linux&lt;/a&gt; package managers have been established for quite a while any you find most software in &lt;a href="https://en.wikipedia.org/wiki/RPM_Package_Manager"&gt;rpm&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/Deb_(file_format)"&gt;deb&lt;/a&gt; or &lt;a href="https://snapcraft.io/"&gt;Snap&lt;/a&gt; format. Local package managers can be set up to install packages automatically based on criteria (e.g critical updates)&lt;/p&gt; 
&lt;p&gt;For Docker there is &lt;a href="https://hub.docker.com/"&gt;the Hub&lt;/a&gt;, for Java based packages &lt;a href="https://search.maven.org/"&gt;Maven central&lt;/a&gt; and for JavaScript based applications the &lt;a href="https://www.npmjs.com/"&gt;NPM registry&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;In the enterprise environment, you can find &lt;a href="https://jfrog.com/artifactory/"&gt;Artifactory&lt;/a&gt; or &lt;a href="https://www.sonatype.com/nexus/repository-pro"&gt;Nexus Repository&lt;/a&gt; as well as cloud based solutions like &lt;a href="https://azure.microsoft.com/en-us/services/devops/artifacts/"&gt;Azure Artifacts&lt;/a&gt;, &lt;a href="https://aws.amazon.com/codeartifact/"&gt;AWS CodeArtifact&lt;/a&gt; or &lt;a href="https://www.digitalocean.com/docs/container-registry/"&gt;DigitalOcean Container Registry&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Your application?&lt;/h3&gt; 
&lt;p&gt;With the ready availabily of repositories (App stores are nothing more than repositories with UI and billing), what does that demand from your app?&lt;/p&gt; 
&lt;p&gt;In short: &lt;strong&gt;make it easy to accquire and update your code&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;on mobile swallow the frog and publish to an app store&lt;/li&gt; 
 &lt;li&gt;on desktops: if your main customers are individuals, the app store might save you the headache of a good update strategy. When companies are your target: make it jamf / WSUS friendly&lt;/li&gt; 
 &lt;li&gt;on servers: a package repository, inlcuding the ability to deploy to a corporate repository is a must. This applies to updates too&lt;/li&gt; 
 &lt;li&gt;components: you need a registry. Should you consider none of the established public ones as suitable, provide your own&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Of course, you can consider &lt;em&gt;retro&lt;/em&gt; a charm and be left behind&lt;/p&gt; 
&lt;p&gt;As usual YMMV&lt;/p&gt;</description>
	<link>2020/12/software-distribution.html</link>
	<author>Stephan H. Wissel</author>
	<guid>42079290-3df0-11eb-85be-f5257d56bdd9</guid>
	<pubDate>14 December 2020</pubDate>

</item>
<item>
	<title>Schema mapping with Java functional interfaces</title>
	<description>&lt;p&gt;Mapping one data structure into another is a never ending chore since COBOL's &lt;code&gt;MOVE CORRESPONDING&lt;/code&gt;. One to one mappings are trivial, onnce computation is needed, clean code can become messy, really fast&lt;/p&gt; 
&lt;h3&gt;Map with Functions&lt;/h3&gt; 
&lt;p&gt;We will use the following, simplified, scenario with source and target formats:&lt;/p&gt; 
&lt;pre class="brush: java"&gt;{
	"FirstName" : "Peter",
	"LastName" : "Pan",
	"DoB" : "1873-11-23",
	"ToC" : "accepted",
	"Marketing" : "no"
}
&lt;/pre&gt; 
&lt;p&gt;Desired Result:&lt;/p&gt; 
&lt;pre class="brush: java"&gt;{
	"fullname" : "Peter Pan",
	"birthday" : "1873-11-23",
	"gdpr" : true
}
&lt;/pre&gt; 
&lt;p&gt;In our case only &lt;code&gt;DoB&lt;/code&gt; has a simple mapping to &lt;code&gt;birthday&lt;/code&gt; all others need computation or are dropped. So to keep code clean we will use a map with mapping functions, so each computation can be in its own method. The defaults 1:1 and drop functions get defined first.&lt;/p&gt; 
&lt;pre class="brush: java"&gt;final Map&amp;lt;String, Function&amp;lt;JsonObject, JsonObject&amp;gt;&amp;gt; functionList = new HashMap&amp;lt;&amp;gt;();

Function&amp;lt;JsonObject, JsonObject&amp;gt; simple(final String fieldNameIn, final String fieldNameOut) {
	return in -&amp;gt; new JsonObject().put(fieldNameOut, in.getValue(fieldNameIn));
}

Function&amp;lt;JsonObject, JsonObject&amp;gt; drop() {
	return in -&amp;gt; new JsonObject();
}

&lt;/pre&gt; 
&lt;p&gt;Each of the functions returns an Json object that &lt;strong&gt;only&lt;/strong&gt; returns a value for the one field it gets called for. We will use a collector to aggregate the values. Since we are planning to use streams and functional interfaces, we need a helper class.&lt;/p&gt; 
&lt;pre class="brush: java"&gt;class MapHelper() {
	JsonObject source;
	Function&amp;lt;JsonObject, JsonObject&amp;gt; mapper;
	JsonObject apply() {
		return this.mapper.apply(this.source);
	}
}

MapHelper getMapHelper(final JsonObject source, final Map.Entry&amp;lt;String, Object&amp;gt; incoming) {
    MapHelper result = new MapHelper();
    result.source = source;
    result.mapper = this.functionList.getOrDefault(incoming.getKey(), drop());
    return result;
  }
&lt;/pre&gt; 
&lt;p&gt;Since each function will return some JSON, that needs to be merged together, we use a Java &lt;a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Collector.html"&gt;Collector&lt;/a&gt; to accumulate the values.&lt;/p&gt;</description>
	<link>2020/11/schema-mapping-with-java-functional-interfaces.html</link>
	<author>Stephan H. Wissel</author>
	<guid>3c53a360-3149-11eb-b6d9-332622ac7adf</guid>
	<pubDate>28 November 2020</pubDate>

</item>
<item>
	<title>Streams and Functional programming in Java</title>
	<description>&lt;p&gt;I'm late to the party embracing &lt;a href="https://www.baeldung.com/java-8-streams"&gt;Streams&lt;/a&gt; and &lt;a href="https://www.baeldung.com/java-8-functional-interfaces"&gt;functional interfaces&lt;/a&gt; in Java. Using them for a while taught me the beauty and how things fit together nicely&lt;/p&gt; 
&lt;h3&gt;Moving parts&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;At the beginning a class implementing the &lt;a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html"&gt;Stream interface&lt;/a&gt; emits items, that can be manipulated using &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;filter&lt;/code&gt; operationf&lt;/li&gt; 
 &lt;li&gt;The map and filter operations are supported by the Interfaces in &lt;a href="https://docs.oracle.com/javase/8/docs/api/java/util/function/package-summary.html"&gt;java.util.function&lt;/a&gt; (we get to the samples later)&lt;/li&gt; 
 &lt;li&gt;At the end the result gets "collected", in its simplest form using &lt;code&gt;.forEach&lt;/code&gt; or, more sophisticated using a &lt;a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Collector.html"&gt;Collector&lt;/a&gt; with many &lt;a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Collectors.html"&gt;ready baked options&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;What's the big deal?&lt;/h3&gt; 
&lt;p&gt;short answer: clean, terse and clutter free code.&lt;/p&gt; 
&lt;p&gt;long answer: an example. Lets say you have a &lt;code&gt;mammal&lt;/code&gt; class which gets subclassed by &lt;code&gt;cat&lt;/code&gt; and &lt;code&gt;dog&lt;/code&gt; (and others). You have a collection of these mamals and need to extract all dogs over weight 50. Weight is not a property of mammal. There might be null values in your collection. Classic code would look like this:&lt;/p&gt; 
&lt;pre class="brush: java"&gt;List&amp;lt;Dog&amp;gt; getHeavyDogs(final List&amp;lt;Mammal&amp;gt; mammals) {
    List&amp;lt;Dog&amp;gt; result = new ArrayList&amp;lt;&amp;gt;();
    for (int i = 0; i &amp;lt; mammals.size(); i++) {
      Mammal mammal = mammals.get(i);
      if (mammal != null) {
        if (mammal instanceof Dog &amp;amp;&amp;amp; ((Dog) mammal).weight() &amp;gt; 50) {
          result.add((Dog) mammal);
        }
      }
    }
    return result;
  }
&lt;/pre&gt; 
&lt;p&gt;We all seen this type of code. In a functional and stream style this would look different. We have a little &lt;a href="https://en.wikipedia.org/wiki/Duck_typing"&gt;duck typing&lt;/a&gt; going on here. When a method looks like a functional interface, it can be used as this function. E.g. a method that takes one value and returns a boolean can be used as a &lt;a href="https://docs.oracle.com/javase/8/docs/api/java/util/function/Predicate.html"&gt;Predicate&lt;/a&gt;, which comes in handy for filter operations. Another nifty syntax: you can address methods, both static and instance using the &lt;code&gt;::&lt;/code&gt; (double colon) syntax. So when you could use a lambda &lt;code&gt;x -&amp;gt; this.doSomething(x)&lt;/code&gt; you can simply write &lt;code&gt;this::doSomething&lt;/code&gt; and the compiler will sort it out (&lt;code&gt;System.out::println&lt;/code&gt; anyone?)&lt;/p&gt;</description>
	<link>2020/11/streams-and-functional-programming-in-java.html</link>
	<author>Stephan H. Wissel</author>
	<guid>1df8e500-1f8e-11eb-a4c5-4bd0df64c996</guid>
	<pubDate>06 November 2020</pubDate>

</item>
<item>
	<title>Deploying your static app to your backend repo using GitHub Actions</title>
	<description>&lt;p&gt;Our solution has two parts: a backend written in JavaScript, providing the API and a front-end created in Angular, Ionic, React or whatever is the flavor of the day. Usually you would deploy a &lt;a href="https://www.nginx.com/"&gt;web server&lt;/a&gt; to handle the URL, host the static files and have it redirect the &lt;code&gt;/api&lt;/code&gt; URL to our backend.&lt;/p&gt; 
&lt;p&gt;However there might be &lt;a href="https://www.heroku.com/"&gt;reasons&lt;/a&gt; (or &lt;a href="https://cloud.ibm.com/"&gt;that&lt;/a&gt;) that we can't or &lt;a href="https://kubernetes.io/docs/concepts/services-networking/ingress/"&gt;don't want to access&lt;/a&gt; the web server and need to serve your front-end app from the &lt;code&gt;/static&lt;/code&gt; directory of our backend.&lt;/p&gt; 
&lt;h3&gt;Planning and a little YAML&lt;/h3&gt; 
&lt;p&gt;Merging the two repositories seems initially an easy option, it just would break our workflows, so a different solution needs to be devised. The ask is simple:&lt;/p&gt; 
&lt;p&gt;&lt;img src="/blog/images/2020/StaticHosting.png" alt="Merging UI files into the back-end"&gt;&lt;/p&gt; 
&lt;p&gt;Whenever a change happens in the &lt;code&gt;main&lt;/code&gt; branch of the front-end application (mostly through an approved pull request), the application should be build and the result transfered to the back-end application where a pull request merges it into &lt;code&gt;main&lt;/code&gt;. Duplicate approvals shall be avoided. So we need:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Automatic build on push to main&lt;/li&gt; 
 &lt;li&gt;Pull / Push the bundle changes from front-end to the back-end&lt;/li&gt; 
 &lt;li&gt;Create a pull request and merge it in back-end&lt;/li&gt; 
&lt;/ol&gt;</description>
	<link>2020/10/deploying-your-static-app-to-your-backend-repo.html</link>
	<author>Stephan H. Wissel</author>
	<guid>28b45380-0657-11eb-b7f2-a398fdcdf824</guid>
	<pubDate>04 October 2020</pubDate>

</item>
<item>
	<title>Architectural Decisions</title>
	<description>&lt;p&gt;"&lt;em&gt;Architecture represents the significant design decisions that shape a system,&lt;br&gt; where significant is measured by cost of change.&lt;/em&gt;"&lt;/p&gt; 
&lt;p&gt;-- &lt;a href="https://en.wikipedia.org/wiki/Grady_Booch"&gt;Grady Booch&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;In &lt;a href="https://amzn.to/2Zh2S17"&gt;real architecture&lt;/a&gt; it is obvious, when thee foundation is completed and the stories of your building rise, there's no way to swap out the foundations without demolition and starting over.&lt;/p&gt; 
&lt;p&gt;In &lt;a href="https://amzn.to/3bB3tQ0"&gt;software architecture&lt;/a&gt; it is less obvious, but nevertheless similar important not to send in the demolition crew half way into delivery.&lt;/p&gt; 
&lt;p&gt;While in construction you demolition crew easily can be identified by hard hats, orange vests and &lt;a href="https://www.askkentay.com/wp-content/uploads/2018/03/wrecking-ball.jpg"&gt;heavy machinery&lt;/a&gt;, your software demolition crew often comes disguised as &lt;em&gt;concerned stakeholder&lt;/em&gt; questioning fundamental decisions over and over (out of a variety of motives). So it is paramount to document your archtectural decisions well.&lt;/p&gt; 
&lt;h3&gt;Decisions, Justification, Alternatives, Impact&lt;/h3&gt; 
&lt;p&gt;Our typical architecture decision documentation starts, duh, with the table of content (unless that sits in a sidebar) and an overview of your architecture. One or more diagrams to provide an overview are well placed here.&lt;/p&gt; 
&lt;p&gt;Now number the decisions, so they can be refered to by their shortform (e.g AD45) rather than their full title. For larger or delicate system, you want to place each decision on their own page, not at least to be able to extract one (as PDF) for customer sign up. While it is tempting to use a word processor, I'd argue to use an engineering format like markdown or, when complexity justifies it, &lt;a href="https://en.wikipedia.org/wiki/Darwin_Information_Typing_Architecture"&gt;DITA&lt;/a&gt;. Document format and storage could be considered primordial architectural decisions.&lt;/p&gt; 
&lt;p&gt;Each decision needs to provide four elements:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;Decision&lt;/strong&gt;&lt;br&gt;What have you decided. A factual statement. Something along the line "&lt;em&gt;Our choosen programming language is COBOL&lt;/em&gt;"&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Justification&lt;/strong&gt;&lt;br&gt; Outline why. It should cover features, cost, skills. You don't need to state why the alternative failed in your considerations&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Alternatives&lt;/strong&gt;&lt;br&gt;What have you looked at, what made you reject the alternative possibiliy. We need to be careful, &lt;a href="https://en.wikipedia.org/wiki/Analysis_paralysis"&gt;analysis paralysis&lt;/a&gt; lurks here. There is always another framework, language or database you could consider. This is also the area where our "friendly" demolition crew will try to stall us&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Impact&lt;/strong&gt;&lt;br&gt;Serves are a reinforcement of &lt;em&gt;Justification&lt;/em&gt;, but extends, when appropriate, on potential risk and its mitigation. It is an important section, nevertheless our "&lt;em&gt;Reichsbedenkentr??ger&lt;/em&gt;" (loosely translated as "&lt;em&gt;Imperial wardens of concern&lt;/em&gt;") lurk here. So stay concise to the point. You don't write a PHD thesis here.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Depending on the impact of the system (malefunktion threatens life, threatens assets or requires to hit reload in the browser) you need to spend more or less time on it. For a refresher on this concepts, have a look at &lt;a href="https://en.wikipedia.org/wiki/Analysis_paralysis"&gt;Crystal Clear&lt;/a&gt; page xvi in the preface.&lt;/p&gt;</description>
	<link>2020/09/architectural-decisions.html</link>
	<author>Stephan H. Wissel</author>
	<guid>104f5f80-f101-11ea-9db3-55dd0fb67ebe</guid>
	<pubDate>07 September 2020</pubDate>

</item>

</channel>
</rss>
