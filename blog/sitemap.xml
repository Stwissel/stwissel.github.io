<?xml version="1.0"?>
<rss version="2.0">
<channel>
	<title>wissel.net Usability - Productivity - Business - The web - Singapore and Twins</title>
	<link>https://wissel.net/blog/stories.rss</link>
	<description>Thoughts, Insights and Opinions of Stephan H. Wissel. Topics included: IBM Lotus Notes and Domino, IBM Websphere, other IBM Lotus stuff,  J2EE, .Net, Software Archtecture, Personcentric Development, Agile Software, SDLC, Singapore and my Twins</description>
	<language>en,de</language>
	<copyright>(C) 2003 - 2018 Stephan H. Wissel, All rights reserved</copyright>
	<pubdate>Wed, 02 Jan 2019 04:27:52 +0000</pubdate>
<item>
	<title>Avoid the "Clean Code Shock" with PMD</title>
	<description>&lt;p&gt;Your new year resolution includes "&lt;em&gt;Write clean Apex code&lt;/em&gt;". So you run &lt;a href="https://pmd.github.io/"&gt;PMD&lt;/a&gt; with a full ruleset and &lt;a href="/blog/2018/11/cleaning-up-an-apex-codebase-with-pmd.html"&gt;get shocked&lt;/a&gt; by the number of violations. You drop the resolution in a blink.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#dont-boil-the-ocean" id="dont-boil-the-ocean"&gt;Don't boil the Ocean&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Even a journey of a thousand miles &lt;a href="https://despair.com/collections/demotivators/products/ambition?variant=2457295747"&gt;starts with a single step&lt;/a&gt;, so let's break down the task into manageable chunks to &lt;a href="https://en.wikipedia.org/wiki/Divide_and_rule"&gt;divide and rule&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;There are 2 dimensions you can use: Type of code and priority levels. Using them you can turn your &lt;a href="https://amzn.to/2RmMXvp"&gt;Clean Code&lt;/a&gt; journey into manageable stages.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#code-types" id="code-types"&gt;Code Types&lt;/a&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Legacy code: all code that doesn't fall in any of the two other categories&lt;/li&gt; 
 &lt;li&gt;Changed code: code that needs change due to business requirements&lt;/li&gt; 
 &lt;li&gt;New code: new code written for new or changed functionality (applies to copy &amp;amp; paste too)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;a href="#priority-levels" id="priority-levels"&gt;Priority Levels&lt;/a&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;1 = security and performance, will fail build&lt;/li&gt; 
 &lt;li&gt;2 = bad code, will fail build&lt;/li&gt; 
 &lt;li&gt;3 &amp;amp; 4 = hard to maintain code, will generate warning&lt;/li&gt; 
 &lt;li&gt;5 = ugly code, will generate hint&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;PMD rules for code types have different priorities. A different number of tests will fail a build:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;11 for legacy code (all around performance and security)&lt;/li&gt; 
 &lt;li&gt;33 for changed code&lt;/li&gt; 
 &lt;li&gt;44 for new code&lt;/li&gt; 
&lt;/ul&gt;</description>
	<link>2019/01/avoid-the-clean-code-shock-with-pmd.html</link>
	<author>Stephan H. Wissel</author>
	<guid>5f197330-0e40-11e9-aa45-01ee17350376</guid>
	<pubDate>02 January 2019</pubDate>

</item>
<item>
	<title>Pattern in your Apex Controller</title>
	<description>&lt;p&gt;A (software) &lt;a href="https://en.wikipedia.org/wiki/Software_design_pattern"&gt;design pattern&lt;/a&gt; is a general, reusable solution to a commonly occurring problem withing a given context. &lt;a href="https://en.wikipedia.org/wiki/Christopher_Alexander"&gt;Christoper Alexander&lt;/a&gt; inspired the &lt;a href="https://en.wikipedia.org/wiki/Design_Patterns"&gt;Gang of four&lt;/a&gt; to apply pattern to software and enumerate 23 classic software pattern.&lt;/p&gt; 
&lt;p&gt;This article discusses how to use some of them in the context of &lt;a href="https://en.wikipedia.org/wiki/Salesforce.com#Apex"&gt;Apex&lt;/a&gt; controllers.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#the-context-same-same-but-different" id="the-context-same-same-but-different"&gt;The context: Same same, but different&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;You are creating an application to support construction on force.com that will serve multiple countries. Part of the requirements is to compute a risk score for any given project. While &lt;a href="https://www.iso.org/news/2012/12/Ref1685.html"&gt;ISO standards&lt;/a&gt; form the foundation of the assessment, each jurisdiction has some specialties that alter the logic eventually.&lt;/p&gt; 
&lt;p&gt;This is just one of the requirements, you have many more that follow the &lt;code&gt;pattern&lt;/code&gt; &lt;a href="https://www.samesamebutdifferent.site/2017/08/same-same-but-different-origin/"&gt;Same Same - But different&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#patterns-used" id="patterns-used"&gt;Patterns used&lt;/a&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Interface-based_programming"&gt;Interface based programming&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://msdn.microsoft.com/en-us/library/aa480019.aspx"&gt;Metadata driven application design&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Facade_pattern"&gt;Facade pattern&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Factory_method_pattern"&gt;Factory pattern&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Besides those, you want to know &lt;a href="https://trailhead.salesforce.com/en/search?keywords=%22Apex%20Enterprise%20Patterns%22"&gt;Apex Enterprise Patterns&lt;/a&gt;. Go Trailhead and learn.&lt;/p&gt;</description>
	<link>2018/12/pattern-in-your-apex-controller.html</link>
	<author>Stephan H. Wissel</author>
	<guid>01f2e0e0-0b04-11e9-8f1f-178be3bffe51</guid>
	<pubDate>29 December 2018</pubDate>

</item>
<item>
	<title>Lightning Web Components (LWC) quick overview</title>
	<description>&lt;p&gt;On December 13 Salesforce announced &lt;a href="https://www.salesforce.com/blog/2018/12/introducing-lightning-web-components-with-javascript"&gt;Lightning Web Components&lt;/a&gt; (LWC) a new way to build components on the Salesforce platform. Here is my take.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#expanding-lightning-family" id="expanding-lightning-family"&gt;Expanding Lightning Family&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;"Lightning" serves now as a family name for modern Salesforce development. LWC are the latest family members. We now have:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Lightning Platform: the runtime environment&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.lightningdesignsystem.com/"&gt;Lightning Design System&lt;/a&gt;: providing the visuals&lt;/li&gt; 
 &lt;li&gt;The &lt;a href="https://github.com/forcedotcom/aura"&gt;Aura Framework&lt;/a&gt;: Implementing components for lightning&lt;/li&gt; 
 &lt;li&gt;&lt;a href="http://ng-lightning.github.io/ng-lightning/"&gt;ng-lightning&lt;/a&gt;: Angular components using the Lightning Design System - a open source contribution, not affiliated with commercial Salesforce&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://react.lightningdesignsystem.com/"&gt;Lightning React&lt;/a&gt;: React components using the Lightning Design system&lt;/li&gt; 
 &lt;li&gt;Last not least: &lt;a href="https://developer.salesforce.com/blogs/2018/12/introducing-lightning-web-components.html"&gt;Lightning Web Components&lt;/a&gt; (LWC)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The linked blog entries explain the rationale, so check them out.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#same-but-different" id="same-but-different"&gt;Same but different&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;The look and feel doesn't change, the way you code them does. For now &lt;a href="https://developer.salesforce.com/tools/sfdxcli"&gt;SFDX&lt;/a&gt;, &lt;a href="https://code.visualstudio.com/"&gt;Visual Studio Code&lt;/a&gt; and the &lt;a href="https://marketplace.visualstudio.com/items?itemName=salesforce.salesforcedx-vscode"&gt;Salesforce Extension Pack&lt;/a&gt; are to goto tools for the Spring 2019 release.&lt;/p&gt; 
&lt;p&gt;&lt;img src="/blog/images/2018/ComponentMigration.png" alt="The new file structure 4 instead of 8 files"&gt;&lt;/p&gt; 
&lt;p&gt;Instead of up to 8 files you only need 4. For one: all JavaScript (3 files) now lives in one &lt;a href="http://es6-features.org/"&gt;ES6&lt;/a&gt; JS file and we don't have an auradoc or svg file for now&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#co-existence" id="co-existence"&gt;Co-existence&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Existing &lt;a href="http://www.auraframework.org/"&gt;Aura based&lt;/a&gt; components will continue to work and will even allow to contain LWC components.&lt;/p&gt; 
&lt;p&gt;&lt;img src="/blog/images/2018/ComponentContainment.png" alt="LWC in Aura, but not Aura in LWC"&gt;&lt;/p&gt; 
&lt;p&gt;What you can't do is putting Aura components inside LWC. So your transition to LWC is bottom-up, not top-down&lt;/p&gt;</description>
	<link>2018/12/lwc-quick-overview.html</link>
	<author>Stephan H. Wissel</author>
	<guid>e5f504f0-ff40-11e8-8efb-9b9b4e567902</guid>
	<pubDate>14 December 2018</pubDate>

</item>
<item>
	<title>Salesforce login statistics aggregation</title>
	<description>&lt;p&gt;A recent requirement from a customer was "I'd like to analyze logins by users in Excel", despite a &lt;a href="https://success.salesforce.com/answers?id=90630000000gsJjAAI"&gt;dashboard&lt;/a&gt; approach would be sufficient. With a few million records aggregating in Excel wasn't particularly appealing&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#download-the-log" id="download-the-log"&gt;Download the log&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Salesforce setup allows to download the log as &lt;code&gt;csv&lt;/code&gt; or &lt;code&gt;csv.gz&lt;/code&gt; file. In any case you should use the later. I learned the hard way: the &lt;a href="https://en.wikipedia.org/wiki/Chunked_transfer_encoding"&gt;chunked transfer encoding&lt;/a&gt; might leave you with less data be processed than you expect.&lt;/p&gt; 
&lt;p&gt;The &lt;a href="https://docs.oracle.com/javase/7/docs/api/java/util/Scanner.html"&gt;Scanner&lt;/a&gt; simply stopped after a few thousand entries, while the &lt;a href="https://commons.apache.org/proper/commons-csv/"&gt;csv parser&lt;/a&gt; barfed with an error.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#processing" id="processing"&gt;Processing&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;After downloading and extracting the csv I used a small Java routine (yep, I'm that old) to aggregate logins per user, capturing the count and the first/last login date as well as the country of login (with the disclaimer caveats) and the eventual community.&lt;/p&gt; 
&lt;p&gt;For reliably and robustly reading csv in Java, usually I would use a &lt;a href="https://commons.apache.org/proper/commons-csv/"&gt;robust library&lt;/a&gt;, however in this case having no dependencies and using the scanner did just nicely.&lt;/p&gt;</description>
	<link>2018/12/salesforce-login-statistics-aggregation.html</link>
	<author>Stephan H. Wissel</author>
	<guid>3ef8b2e0-f848-11e8-a160-81c62127bae4</guid>
	<pubDate>05 December 2018</pubDate>

</item>
<item>
	<title>Supercharge SFDX with Ui-licious</title>
	<description>&lt;p&gt;You &lt;a href="https://developer.salesforce.com/tools/sfdxcli"&gt;drank the Coolaid&lt;/a&gt; and you are all in and really love your &lt;a href="https://developer.salesforce.com/docs/atlas.en-us.sfdx_dev.meta/sfdx_dev/sfdx_dev_scratch_orgs.htm"&gt;Scratch Orgs&lt;/a&gt;. Just a few things drive you crazy.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#when-the-api-doesnt-expose-a-setting" id="when-the-api-doesnt-expose-a-setting"&gt;When the API doesn't expose a setting&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Your application is querying the OutOfOffice objects. Unfortunately they only exist when the Chatter settings have enabled them. To my best knowledge there is no API or config setting to achieve that from the command line. So automated testing in a scratch org won't work.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#ui-licious-to-the-rescue" id="ui-licious-to-the-rescue"&gt;Ui-licious to the rescue&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://uilicious.com/"&gt;Ui-licious&lt;/a&gt; is a UI testing service that uses JavaScript as its scripting language. This makes an easy read and edit. A script that can set the missing OOO setting is short and simple (if you agree &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe"&gt;iFrames&lt;/a&gt; are easy to handle). You can (almost) read it out aloud:&lt;/p&gt; 
&lt;pre class="brush: javascript"&gt;// URL Provided by data object from the command line
I.goTo(DATA.result.url);
I.must.see("Chatter Settings");
// To ensure we work on the iFrame we get the id
let iframeId = UI.execute("return document.getElementsByTagName('iframe')[0].getAttribute('id')");
// The iFrame loads slowly
I.wait(10);
UI.context("#" + iframeId, () =&amp;gt; {
	I.see("Chatter is a corporate network that lets your users work together, talk to each other, and share information, all in real time.");
    I.click("Edit");
    I.must.see("Save");
    I.select("Users can set Out of Office messages");
    I.click("Save");
})
&lt;/pre&gt; 
&lt;p&gt;The interesting piece in the above is &lt;code&gt;DATA.result.url&lt;/code&gt; which is an JSON object that needs to be handed over to the Ui-licious. A small command script in tandem with SFDX does the trick. The beauty here: we directly can reuse the output of an sfdx command as input for the &lt;code&gt;uilicious-cli&lt;/code&gt;.&lt;/p&gt; 
&lt;pre class="brush: bash"&gt;sfdx force:org:open -r -p lightning/setup/CollaborationSettings/home --json &amp;gt; local.json
uilicious-cli  run "ProjectName" "ScriptName" --dataFile local.json -u uiliciousUser -p uiliciousPassword
&lt;/pre&gt; 
&lt;p&gt;It probably would be part of a larger CI script, but you get the idea! You might not store the output in a file, but use bash to capture it in memory and use &lt;code&gt;--dataObject&lt;/code&gt; instead. Full details are in &lt;a href="https://docs.uilicious.com/cli/test_data.html"&gt;the documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;As usual YMMV&lt;/p&gt;</description>
	<link>2018/11/supercharge-sfdx-with-ui-licious.html</link>
	<author>Stephan H. Wissel</author>
	<guid>83ed9070-f206-11e8-a016-49d6fa66cb22</guid>
	<pubDate>27 November 2018</pubDate>

</item>
<item>
	<title>Cleaning up an APEX codebase with PMD</title>
	<description>&lt;p&gt;You inherit a large code base, it is perfect, a work of beauty. Then you wake up to the ping of your &lt;a href="https://pmd.github.io"&gt;PMD&lt;/a&gt; run completion and find multiple thousands of rule violation (and you haven't even started to assert test assertions). Here is how to fix that.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#divide-and-conquer" id="divide-and-conquer"&gt;Divide and conquer&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://www.investopedia.com/terms/b/boil-the-ocean.asp"&gt;Boiling the ocean&lt;/a&gt; and fix all issues in one go is hardly an option. So you need to strategize. PMD gives you a hint: every rule has a &lt;a href="https://pmd.github.io/pmd-6.9.0/pmd_userdocs_configuring_rules.html#message-and-priority-overriding"&gt;priority&lt;/a&gt; property, where you can specify how important this rule is. The higher the number, the less important the rule. You can run PMD using the &lt;code&gt;min -[somenumber]&lt;/code&gt; parameter which will ignore rules with a higher value.&lt;/p&gt; 
&lt;p&gt;Next step is to decide what rules constitute your priority 1 and 2 buckets. I strongly recommend to make them mandatory fixes before the next deployment, so pick the rules carefully. The candidates I suggest are around performance and security:&lt;/p&gt; 
&lt;h4&gt;&lt;a href="#priority-1" id="priority-1"&gt;Priority 1&lt;/a&gt;&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;ApexXSSFromURLParam&lt;/li&gt; 
 &lt;li&gt;ApexSOQLInjection&lt;/li&gt; 
 &lt;li&gt;ApexOpenRedirect&lt;/li&gt; 
 &lt;li&gt;ApexInsecureEndpoint&lt;/li&gt; 
 &lt;li&gt;AvoidDmlStatementsInLoops&lt;/li&gt; 
 &lt;li&gt;AvoidSoqlInLoops&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;&lt;a href="#priority-2" id="priority-2"&gt;Priority 2&lt;/a&gt;&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;ApexCRUDViolation&lt;/li&gt; 
 &lt;li&gt;ApexSharingViolations&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Thereafter you decide on priority 3 onwards. Strong candidates for level 3 are all the rules that ensure code is maintainable and avoid errors, like deep nesting or cyclomatic complexity (a fancy word for "messy code")&lt;/p&gt;</description>
	<link>2018/11/cleaning-up-an-apex-codebase-with-pmd.html</link>
	<author>Stephan H. Wissel</author>
	<guid>a199cf60-eec5-11e8-91af-4f1de64b82e9</guid>
	<pubDate>23 November 2018</pubDate>

</item>
<item>
	<title>Backing up Salesforce Meta data</title>
	<description>&lt;p&gt;&lt;strong&gt;Clicks not code&lt;/strong&gt; makes the Salesforce Admin a &lt;a href="https://www.salesforce.com/video/193372/"&gt;super hero&lt;/a&gt;, but might send jitters through the compliance and change management team's combined spines. How can you track all of these changes?&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#tracking-changes" id="tracking-changes"&gt;Tracking changes&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Salesforce does record, when &lt;a href="https://developer.salesforce.com/docs/atlas.en-us.securityImplGuide.meta/securityImplGuide/admin_monitorsetup.htm"&gt;configured&lt;/a&gt;, changes in setup for 180 days. The format is a log that isn't actionable (e.g. rollback). An alternative to the build in function is &lt;a href="https://bluecanvas.io/"&gt;BlueCanvas&lt;/a&gt; that stores meta data automatically into a git repository. It's part of their developer focused solution that also handles the deployment and rollback of source code&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#downloading-meta-data" id="downloading-meta-data"&gt;Downloading meta data&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;When you are not ready (or haven't allocated a budget yet) to fully automate this, there's a do-it-yourself alternative. A few steps:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Make sure you have Java8 installed&lt;/li&gt; 
 &lt;li&gt;Deploy the Salesforce &lt;a href="https://developer.salesforce.com/docs/atlas.en-us.daas.meta/daas/meta_development.htm"&gt;Ant Migration tool&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Download and deploy into your path &lt;a href="https://github.com/kgalant/PackageBuilder/blob/master/PackageBuilder.jar"&gt;PackageBuilder.jar&lt;/a&gt; developer by my colleague Kim Galant&lt;/li&gt; 
 &lt;li&gt;create a &lt;code&gt;build.properties&lt;/code&gt; file (see below)&lt;/li&gt; 
 &lt;li&gt;create a &lt;code&gt;build.xml&lt;/code&gt; file (see below)&lt;/li&gt; 
 &lt;li&gt;run the &lt;code&gt;fetchSrc.sh&lt;/code&gt; shell command (see below)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;PackageBuilder will, when called with no instructions read ALL meta data and create one or more &lt;code&gt;package.xml&lt;/code&gt; files. Once created you can use ANT to retrieve the data.&lt;/p&gt;</description>
	<link>2018/11/backing-up-salesforce-meta-data.html</link>
	<author>Stephan H. Wissel</author>
	<guid>3f1eb8f0-e335-11e8-9f23-f10719d0a9a9</guid>
	<pubDate>08 November 2018</pubDate>

</item>
<item>
	<title>Lightning Mini Forms</title>
	<description>&lt;p&gt;One of my favorite lightning features is the &lt;a href="https://trailhead.salesforce.com/en/content/learn/modules/lightning_app_builder"&gt;Lightning App Builder&lt;/a&gt;. It allows to tailor Salesforce for a given set of users, to show what they need, how they need it.&lt;/p&gt; 
&lt;p&gt;In the page editor the endless scrolling page, record details followed by related lists, we got to love, can be broken down into multiple tabs. For related lists, the OOTB controls already allow to just pick one. Placed multiple times on a page, the layout can fit a specific audience's precise need, avoiding information overload.&lt;/p&gt; 
&lt;p&gt;However there's no control to break down the record details. The OOTB record details control will faithfully reproduce the assigned page layout with all sections. Custom controls to the rescue!&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#design-options" id="design-options"&gt;Design options&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;There are two options to consider: where to pull design information from and how to render it. For the later you can consider &lt;a href="https://developer.salesforce.com/docs/component-library/bundle/lightning:recordEditForm/example"&gt;lightning:recordEdit|ViewForm&lt;/a&gt; or &lt;a href="https://developer.salesforce.com/docs/component-library/bundle/lightning:recordForm"&gt;lightning:recordForm&lt;/a&gt;. Both can be argued for.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;lightning:recordForm&lt;/code&gt; only needs the fields / layout options supplied and will take care of all rendering. However you are limited to one or two columns - just like page layouts.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;lightning:record[Edit|View]Form&lt;/code&gt; requires coding the fields, probably using an &lt;a href="https://developer.salesforce.com/docs/component-library/bundle/aura:iteration/example"&gt;aura:iteration&lt;/a&gt;, but leaves you with the freedom of layout. Typically you would use a &lt;a href="https://developer.salesforce.com/docs/component-library/bundle/lightning:layoutItem/specification"&gt;lightning:layoutItem&lt;/a&gt; and its &lt;code&gt;size&lt;/code&gt; property to determine the number of columns (with 12 / size = number of columns).&lt;/p&gt; 
&lt;p&gt;To keep it simple I'll stick to the &lt;code&gt;lightning:recordForm&lt;/code&gt; for now.&lt;/p&gt; 
&lt;p&gt;Next question: where to provision the list of fields from? When you want an universally usable mini form, you can't hardcode them, but provide them using a design property, so they can be provided in the page editor after you dragged the component onto the page.&lt;/p&gt; 
&lt;p&gt;Still you need to decide what attributes you provide:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;List of field names&lt;/li&gt; 
 &lt;li&gt;Name of a field set&lt;/li&gt; 
 &lt;li&gt;Name of a section in a page layout&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;I'll start with the first one and relegate the other two approaches to future posts.&lt;/p&gt; 
&lt;p&gt;To make this work you will need a custom lightning component. Let's call it &lt;code&gt;MiniForm&lt;/code&gt;. We will only need &lt;code&gt;MiniForm.cmp&lt;/code&gt;, &lt;code&gt;MiniFormController.js&lt;/code&gt; and &lt;code&gt;MiniForm.design&lt;/code&gt;. No helper or Apex will be harmed.&lt;/p&gt;</description>
	<link>2018/11/lightning-mini-forms.html</link>
	<author>Stephan H. Wissel</author>
	<guid>32921b70-e166-11e8-8147-25db6896428c</guid>
	<pubDate>06 November 2018</pubDate>

</item>
<item>
	<title>My software stack</title>
	<description>&lt;p&gt;From time to time the question pops up: &lt;a href="/blog/imprint.html"&gt;what's your software stack&lt;/a&gt;? I use cloud based tools like &lt;a href="https://www.lucidchart.com"&gt;LucidChart&lt;/a&gt;, &lt;a href="https://github.com/stwissel"&gt;GitHub&lt;/a&gt;, &lt;a href="https://bitbucket.org"&gt;Bitbucket&lt;/a&gt; and various other SDLC related tools (subject to a future post), but still quite a number of locally installed tools.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#the-essentials" id="the-essentials"&gt;The essentials&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Tools I use on, more or less, daily basis:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://nodejs.org/en/"&gt;NodeJS&lt;/a&gt; (unsurprisingly)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://developer.salesforce.com/tools/sfdxcli"&gt;Salesforce CLI&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://devcenter.heroku.com/articles/heroku-cli"&gt;Heroku CLI&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://code.visualstudio.com/"&gt;Visual Studio Code&lt;/a&gt; with a few plugins:&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=salesforce.salesforcedx-vscode"&gt;SFDX Plugin&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=mohanChinnappan.apex-pmd-code-scanner"&gt;PMD Plugin&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=maty.vscode-mocha-sidebar"&gt;Mocha Sidebar&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=Orta.vscode-jest"&gt;Jest plugin&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens"&gt;Git Lens&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode"&gt;Prettier&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=MS-vsliveshare.vsliveshare"&gt;Live Share&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.git-tower.com/mac"&gt;Tower GIT Gui&lt;/a&gt; (and of course GIT command line) - or &lt;a href="https://www.sourcetreeapp.com/"&gt;SourceTree&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.openssl.org/"&gt;OpenSSL&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://eclipse.org"&gt;Eclipse&lt;/a&gt; - for Java development. Never warmed up to other Java IDEs (I tried)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://sourcegear.com/diffmerge/"&gt;DiffMerge tool&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;a current &lt;a href="https://www.java.com"&gt;JVM&lt;/a&gt; and &lt;a href="https://openjdk.java.net/"&gt;JDK&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://welkinsuite.com/"&gt;The Welkin Suite&lt;/a&gt; - for Salesforce development&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://getpostman.com"&gt;Postman&lt;/a&gt; - the Swiss Army Knife for REST&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://pencil.evolus.vn/"&gt;Pencil&lt;/a&gt; and &lt;a href="https://balsamiq.com/download/"&gt;Balsamiq&lt;/a&gt; for wire frames (The former when I need to share the raw file, the later when my counterpart has Balsamiq or images are sufficient)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.sublimetext.com/"&gt;Sublime&lt;/a&gt; - Editor super fast&lt;/li&gt; 
&lt;/ul&gt;</description>
	<link>2018/10/my-software-stack.html</link>
	<author>Stephan H. Wissel</author>
	<guid>a301ce70-dceb-11e8-995b-7547664f920f</guid>
	<pubDate>31 October 2018</pubDate>

</item>
<item>
	<title>Creating a Lightning Service</title>
	<description>&lt;p&gt;When you develop in &lt;a href="https://developer.salesforce.com/docs/component-library/overview/components"&gt;Lightning&lt;/a&gt; your client side architecture can benefit as much as the server from a &lt;a href="https://trailhead.salesforce.com/en/content/learn/modules/apex_patterns_sl/apex_patterns_sl_soc"&gt;separation of concerns&lt;/a&gt;. The component library is testimony to that.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#out-of-the-box-services" id="out-of-the-box-services"&gt;Out of the box services&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;The &lt;a href="https://trailhead.salesforce.com/en/content/learn/modules/apex_patterns_sl/apex_patterns_sl_soc"&gt;Component Library&lt;/a&gt; features a growing number of services:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://developer.salesforce.com/docs/atlas.en-us.lightning.meta/lightning/data_service.htm"&gt;Lightning Data Service&lt;/a&gt;, the workhorse of creating, loading and saving Salesforce records. One specialty: it doesn't have its own component, but surfaces through &lt;a href="https://developer.salesforce.com/docs/component-library/bundle/force:recordData/documentation"&gt;force:RecordData&lt;/a&gt;, &lt;a href="https://developer.salesforce.com/docs/component-library/bundle/lightning:recordEditForm/example"&gt;lightning:recordEditForm&lt;/a&gt;, &lt;a href="https://developer.salesforce.com/docs/component-library/bundle/lightning:recordViewForm/documentation"&gt;lightning:recordViewForm&lt;/a&gt; and &lt;a href="https://developer.salesforce.com/docs/component-library/bundle/lightning:recordForm"&gt;lightning:recordForm&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://developer.salesforce.com/docs/component-library/bundle/lightning:overlayLibrary/documentation"&gt;Overlay Library&lt;/a&gt; to show modals and popovers&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://developer.salesforce.com/docs/component-library/bundle/lightning:notificationsLibrary/specification"&gt;Notification Library&lt;/a&gt; to show notices and toasts&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://developer.salesforce.com/docs/component-library/bundle/lightning:omniToolkitAPI/documentation"&gt;Omni Toolkit API&lt;/a&gt; for accessing OmniChannel capabilities&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://developer.salesforce.com/docs/component-library/bundle/lightning:navigationItemAPI"&gt;Navigation Item API&lt;/a&gt; to move around in lightning&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://developer.salesforce.com/docs/component-library/bundle/lightning:conversationToolkitAPI/documentation"&gt;Conversation Toolkit API&lt;/a&gt; to interact with chat&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://developer.salesforce.com/docs/component-library/bundle/lightning:quickActionAPI"&gt;Quick Action API&lt;/a&gt; accessing quick actions&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://developer.salesforce.com/docs/component-library/bundle/lightning:workspaceAPI/documentation"&gt;Workspace API&lt;/a&gt; to access console app tabs and subtabs&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://developer.salesforce.com/docs/component-library/bundle/lightning:utilityBarAPI/documentation"&gt;Utility Bar API&lt;/a&gt; to access the utility bar&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://developer.salesforce.com/docs/component-library/bundle/lightning:empApi/documentation"&gt;Emp API&lt;/a&gt; to subscribe to streaming events&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;a href="#building-your-own" id="building-your-own"&gt;Building your own&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;There is more than one way to skin you cat. You can do:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Lightning Style&lt;/strong&gt;&lt;br&gt;&lt;a href="https://developer.salesforce.com/blogs/author/pozil"&gt;Philippe Ozil&lt;/a&gt; described &lt;a href="https://developer.salesforce.com/blogs/2018/08/implement-and-use-lightning-service-components.html"&gt;in detail&lt;/a&gt; how to use and create your own services ?lightning style'. You should check out his &lt;a href="https://github.com/pozil/server-action-service"&gt;Server Side Actions Service&lt;/a&gt; that allows you cut down on boiler plate code substantially&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;JavaScript Style&lt;/strong&gt;&lt;br&gt;Establish a global service extending the Window object&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;ES6 Style&lt;/strong&gt;&lt;br&gt;Import a JavaScript module. This would need to setup Babel - not too practical for now&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;a href="#extending-the-window-object" id="extending-the-window-object"&gt;Extending the window object&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;When you extend the window object, which is the browser's top level object, the service becomes available "standalone", like &lt;code&gt;alert()&lt;/code&gt; (which is actually &lt;code&gt;window.alert()&lt;/code&gt;). A service could look like this:&lt;/p&gt; 
&lt;pre class="brush: javascript"&gt;window.demoLib = ( function() {
	let someMethod = () =&amp;gt; {
		return 'Something'
	}

	let helloMethod = (paul) =&amp;gt; {
		return `Hello ${paul}`;
	}

	return {someMethod, helloMethod};
}());
&lt;/pre&gt; 
&lt;p&gt;This will now provide you with &lt;code&gt;demoLib.someMethod()&lt;/code&gt; returning &lt;em&gt;Something&lt;/em&gt; and &lt;code&gt;demoLib.helloMethod('World')&lt;/code&gt; returning "&lt;em&gt;Hello World&lt;/em&gt;". The final step to enable such a library is to add &lt;a href="https://developer.salesforce.com/docs/component-library/bundle/ltng:require"&gt;ltng:require&lt;/a&gt; to your components: &lt;code&gt;&amp;lt;ltng:require scripts="{!Resource.demoLib} afterScriptLoaded="someMethodIfRequired" /&amp;gt;&lt;/code&gt; presuming you stored your JS in resources as &lt;code&gt;demoLib.js&lt;/code&gt;. The Aura framework will make sure that the library is loaded once only, regardless how many components define it as dependency.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="#what-can-go-wrong" id="what-can-go-wrong"&gt;What can go wrong?&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;There are a few caveats:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;For hard core Apex developers: JavaScript is case sensitive&lt;/li&gt; 
 &lt;li&gt;You need to be clearly communicating service names to other developers in your org. If someone has the idea to name a library the same as yours, things will break. Good practice is to check if your library and function is available: &lt;code&gt;if (window.demoLib &amp;amp;&amp;amp; window.demoLib.someMethod) {...}&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Fat arrow functions &lt;code&gt;() =&amp;gt; {...}&lt;/code&gt; are not supported in &lt;a href="https://www.forbes.com/sites/markgibbs/2011/12/16/internet-explorer-must-die/#3e6184391727"&gt;legacy browsers&lt;/a&gt;, so you need the slightly more verbose &lt;code&gt;function(){...}&lt;/code&gt; (beware the &lt;code&gt;this&lt;/code&gt; keyword behaves different then).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;As usual YMMV&lt;/p&gt;</description>
	<link>2018/10/creating-a-lightning-service.html</link>
	<author>Stephan H. Wissel</author>
	<guid>cb5a98f0-d365-11e8-842d-7def18d9bfb5</guid>
	<pubDate>19 October 2018</pubDate>

</item>

</channel>
</rss>
